// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: zone.sql

package db

import (
	"context"
)

const createZone = `-- name: CreateZone :one
INSERT INTO zones
	(zone, time_zone)
VALUES
	(?, ?)
RETURNING id, zone, time_zone
`

type CreateZoneParams struct {
	Zone     string
	TimeZone string
}

func (q *Queries) CreateZone(ctx context.Context, arg CreateZoneParams) (Zone, error) {
	row := q.db.QueryRowContext(ctx, createZone, arg.Zone, arg.TimeZone)
	var i Zone
	err := row.Scan(&i.ID, &i.Zone, &i.TimeZone)
	return i, err
}

const deleteZone = `-- name: DeleteZone :exec
DELETE FROM zones
WHERE
	id = ?
`

func (q *Queries) DeleteZone(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteZone, id)
	return err
}

const getZones = `-- name: GetZones :many
SELECT
	id, zone, time_zone
FROM
	zones
WHERE
	zone GLOB ?
ORDER by zone
`

func (q *Queries) GetZones(ctx context.Context, zone string) ([]Zone, error) {
	rows, err := q.db.QueryContext(ctx, getZones, zone)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Zone
	for rows.Next() {
		var i Zone
		if err := rows.Scan(&i.ID, &i.Zone, &i.TimeZone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateZone = `-- name: UpdateZone :one
UPDATE zones
SET
	zone = ?,
	time_zone = ?
WHERE
	id = ?
RETURNING id, zone, time_zone
`

type UpdateZoneParams struct {
	Zone     string
	TimeZone string
	ID       int64
}

func (q *Queries) UpdateZone(ctx context.Context, arg UpdateZoneParams) (Zone, error) {
	row := q.db.QueryRowContext(ctx, updateZone, arg.Zone, arg.TimeZone, arg.ID)
	var i Zone
	err := row.Scan(&i.ID, &i.Zone, &i.TimeZone)
	return i, err
}
