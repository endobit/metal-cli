// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: cluster.sql

package db

import (
	"context"
)

const createCluster = `-- name: CreateCluster :one
INSERT INTO clusters
	(cluster, zone)
VALUES
	(?, (select id from zones z where z.zone = ?))
RETURNING id, zone_id, cluster
`

type CreateClusterParams struct {
	Cluster string
	Zone    string
}

func (q *Queries) CreateCluster(ctx context.Context, arg CreateClusterParams) (Cluster, error) {
	row := q.db.QueryRowContext(ctx, createCluster, arg.Cluster, arg.Zone)
	var i Cluster
	err := row.Scan(&i.ID, &i.ZoneID, &i.Cluster)
	return i, err
}

const deleteCluster = `-- name: DeleteCluster :exec
DELETE FROM clusters
WHERE
	id = ?
`

func (q *Queries) DeleteCluster(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCluster, id)
	return err
}

const getClusters = `-- name: GetClusters :many
SELECT
	c.id,
	z.zone,
	c.cluster
FROM
	zones z, clusters c
WHERE
	z.zone GLOB ?
AND
	c.cluster GLOB ?
AND
	c.zone_id = z.id
`

type GetClustersParams struct {
	Zone    string
	Cluster string
}

type GetClustersRow struct {
	ID      int64
	Zone    string
	Cluster string
}

func (q *Queries) GetClusters(ctx context.Context, arg GetClustersParams) ([]GetClustersRow, error) {
	rows, err := q.db.QueryContext(ctx, getClusters, arg.Zone, arg.Cluster)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClustersRow
	for rows.Next() {
		var i GetClustersRow
		if err := rows.Scan(&i.ID, &i.Zone, &i.Cluster); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCluster = `-- name: UpdateCluster :one
UPDATE clusters
SET
	cluster = ?,
	zones = (select id from zones z where z.zone = ?)
WHERE
	clusters.id = ?
RETURNING id, zone_id, cluster
`

type UpdateClusterParams struct {
	Cluster string
	Zone    string
	ID      int64
}

func (q *Queries) UpdateCluster(ctx context.Context, arg UpdateClusterParams) (Cluster, error) {
	row := q.db.QueryRowContext(ctx, updateCluster, arg.Cluster, arg.Zone, arg.ID)
	var i Cluster
	err := row.Scan(&i.ID, &i.ZoneID, &i.Cluster)
	return i, err
}
