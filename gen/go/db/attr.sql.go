// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: attr.sql

package db

import (
	"context"
)

const createClusterAttribute = `-- name: CreateClusterAttribute :one

INSERT INTO cluster_attributes
       (cluster_id, key, value, is_protected)
VALUES
       ((SELECT clusters.id
         FROM clusters, zones
	 WHERE zones.zone = ?
	 AND clusters.cluster = ?
	 AND cluster.zone_id = zones.id), ?, ?, ?)
RETURNING id, cluster_id, "key", value, is_protected
`

type CreateClusterAttributeParams struct {
	Zone        string
	Cluster     string
	Key         string
	Value       string
	IsProtected int64
}

// Cluster
func (q *Queries) CreateClusterAttribute(ctx context.Context, arg CreateClusterAttributeParams) (ClusterAttribute, error) {
	row := q.db.QueryRowContext(ctx, createClusterAttribute,
		arg.Zone,
		arg.Cluster,
		arg.Key,
		arg.Value,
		arg.IsProtected,
	)
	var i ClusterAttribute
	err := row.Scan(
		&i.ID,
		&i.ClusterID,
		&i.Key,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const createDeviceAttribute = `-- name: CreateDeviceAttribute :one

INSERT INTO device_attributes
       (device_id, key, value, is_protected)
VALUES
       ((SELECT devices.id
         FROM devices, zones, clusters
	 WHERE devices.device = ?
	 AND zones.zone = ?
	 AND clusters.cluster = ?
	 AND devices.cluster_id = cluster.id
	 AND cluster.zone_id = zones.id
	 ), ?, ?, ?)
RETURNING id, device_id, "key", value, is_protected
`

type CreateDeviceAttributeParams struct {
	Device      string
	Zone        string
	Cluster     string
	Key         string
	Value       string
	IsProtected int64
}

// Device
func (q *Queries) CreateDeviceAttribute(ctx context.Context, arg CreateDeviceAttributeParams) (DeviceAttribute, error) {
	row := q.db.QueryRowContext(ctx, createDeviceAttribute,
		arg.Device,
		arg.Zone,
		arg.Cluster,
		arg.Key,
		arg.Value,
		arg.IsProtected,
	)
	var i DeviceAttribute
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Key,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const createEnvironmentAttribute = `-- name: CreateEnvironmentAttribute :one

INSERT INTO environment_attributes
       (environment_id, key, value, is_protected)
VALUES
       ((SELECT id FROM environments WHERE environments.environment = ?), ?, ?, ?)
RETURNING id, environment_id, "key", value, is_protected
`

type CreateEnvironmentAttributeParams struct {
	Environment string
	Key         string
	Value       string
	IsProtected int64
}

// Environment
func (q *Queries) CreateEnvironmentAttribute(ctx context.Context, arg CreateEnvironmentAttributeParams) (EnvironmentAttribute, error) {
	row := q.db.QueryRowContext(ctx, createEnvironmentAttribute,
		arg.Environment,
		arg.Key,
		arg.Value,
		arg.IsProtected,
	)
	var i EnvironmentAttribute
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.Key,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const createGlobalAttribute = `-- name: CreateGlobalAttribute :one

INSERT INTO global_attributes
       (key, value, is_protected)
VALUES
       (?, ?, ?)
RETURNING id, "key", value, is_protected
`

type CreateGlobalAttributeParams struct {
	Key         string
	Value       string
	IsProtected int64
}

// Global
func (q *Queries) CreateGlobalAttribute(ctx context.Context, arg CreateGlobalAttributeParams) (GlobalAttribute, error) {
	row := q.db.QueryRowContext(ctx, createGlobalAttribute, arg.Key, arg.Value, arg.IsProtected)
	var i GlobalAttribute
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const createModelAttribute = `-- name: CreateModelAttribute :one

INSERT INTO model_attributes
       (model_id, key, value, is_protected)
VALUES
       ((SELECT id FROM models WHERE models.model = ?), ?, ?, ?)
RETURNING id, model_id, "key", value, is_protected
`

type CreateModelAttributeParams struct {
	Model       string
	Key         string
	Value       string
	IsProtected int64
}

// Model
func (q *Queries) CreateModelAttribute(ctx context.Context, arg CreateModelAttributeParams) (ModelAttribute, error) {
	row := q.db.QueryRowContext(ctx, createModelAttribute,
		arg.Model,
		arg.Key,
		arg.Value,
		arg.IsProtected,
	)
	var i ModelAttribute
	err := row.Scan(
		&i.ID,
		&i.ModelID,
		&i.Key,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const createZoneAttribute = `-- name: CreateZoneAttribute :one

INSERT INTO zone_attributes
       (zone_id, key, value, is_protected)
VALUES
       ((SELECT id FROM zones WHERE zones.zone = ?), ?, ?, ?)
RETURNING id, zone_id, "key", value, is_protected
`

type CreateZoneAttributeParams struct {
	Zone        string
	Key         string
	Value       string
	IsProtected int64
}

// Zone
func (q *Queries) CreateZoneAttribute(ctx context.Context, arg CreateZoneAttributeParams) (ZoneAttribute, error) {
	row := q.db.QueryRowContext(ctx, createZoneAttribute,
		arg.Zone,
		arg.Key,
		arg.Value,
		arg.IsProtected,
	)
	var i ZoneAttribute
	err := row.Scan(
		&i.ID,
		&i.ZoneID,
		&i.Key,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const deleteClusterAttribute = `-- name: DeleteClusterAttribute :exec
DELETE FROM
	cluster_attributes
WHERE
	id = ?
`

func (q *Queries) DeleteClusterAttribute(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteClusterAttribute, id)
	return err
}

const deleteDeviceAttribute = `-- name: DeleteDeviceAttribute :exec
DELETE FROM
	device_attributes
WHERE
	id = ?
`

func (q *Queries) DeleteDeviceAttribute(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDeviceAttribute, id)
	return err
}

const deleteEnvironmentAttribute = `-- name: DeleteEnvironmentAttribute :exec
DELETE FROM
	environment_attributes
WHERE
	id = ?
`

func (q *Queries) DeleteEnvironmentAttribute(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEnvironmentAttribute, id)
	return err
}

const deleteGlobalAttribute = `-- name: DeleteGlobalAttribute :exec
DELETE FROM
	global_attributes
WHERE
	id = ?
`

func (q *Queries) DeleteGlobalAttribute(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGlobalAttribute, id)
	return err
}

const deleteModelAttribute = `-- name: DeleteModelAttribute :exec
DELETE FROM
	model_attributes
WHERE
	id = ?
`

func (q *Queries) DeleteModelAttribute(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteModelAttribute, id)
	return err
}

const deleteZoneAttribute = `-- name: DeleteZoneAttribute :exec
DELETE FROM
	zone_attributes
WHERE
	id = ?
`

func (q *Queries) DeleteZoneAttribute(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteZoneAttribute, id)
	return err
}

const getClusterAttributes = `-- name: GetClusterAttributes :many
SELECT
	a.id, z.zone, c.cluster, a.key, a.value, a.is_protected
FROM
	cluster_attributes a, zones z, clusters c
WHERE
	z.zone GLOB ?
AND
	c.cluster GLOB ?
AND
	a.key GLOB ?
AND
	c.zone_id=z.id
AND	
	a.cluster_id=c.id
ORDER BY z.zone, c.cluster, a.key ASC
`

type GetClusterAttributesParams struct {
	Zone    string
	Cluster string
	Key     string
}

type GetClusterAttributesRow struct {
	ID          int64
	Zone        string
	Cluster     string
	Key         string
	Value       string
	IsProtected int64
}

func (q *Queries) GetClusterAttributes(ctx context.Context, arg GetClusterAttributesParams) ([]GetClusterAttributesRow, error) {
	rows, err := q.db.QueryContext(ctx, getClusterAttributes, arg.Zone, arg.Cluster, arg.Key)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClusterAttributesRow
	for rows.Next() {
		var i GetClusterAttributesRow
		if err := rows.Scan(
			&i.ID,
			&i.Zone,
			&i.Cluster,
			&i.Key,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceAttributes = `-- name: GetDeviceAttributes :many
SELECT
	a.id, d.device, a.key, a.value, a.is_protected
FROM
	device_attributes a, devices d, zones z, clusters c
WHERE
	z.zone GLOB ?
AND
	c.cluster GLOB ?
AND
	d.device GLOB ?
AND
	a.key GLOB ?
AND
	a.device_id=d.id
AND
	d.cluster_id = clusters.cluster
AND
	c.zone_id = zones.zone
ORDER BY d.device ASC
`

type GetDeviceAttributesParams struct {
	Zone    string
	Cluster string
	Device  string
	Key     string
}

type GetDeviceAttributesRow struct {
	ID          int64
	Device      string
	Key         string
	Value       string
	IsProtected int64
}

func (q *Queries) GetDeviceAttributes(ctx context.Context, arg GetDeviceAttributesParams) ([]GetDeviceAttributesRow, error) {
	rows, err := q.db.QueryContext(ctx, getDeviceAttributes,
		arg.Zone,
		arg.Cluster,
		arg.Device,
		arg.Key,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeviceAttributesRow
	for rows.Next() {
		var i GetDeviceAttributesRow
		if err := rows.Scan(
			&i.ID,
			&i.Device,
			&i.Key,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnvironmentAttributes = `-- name: GetEnvironmentAttributes :many
SELECT
	a.id, e.environment, a.key, a.value, a.is_protected
FROM
	environment_attributes a, environments e
WHERE
	e.environment GLOB ?
AND
	a.key GLOB ?
AND
	a.environment_id=e.id
ORDER BY e.environment, a.key ASC
`

type GetEnvironmentAttributesParams struct {
	Environment string
	Key         string
}

type GetEnvironmentAttributesRow struct {
	ID          int64
	Environment string
	Key         string
	Value       string
	IsProtected int64
}

func (q *Queries) GetEnvironmentAttributes(ctx context.Context, arg GetEnvironmentAttributesParams) ([]GetEnvironmentAttributesRow, error) {
	rows, err := q.db.QueryContext(ctx, getEnvironmentAttributes, arg.Environment, arg.Key)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEnvironmentAttributesRow
	for rows.Next() {
		var i GetEnvironmentAttributesRow
		if err := rows.Scan(
			&i.ID,
			&i.Environment,
			&i.Key,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGlobalAttributes = `-- name: GetGlobalAttributes :many
SELECT
	id, key, value, is_protected
FROM
	global_attributes
WHERE
	key GLOB ?
ORDER BY key ASC
`

func (q *Queries) GetGlobalAttributes(ctx context.Context, key string) ([]GlobalAttribute, error) {
	rows, err := q.db.QueryContext(ctx, getGlobalAttributes, key)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GlobalAttribute
	for rows.Next() {
		var i GlobalAttribute
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getModelAttributes = `-- name: GetModelAttributes :many
SELECT
	m.model, a.key, a.value, a.is_protected
FROM
	model_attributes a, models m
WHERE
	m.model GLOB ?
AND
	a.key GLOB ?
AND
	a.model_id=m.id
ORDER BY m.model, a.key ASC
`

type GetModelAttributesParams struct {
	Model string
	Key   string
}

type GetModelAttributesRow struct {
	Model       string
	Key         string
	Value       string
	IsProtected int64
}

func (q *Queries) GetModelAttributes(ctx context.Context, arg GetModelAttributesParams) ([]GetModelAttributesRow, error) {
	rows, err := q.db.QueryContext(ctx, getModelAttributes, arg.Model, arg.Key)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetModelAttributesRow
	for rows.Next() {
		var i GetModelAttributesRow
		if err := rows.Scan(
			&i.Model,
			&i.Key,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getZoneAttributes = `-- name: GetZoneAttributes :many
SELECT
	a.id, z.zone, a.key, a.value, a.is_protected
FROM
	zone_attributes a, zones z
WHERE
	z.zone GLOB ?
AND
	a.key GLOB ?
AND
	a.zone_id=z.id
ORDER BY z.zone, a.key ASC
`

type GetZoneAttributesParams struct {
	Zone string
	Key  string
}

type GetZoneAttributesRow struct {
	ID          int64
	Zone        string
	Key         string
	Value       string
	IsProtected int64
}

func (q *Queries) GetZoneAttributes(ctx context.Context, arg GetZoneAttributesParams) ([]GetZoneAttributesRow, error) {
	rows, err := q.db.QueryContext(ctx, getZoneAttributes, arg.Zone, arg.Key)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetZoneAttributesRow
	for rows.Next() {
		var i GetZoneAttributesRow
		if err := rows.Scan(
			&i.ID,
			&i.Zone,
			&i.Key,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClusterAttribute = `-- name: UpdateClusterAttribute :one
UPDATE
	cluster_attributes
SET
	cluster = (SELECT id FROM clusters c WHERE c.cluster = ?),
	key = ?,
	value = ?,
	is_protected = ?
WHERE
	cluster_attributes.id = ?
RETURNING id, cluster_id, "key", value, is_protected
`

type UpdateClusterAttributeParams struct {
	Cluster     string
	Key         string
	Value       string
	IsProtected int64
	ID          int64
}

func (q *Queries) UpdateClusterAttribute(ctx context.Context, arg UpdateClusterAttributeParams) (ClusterAttribute, error) {
	row := q.db.QueryRowContext(ctx, updateClusterAttribute,
		arg.Cluster,
		arg.Key,
		arg.Value,
		arg.IsProtected,
		arg.ID,
	)
	var i ClusterAttribute
	err := row.Scan(
		&i.ID,
		&i.ClusterID,
		&i.Key,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const updateDeviceAttribute = `-- name: UpdateDeviceAttribute :one
UPDATE
	device_attributes
SET
	device = (SELECT id FROM devices d WHERE d.device = ?),
	key = ?,
	value = ?,
	is_protected = ?
WHERE
	device_attributes.id = ?
RETURNING id, device_id, "key", value, is_protected
`

type UpdateDeviceAttributeParams struct {
	Device      string
	Key         string
	Value       string
	IsProtected int64
	ID          int64
}

func (q *Queries) UpdateDeviceAttribute(ctx context.Context, arg UpdateDeviceAttributeParams) (DeviceAttribute, error) {
	row := q.db.QueryRowContext(ctx, updateDeviceAttribute,
		arg.Device,
		arg.Key,
		arg.Value,
		arg.IsProtected,
		arg.ID,
	)
	var i DeviceAttribute
	err := row.Scan(
		&i.ID,
		&i.DeviceID,
		&i.Key,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const updateEnvironmentAttribute = `-- name: UpdateEnvironmentAttribute :one
UPDATE
	environment_attributes
SET
	environment = (SELECT id FROM environments e WHERE e.environment = ?),
	key = ?,
	value = ?,
	is_protected = ?
WHERE
	environment_attributes.id = ?
RETURNING id, environment_id, "key", value, is_protected
`

type UpdateEnvironmentAttributeParams struct {
	Environment string
	Key         string
	Value       string
	IsProtected int64
	ID          int64
}

func (q *Queries) UpdateEnvironmentAttribute(ctx context.Context, arg UpdateEnvironmentAttributeParams) (EnvironmentAttribute, error) {
	row := q.db.QueryRowContext(ctx, updateEnvironmentAttribute,
		arg.Environment,
		arg.Key,
		arg.Value,
		arg.IsProtected,
		arg.ID,
	)
	var i EnvironmentAttribute
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.Key,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const updateGlobalAttribute = `-- name: UpdateGlobalAttribute :one
UPDATE
	global_attributes
SET
	key = ?,
	value = ?,
	is_protected = ?
WHERE
	id = ?
RETURNING id, "key", value, is_protected
`

type UpdateGlobalAttributeParams struct {
	Key         string
	Value       string
	IsProtected int64
	ID          int64
}

func (q *Queries) UpdateGlobalAttribute(ctx context.Context, arg UpdateGlobalAttributeParams) (GlobalAttribute, error) {
	row := q.db.QueryRowContext(ctx, updateGlobalAttribute,
		arg.Key,
		arg.Value,
		arg.IsProtected,
		arg.ID,
	)
	var i GlobalAttribute
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const updateModelAttribute = `-- name: UpdateModelAttribute :one
UPDATE
	model_attributes
SET
	model = (SELECT id FROM models m WHERE m.model = ?),
	key = ?,
	value = ?,
	is_protected = ?
WHERE
	model_attributes.id = ?
RETURNING id, model_id, "key", value, is_protected
`

type UpdateModelAttributeParams struct {
	Model       string
	Key         string
	Value       string
	IsProtected int64
	ID          int64
}

func (q *Queries) UpdateModelAttribute(ctx context.Context, arg UpdateModelAttributeParams) (ModelAttribute, error) {
	row := q.db.QueryRowContext(ctx, updateModelAttribute,
		arg.Model,
		arg.Key,
		arg.Value,
		arg.IsProtected,
		arg.ID,
	)
	var i ModelAttribute
	err := row.Scan(
		&i.ID,
		&i.ModelID,
		&i.Key,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const updateZoneAttribute = `-- name: UpdateZoneAttribute :one
UPDATE
	zone_attributes
SET
	key = ?,
	value = ?,
	is_protected = ?
WHERE
	id = ?
RETURNING id, zone_id, "key", value, is_protected
`

type UpdateZoneAttributeParams struct {
	Key         string
	Value       string
	IsProtected int64
	ID          int64
}

func (q *Queries) UpdateZoneAttribute(ctx context.Context, arg UpdateZoneAttributeParams) (ZoneAttribute, error) {
	row := q.db.QueryRowContext(ctx, updateZoneAttribute,
		arg.Key,
		arg.Value,
		arg.IsProtected,
		arg.ID,
	)
	var i ZoneAttribute
	err := row.Scan(
		&i.ID,
		&i.ZoneID,
		&i.Key,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}
