// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: device.sql

package db

import (
	"context"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices
	(device, cluster_id, appliance_id, model_id, environment_id)
VALUES
	(?,
	(select id FROM clusters c where c.cluster = ?),
	(select id FROM appliances a where a.appliance = ?),
	(select id FROM models m where m.model = ?),
	(select id FROM environments e where e.environment = ?))
RETURNING id, device, cluster_id, appliance_id, model_id, environment_id
`

type CreateDeviceParams struct {
	Device      string
	Cluster     string
	Appliance   string
	Model       string
	Environment string
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRowContext(ctx, createDevice,
		arg.Device,
		arg.Cluster,
		arg.Appliance,
		arg.Model,
		arg.Environment,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Device,
		&i.ClusterID,
		&i.ApplianceID,
		&i.ModelID,
		&i.EnvironmentID,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM
	devices
WHERE
	id = ?
`

func (q *Queries) DeleteDevice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDevice, id)
	return err
}

const getDevices = `-- name: GetDevices :many
SELECT
	d.id,
	d.device,
	z.zone,
	c.cluster,
	a.appliance,
	m.model,
	e.environment
FROM
	devices d
	LEFT JOIN zones z ON d.zone_id = z.id
	LEFT JOIN clusters c ON d.cluster_id = c.id
	LEFT JOIN appliances a ON d.appliance_id = a.id
	LEFT JOIN models m ON d.model_id = m.id
	LEFT JOIN environments e ON d.environment_id = e.id
WHERE
	z.zone GLOB ?
AND
	c.cluster GLOB ?
AND
	d.device GLOB ?
AND
	c.zone_id = z.id
AND
	d.cluster_id = c.id
`

type GetDevicesParams struct {
	Zone    string
	Cluster string
	Device  string
}

type GetDevicesRow struct {
	ID          int64
	Device      string
	Zone        string
	Cluster     string
	Appliance   string
	Model       string
	Environment string
}

func (q *Queries) GetDevices(ctx context.Context, arg GetDevicesParams) ([]GetDevicesRow, error) {
	rows, err := q.db.QueryContext(ctx, getDevices, arg.Zone, arg.Cluster, arg.Device)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDevicesRow
	for rows.Next() {
		var i GetDevicesRow
		if err := rows.Scan(
			&i.ID,
			&i.Device,
			&i.Zone,
			&i.Cluster,
			&i.Appliance,
			&i.Model,
			&i.Environment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDevice = `-- name: UpdateDevice :one
UPDATE
       devices
SET
       device = ?,
       cluster_id = (select id FROM clusters c where c.cluster = ?),
       appliance_id = (select id FROM appliances a where a.appliance = ?),
       model_id = (select id FROM models m where m.model = ?),
       environment_id = (select id FROM environments e where e.environment = ?)
WHERE
       devices.id = ?
RETURNING id, device, cluster_id, appliance_id, model_id, environment_id
`

type UpdateDeviceParams struct {
	Device      string
	Cluster     string
	Appliance   string
	Model       string
	Environment string
	ID          int64
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) (Device, error) {
	row := q.db.QueryRowContext(ctx, updateDevice,
		arg.Device,
		arg.Cluster,
		arg.Appliance,
		arg.Model,
		arg.Environment,
		arg.ID,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Device,
		&i.ClusterID,
		&i.ApplianceID,
		&i.ModelID,
		&i.EnvironmentID,
	)
	return i, err
}
