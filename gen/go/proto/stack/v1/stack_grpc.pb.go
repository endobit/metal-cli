// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/stack/v1/stack.proto

package stackv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StackService_ListZones_FullMethodName    = "/stack.v1.StackService/ListZones"
	StackService_ListClusters_FullMethodName = "/stack.v1.StackService/ListClusters"
	StackService_ListHosts_FullMethodName    = "/stack.v1.StackService/ListHosts"
)

// StackServiceClient is the client API for StackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StackServiceClient interface {
	ListZones(ctx context.Context, in *ListZonesRequest, opts ...grpc.CallOption) (StackService_ListZonesClient, error)
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (StackService_ListClustersClient, error)
	ListHosts(ctx context.Context, in *ListHostsRequest, opts ...grpc.CallOption) (StackService_ListHostsClient, error)
}

type stackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStackServiceClient(cc grpc.ClientConnInterface) StackServiceClient {
	return &stackServiceClient{cc}
}

func (c *stackServiceClient) ListZones(ctx context.Context, in *ListZonesRequest, opts ...grpc.CallOption) (StackService_ListZonesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[0], StackService_ListZones_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListZonesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListZonesClient interface {
	Recv() (*ListZonesResponse, error)
	grpc.ClientStream
}

type stackServiceListZonesClient struct {
	grpc.ClientStream
}

func (x *stackServiceListZonesClient) Recv() (*ListZonesResponse, error) {
	m := new(ListZonesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (StackService_ListClustersClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[1], StackService_ListClusters_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListClustersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListClustersClient interface {
	Recv() (*ListClustersResponse, error)
	grpc.ClientStream
}

type stackServiceListClustersClient struct {
	grpc.ClientStream
}

func (x *stackServiceListClustersClient) Recv() (*ListClustersResponse, error) {
	m := new(ListClustersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) ListHosts(ctx context.Context, in *ListHostsRequest, opts ...grpc.CallOption) (StackService_ListHostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[2], StackService_ListHosts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListHostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListHostsClient interface {
	Recv() (*ListHostsResponse, error)
	grpc.ClientStream
}

type stackServiceListHostsClient struct {
	grpc.ClientStream
}

func (x *stackServiceListHostsClient) Recv() (*ListHostsResponse, error) {
	m := new(ListHostsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StackServiceServer is the server API for StackService service.
// All implementations must embed UnimplementedStackServiceServer
// for forward compatibility
type StackServiceServer interface {
	ListZones(*ListZonesRequest, StackService_ListZonesServer) error
	ListClusters(*ListClustersRequest, StackService_ListClustersServer) error
	ListHosts(*ListHostsRequest, StackService_ListHostsServer) error
	mustEmbedUnimplementedStackServiceServer()
}

// UnimplementedStackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStackServiceServer struct {
}

func (UnimplementedStackServiceServer) ListZones(*ListZonesRequest, StackService_ListZonesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListZones not implemented")
}
func (UnimplementedStackServiceServer) ListClusters(*ListClustersRequest, StackService_ListClustersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedStackServiceServer) ListHosts(*ListHostsRequest, StackService_ListHostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListHosts not implemented")
}
func (UnimplementedStackServiceServer) mustEmbedUnimplementedStackServiceServer() {}

// UnsafeStackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StackServiceServer will
// result in compilation errors.
type UnsafeStackServiceServer interface {
	mustEmbedUnimplementedStackServiceServer()
}

func RegisterStackServiceServer(s grpc.ServiceRegistrar, srv StackServiceServer) {
	s.RegisterService(&StackService_ServiceDesc, srv)
}

func _StackService_ListZones_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListZonesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListZones(m, &stackServiceListZonesServer{stream})
}

type StackService_ListZonesServer interface {
	Send(*ListZonesResponse) error
	grpc.ServerStream
}

type stackServiceListZonesServer struct {
	grpc.ServerStream
}

func (x *stackServiceListZonesServer) Send(m *ListZonesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_ListClusters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListClustersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListClusters(m, &stackServiceListClustersServer{stream})
}

type StackService_ListClustersServer interface {
	Send(*ListClustersResponse) error
	grpc.ServerStream
}

type stackServiceListClustersServer struct {
	grpc.ServerStream
}

func (x *stackServiceListClustersServer) Send(m *ListClustersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_ListHosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListHostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListHosts(m, &stackServiceListHostsServer{stream})
}

type StackService_ListHostsServer interface {
	Send(*ListHostsResponse) error
	grpc.ServerStream
}

type stackServiceListHostsServer struct {
	grpc.ServerStream
}

func (x *stackServiceListHostsServer) Send(m *ListHostsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StackService_ServiceDesc is the grpc.ServiceDesc for StackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stack.v1.StackService",
	HandlerType: (*StackServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListZones",
			Handler:       _StackService_ListZones_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListClusters",
			Handler:       _StackService_ListClusters_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListHosts",
			Handler:       _StackService_ListHosts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/stack/v1/stack.proto",
}
