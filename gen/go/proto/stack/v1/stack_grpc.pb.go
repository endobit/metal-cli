// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/stack/v1/stack.proto

package stackv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StackService_CreateModel_FullMethodName                = "/stack.v1.StackService/CreateModel"
	StackService_UpdateModel_FullMethodName                = "/stack.v1.StackService/UpdateModel"
	StackService_DeleteModel_FullMethodName                = "/stack.v1.StackService/DeleteModel"
	StackService_ListModels_FullMethodName                 = "/stack.v1.StackService/ListModels"
	StackService_CreateModelAttribute_FullMethodName       = "/stack.v1.StackService/CreateModelAttribute"
	StackService_UpdateModelAttribute_FullMethodName       = "/stack.v1.StackService/UpdateModelAttribute"
	StackService_DeleteModelAttribute_FullMethodName       = "/stack.v1.StackService/DeleteModelAttribute"
	StackService_ListModelAttributes_FullMethodName        = "/stack.v1.StackService/ListModelAttributes"
	StackService_CreateAppliance_FullMethodName            = "/stack.v1.StackService/CreateAppliance"
	StackService_UpdateAppliance_FullMethodName            = "/stack.v1.StackService/UpdateAppliance"
	StackService_DeleteAppliance_FullMethodName            = "/stack.v1.StackService/DeleteAppliance"
	StackService_ListAppliances_FullMethodName             = "/stack.v1.StackService/ListAppliances"
	StackService_CreateApplianceAttribute_FullMethodName   = "/stack.v1.StackService/CreateApplianceAttribute"
	StackService_UpdateApplianceAttribute_FullMethodName   = "/stack.v1.StackService/UpdateApplianceAttribute"
	StackService_DeleteApplianceAttribute_FullMethodName   = "/stack.v1.StackService/DeleteApplianceAttribute"
	StackService_ListApplianceAttributes_FullMethodName    = "/stack.v1.StackService/ListApplianceAttributes"
	StackService_CreateEnvironment_FullMethodName          = "/stack.v1.StackService/CreateEnvironment"
	StackService_UpdateEnvironment_FullMethodName          = "/stack.v1.StackService/UpdateEnvironment"
	StackService_DeleteEnvironment_FullMethodName          = "/stack.v1.StackService/DeleteEnvironment"
	StackService_ListEnvironments_FullMethodName           = "/stack.v1.StackService/ListEnvironments"
	StackService_CreateEnvironmentAttribute_FullMethodName = "/stack.v1.StackService/CreateEnvironmentAttribute"
	StackService_UpdateEnvironmentAttribute_FullMethodName = "/stack.v1.StackService/UpdateEnvironmentAttribute"
	StackService_DeleteEnvironmentAttribute_FullMethodName = "/stack.v1.StackService/DeleteEnvironmentAttribute"
	StackService_ListEnvironmentAttributes_FullMethodName  = "/stack.v1.StackService/ListEnvironmentAttributes"
	StackService_CreateZone_FullMethodName                 = "/stack.v1.StackService/CreateZone"
	StackService_UpdateZone_FullMethodName                 = "/stack.v1.StackService/UpdateZone"
	StackService_DeleteZone_FullMethodName                 = "/stack.v1.StackService/DeleteZone"
	StackService_ListZones_FullMethodName                  = "/stack.v1.StackService/ListZones"
	StackService_CreateZoneAttribute_FullMethodName        = "/stack.v1.StackService/CreateZoneAttribute"
	StackService_UpdateZoneAttribute_FullMethodName        = "/stack.v1.StackService/UpdateZoneAttribute"
	StackService_DeleteZoneAttribute_FullMethodName        = "/stack.v1.StackService/DeleteZoneAttribute"
	StackService_ListZoneAttributes_FullMethodName         = "/stack.v1.StackService/ListZoneAttributes"
	StackService_CreateNetwork_FullMethodName              = "/stack.v1.StackService/CreateNetwork"
	StackService_UpdateNetwork_FullMethodName              = "/stack.v1.StackService/UpdateNetwork"
	StackService_DeleteNetwork_FullMethodName              = "/stack.v1.StackService/DeleteNetwork"
	StackService_ListNetworks_FullMethodName               = "/stack.v1.StackService/ListNetworks"
	StackService_CreateCluster_FullMethodName              = "/stack.v1.StackService/CreateCluster"
	StackService_UpdateCluster_FullMethodName              = "/stack.v1.StackService/UpdateCluster"
	StackService_DeleteCluster_FullMethodName              = "/stack.v1.StackService/DeleteCluster"
	StackService_ListClusters_FullMethodName               = "/stack.v1.StackService/ListClusters"
	StackService_CreateClusterAttribute_FullMethodName     = "/stack.v1.StackService/CreateClusterAttribute"
	StackService_UpdateClusterAttribute_FullMethodName     = "/stack.v1.StackService/UpdateClusterAttribute"
	StackService_DeleteClusterAttribute_FullMethodName     = "/stack.v1.StackService/DeleteClusterAttribute"
	StackService_ListClusterAttributes_FullMethodName      = "/stack.v1.StackService/ListClusterAttributes"
	StackService_CreateHost_FullMethodName                 = "/stack.v1.StackService/CreateHost"
	StackService_UpdateHost_FullMethodName                 = "/stack.v1.StackService/UpdateHost"
	StackService_DeleteHost_FullMethodName                 = "/stack.v1.StackService/DeleteHost"
	StackService_ListHosts_FullMethodName                  = "/stack.v1.StackService/ListHosts"
	StackService_CreateHostAttribute_FullMethodName        = "/stack.v1.StackService/CreateHostAttribute"
	StackService_UpdateHostAttribute_FullMethodName        = "/stack.v1.StackService/UpdateHostAttribute"
	StackService_DeleteHostAttribute_FullMethodName        = "/stack.v1.StackService/DeleteHostAttribute"
	StackService_ListHostAttributes_FullMethodName         = "/stack.v1.StackService/ListHostAttributes"
	StackService_CreateHostInterface_FullMethodName        = "/stack.v1.StackService/CreateHostInterface"
	StackService_UpdateHostInterface_FullMethodName        = "/stack.v1.StackService/UpdateHostInterface"
	StackService_DeleteHostInterface_FullMethodName        = "/stack.v1.StackService/DeleteHostInterface"
	StackService_ListHostInterfaces_FullMethodName         = "/stack.v1.StackService/ListHostInterfaces"
	StackService_CreateSwitch_FullMethodName               = "/stack.v1.StackService/CreateSwitch"
	StackService_UpdateSwitch_FullMethodName               = "/stack.v1.StackService/UpdateSwitch"
	StackService_DeleteSwitch_FullMethodName               = "/stack.v1.StackService/DeleteSwitch"
	StackService_ListSwitches_FullMethodName               = "/stack.v1.StackService/ListSwitches"
	StackService_CreateSwitchAttribute_FullMethodName      = "/stack.v1.StackService/CreateSwitchAttribute"
	StackService_UpdateSwitchAttribute_FullMethodName      = "/stack.v1.StackService/UpdateSwitchAttribute"
	StackService_DeleteSwitchAttribute_FullMethodName      = "/stack.v1.StackService/DeleteSwitchAttribute"
	StackService_ListSwitchAttributes_FullMethodName       = "/stack.v1.StackService/ListSwitchAttributes"
	StackService_CreateSwitchInterface_FullMethodName      = "/stack.v1.StackService/CreateSwitchInterface"
	StackService_UpdateSwitchInterface_FullMethodName      = "/stack.v1.StackService/UpdateSwitchInterface"
	StackService_DeleteSwitchInterface_FullMethodName      = "/stack.v1.StackService/DeleteSwitchInterface"
	StackService_ListSwitchInterfaces_FullMethodName       = "/stack.v1.StackService/ListSwitchInterfaces"
)

// StackServiceClient is the client API for StackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StackServiceClient interface {
	CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error)
	UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*UpdateModelResponse, error)
	DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*DeleteModelResponse, error)
	ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (StackService_ListModelsClient, error)
	CreateModelAttribute(ctx context.Context, in *CreateModelAttributeRequest, opts ...grpc.CallOption) (*CreateModelAttributeResponse, error)
	UpdateModelAttribute(ctx context.Context, in *UpdateModelAttributeRequest, opts ...grpc.CallOption) (*UpdateModelAttributeResponse, error)
	DeleteModelAttribute(ctx context.Context, in *DeleteModelAttributeRequest, opts ...grpc.CallOption) (*DeleteModelAttributeResponse, error)
	ListModelAttributes(ctx context.Context, in *ListModelAttributesRequest, opts ...grpc.CallOption) (StackService_ListModelAttributesClient, error)
	CreateAppliance(ctx context.Context, in *CreateApplianceRequest, opts ...grpc.CallOption) (*CreateApplianceResponse, error)
	UpdateAppliance(ctx context.Context, in *UpdateApplianceRequest, opts ...grpc.CallOption) (*UpdateApplianceResponse, error)
	DeleteAppliance(ctx context.Context, in *DeleteApplianceRequest, opts ...grpc.CallOption) (*DeleteApplianceResponse, error)
	ListAppliances(ctx context.Context, in *ListAppliancesRequest, opts ...grpc.CallOption) (StackService_ListAppliancesClient, error)
	CreateApplianceAttribute(ctx context.Context, in *CreateApplianceAttributeRequest, opts ...grpc.CallOption) (*CreateApplianceAttributeResponse, error)
	UpdateApplianceAttribute(ctx context.Context, in *UpdateApplianceAttributeRequest, opts ...grpc.CallOption) (*UpdateApplianceAttributeResponse, error)
	DeleteApplianceAttribute(ctx context.Context, in *DeleteApplianceAttributeRequest, opts ...grpc.CallOption) (*DeleteApplianceAttributeResponse, error)
	ListApplianceAttributes(ctx context.Context, in *ListApplianceAttributesRequest, opts ...grpc.CallOption) (StackService_ListApplianceAttributesClient, error)
	CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*CreateEnvironmentResponse, error)
	UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*UpdateEnvironmentResponse, error)
	DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*DeleteEnvironmentResponse, error)
	ListEnvironments(ctx context.Context, in *ListEnvironmentsRequest, opts ...grpc.CallOption) (StackService_ListEnvironmentsClient, error)
	CreateEnvironmentAttribute(ctx context.Context, in *CreateEnvironmentAttributeRequest, opts ...grpc.CallOption) (*CreateEnvironmentAttributeResponse, error)
	UpdateEnvironmentAttribute(ctx context.Context, in *UpdateEnvironmentAttributeRequest, opts ...grpc.CallOption) (*UpdateEnvironmentAttributeResponse, error)
	DeleteEnvironmentAttribute(ctx context.Context, in *DeleteEnvironmentAttributeRequest, opts ...grpc.CallOption) (*DeleteEnvironmentAttributeResponse, error)
	ListEnvironmentAttributes(ctx context.Context, in *ListEnvironmentAttributesRequest, opts ...grpc.CallOption) (StackService_ListEnvironmentAttributesClient, error)
	CreateZone(ctx context.Context, in *CreateZoneRequest, opts ...grpc.CallOption) (*CreateZoneResponse, error)
	UpdateZone(ctx context.Context, in *UpdateZoneRequest, opts ...grpc.CallOption) (*UpdateZoneResponse, error)
	DeleteZone(ctx context.Context, in *DeleteZoneRequest, opts ...grpc.CallOption) (*DeleteZoneResponse, error)
	ListZones(ctx context.Context, in *ListZonesRequest, opts ...grpc.CallOption) (StackService_ListZonesClient, error)
	CreateZoneAttribute(ctx context.Context, in *CreateZoneAttributeRequest, opts ...grpc.CallOption) (*CreateZoneAttributeResponse, error)
	UpdateZoneAttribute(ctx context.Context, in *UpdateZoneAttributeRequest, opts ...grpc.CallOption) (*UpdateZoneAttributeResponse, error)
	DeleteZoneAttribute(ctx context.Context, in *DeleteZoneAttributeRequest, opts ...grpc.CallOption) (*DeleteZoneAttributeResponse, error)
	ListZoneAttributes(ctx context.Context, in *ListZoneAttributesRequest, opts ...grpc.CallOption) (StackService_ListZoneAttributesClient, error)
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error)
	UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*UpdateNetworkResponse, error)
	DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DeleteNetworkResponse, error)
	ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (StackService_ListNetworksClient, error)
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*CreateClusterResponse, error)
	UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*UpdateClusterResponse, error)
	DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*DeleteClusterResponse, error)
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (StackService_ListClustersClient, error)
	CreateClusterAttribute(ctx context.Context, in *CreateClusterAttributeRequest, opts ...grpc.CallOption) (*CreateClusterAttributeResponse, error)
	UpdateClusterAttribute(ctx context.Context, in *UpdateClusterAttributeRequest, opts ...grpc.CallOption) (*UpdateClusterAttributeResponse, error)
	DeleteClusterAttribute(ctx context.Context, in *DeleteClusterAttributeRequest, opts ...grpc.CallOption) (*DeleteClusterAttributeResponse, error)
	ListClusterAttributes(ctx context.Context, in *ListClusterAttributesRequest, opts ...grpc.CallOption) (StackService_ListClusterAttributesClient, error)
	CreateHost(ctx context.Context, in *CreateHostRequest, opts ...grpc.CallOption) (*CreateHostResponse, error)
	UpdateHost(ctx context.Context, in *UpdateHostRequest, opts ...grpc.CallOption) (*UpdateHostResponse, error)
	DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...grpc.CallOption) (*DeleteHostResponse, error)
	ListHosts(ctx context.Context, in *ListHostsRequest, opts ...grpc.CallOption) (StackService_ListHostsClient, error)
	CreateHostAttribute(ctx context.Context, in *CreateHostAttributeRequest, opts ...grpc.CallOption) (*CreateHostAttributeResponse, error)
	UpdateHostAttribute(ctx context.Context, in *UpdateHostAttributeRequest, opts ...grpc.CallOption) (*UpdateHostAttributeResponse, error)
	DeleteHostAttribute(ctx context.Context, in *DeleteHostAttributeRequest, opts ...grpc.CallOption) (*DeleteHostAttributeResponse, error)
	ListHostAttributes(ctx context.Context, in *ListHostAttributesRequest, opts ...grpc.CallOption) (StackService_ListHostAttributesClient, error)
	CreateHostInterface(ctx context.Context, in *CreateHostInterfaceRequest, opts ...grpc.CallOption) (*CreateHostInterfaceResponse, error)
	UpdateHostInterface(ctx context.Context, in *UpdateHostInterfaceRequest, opts ...grpc.CallOption) (*UpdateHostInterfaceResponse, error)
	DeleteHostInterface(ctx context.Context, in *DeleteHostInterfaceRequest, opts ...grpc.CallOption) (*DeleteHostInterfaceResponse, error)
	ListHostInterfaces(ctx context.Context, in *ListHostInterfacesRequest, opts ...grpc.CallOption) (StackService_ListHostInterfacesClient, error)
	CreateSwitch(ctx context.Context, in *CreateSwitchRequest, opts ...grpc.CallOption) (*CreateSwitchResponse, error)
	UpdateSwitch(ctx context.Context, in *UpdateSwitchRequest, opts ...grpc.CallOption) (*UpdateSwitchResponse, error)
	DeleteSwitch(ctx context.Context, in *DeleteSwitchRequest, opts ...grpc.CallOption) (*DeleteSwitchResponse, error)
	ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (StackService_ListSwitchesClient, error)
	CreateSwitchAttribute(ctx context.Context, in *CreateSwitchAttributeRequest, opts ...grpc.CallOption) (*CreateSwitchAttributeResponse, error)
	UpdateSwitchAttribute(ctx context.Context, in *UpdateSwitchAttributeRequest, opts ...grpc.CallOption) (*UpdateSwitchAttributeResponse, error)
	DeleteSwitchAttribute(ctx context.Context, in *DeleteSwitchAttributeRequest, opts ...grpc.CallOption) (*DeleteSwitchAttributeResponse, error)
	ListSwitchAttributes(ctx context.Context, in *ListSwitchAttributesRequest, opts ...grpc.CallOption) (StackService_ListSwitchAttributesClient, error)
	CreateSwitchInterface(ctx context.Context, in *CreateSwitchInterfaceRequest, opts ...grpc.CallOption) (*CreateSwitchInterfaceResponse, error)
	UpdateSwitchInterface(ctx context.Context, in *UpdateSwitchInterfaceRequest, opts ...grpc.CallOption) (*UpdateSwitchInterfaceResponse, error)
	DeleteSwitchInterface(ctx context.Context, in *DeleteSwitchInterfaceRequest, opts ...grpc.CallOption) (*DeleteSwitchInterfaceResponse, error)
	ListSwitchInterfaces(ctx context.Context, in *ListSwitchInterfacesRequest, opts ...grpc.CallOption) (StackService_ListSwitchInterfacesClient, error)
}

type stackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStackServiceClient(cc grpc.ClientConnInterface) StackServiceClient {
	return &stackServiceClient{cc}
}

func (c *stackServiceClient) CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*CreateModelResponse, error) {
	out := new(CreateModelResponse)
	err := c.cc.Invoke(ctx, StackService_CreateModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*UpdateModelResponse, error) {
	out := new(UpdateModelResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteModel(ctx context.Context, in *DeleteModelRequest, opts ...grpc.CallOption) (*DeleteModelResponse, error) {
	out := new(DeleteModelResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListModels(ctx context.Context, in *ListModelsRequest, opts ...grpc.CallOption) (StackService_ListModelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[0], StackService_ListModels_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListModelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListModelsClient interface {
	Recv() (*ListModelsResponse, error)
	grpc.ClientStream
}

type stackServiceListModelsClient struct {
	grpc.ClientStream
}

func (x *stackServiceListModelsClient) Recv() (*ListModelsResponse, error) {
	m := new(ListModelsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateModelAttribute(ctx context.Context, in *CreateModelAttributeRequest, opts ...grpc.CallOption) (*CreateModelAttributeResponse, error) {
	out := new(CreateModelAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_CreateModelAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateModelAttribute(ctx context.Context, in *UpdateModelAttributeRequest, opts ...grpc.CallOption) (*UpdateModelAttributeResponse, error) {
	out := new(UpdateModelAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateModelAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteModelAttribute(ctx context.Context, in *DeleteModelAttributeRequest, opts ...grpc.CallOption) (*DeleteModelAttributeResponse, error) {
	out := new(DeleteModelAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteModelAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListModelAttributes(ctx context.Context, in *ListModelAttributesRequest, opts ...grpc.CallOption) (StackService_ListModelAttributesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[1], StackService_ListModelAttributes_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListModelAttributesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListModelAttributesClient interface {
	Recv() (*ListModelAttributesResponse, error)
	grpc.ClientStream
}

type stackServiceListModelAttributesClient struct {
	grpc.ClientStream
}

func (x *stackServiceListModelAttributesClient) Recv() (*ListModelAttributesResponse, error) {
	m := new(ListModelAttributesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateAppliance(ctx context.Context, in *CreateApplianceRequest, opts ...grpc.CallOption) (*CreateApplianceResponse, error) {
	out := new(CreateApplianceResponse)
	err := c.cc.Invoke(ctx, StackService_CreateAppliance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateAppliance(ctx context.Context, in *UpdateApplianceRequest, opts ...grpc.CallOption) (*UpdateApplianceResponse, error) {
	out := new(UpdateApplianceResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateAppliance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteAppliance(ctx context.Context, in *DeleteApplianceRequest, opts ...grpc.CallOption) (*DeleteApplianceResponse, error) {
	out := new(DeleteApplianceResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteAppliance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListAppliances(ctx context.Context, in *ListAppliancesRequest, opts ...grpc.CallOption) (StackService_ListAppliancesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[2], StackService_ListAppliances_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListAppliancesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListAppliancesClient interface {
	Recv() (*ListAppliancesResponse, error)
	grpc.ClientStream
}

type stackServiceListAppliancesClient struct {
	grpc.ClientStream
}

func (x *stackServiceListAppliancesClient) Recv() (*ListAppliancesResponse, error) {
	m := new(ListAppliancesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateApplianceAttribute(ctx context.Context, in *CreateApplianceAttributeRequest, opts ...grpc.CallOption) (*CreateApplianceAttributeResponse, error) {
	out := new(CreateApplianceAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_CreateApplianceAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateApplianceAttribute(ctx context.Context, in *UpdateApplianceAttributeRequest, opts ...grpc.CallOption) (*UpdateApplianceAttributeResponse, error) {
	out := new(UpdateApplianceAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateApplianceAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteApplianceAttribute(ctx context.Context, in *DeleteApplianceAttributeRequest, opts ...grpc.CallOption) (*DeleteApplianceAttributeResponse, error) {
	out := new(DeleteApplianceAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteApplianceAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListApplianceAttributes(ctx context.Context, in *ListApplianceAttributesRequest, opts ...grpc.CallOption) (StackService_ListApplianceAttributesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[3], StackService_ListApplianceAttributes_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListApplianceAttributesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListApplianceAttributesClient interface {
	Recv() (*ListApplianceAttributesResponse, error)
	grpc.ClientStream
}

type stackServiceListApplianceAttributesClient struct {
	grpc.ClientStream
}

func (x *stackServiceListApplianceAttributesClient) Recv() (*ListApplianceAttributesResponse, error) {
	m := new(ListApplianceAttributesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*CreateEnvironmentResponse, error) {
	out := new(CreateEnvironmentResponse)
	err := c.cc.Invoke(ctx, StackService_CreateEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*UpdateEnvironmentResponse, error) {
	out := new(UpdateEnvironmentResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*DeleteEnvironmentResponse, error) {
	out := new(DeleteEnvironmentResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteEnvironment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListEnvironments(ctx context.Context, in *ListEnvironmentsRequest, opts ...grpc.CallOption) (StackService_ListEnvironmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[4], StackService_ListEnvironments_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListEnvironmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListEnvironmentsClient interface {
	Recv() (*ListEnvironmentsResponse, error)
	grpc.ClientStream
}

type stackServiceListEnvironmentsClient struct {
	grpc.ClientStream
}

func (x *stackServiceListEnvironmentsClient) Recv() (*ListEnvironmentsResponse, error) {
	m := new(ListEnvironmentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateEnvironmentAttribute(ctx context.Context, in *CreateEnvironmentAttributeRequest, opts ...grpc.CallOption) (*CreateEnvironmentAttributeResponse, error) {
	out := new(CreateEnvironmentAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_CreateEnvironmentAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateEnvironmentAttribute(ctx context.Context, in *UpdateEnvironmentAttributeRequest, opts ...grpc.CallOption) (*UpdateEnvironmentAttributeResponse, error) {
	out := new(UpdateEnvironmentAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateEnvironmentAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteEnvironmentAttribute(ctx context.Context, in *DeleteEnvironmentAttributeRequest, opts ...grpc.CallOption) (*DeleteEnvironmentAttributeResponse, error) {
	out := new(DeleteEnvironmentAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteEnvironmentAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListEnvironmentAttributes(ctx context.Context, in *ListEnvironmentAttributesRequest, opts ...grpc.CallOption) (StackService_ListEnvironmentAttributesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[5], StackService_ListEnvironmentAttributes_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListEnvironmentAttributesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListEnvironmentAttributesClient interface {
	Recv() (*ListEnvironmentAttributesResponse, error)
	grpc.ClientStream
}

type stackServiceListEnvironmentAttributesClient struct {
	grpc.ClientStream
}

func (x *stackServiceListEnvironmentAttributesClient) Recv() (*ListEnvironmentAttributesResponse, error) {
	m := new(ListEnvironmentAttributesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateZone(ctx context.Context, in *CreateZoneRequest, opts ...grpc.CallOption) (*CreateZoneResponse, error) {
	out := new(CreateZoneResponse)
	err := c.cc.Invoke(ctx, StackService_CreateZone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateZone(ctx context.Context, in *UpdateZoneRequest, opts ...grpc.CallOption) (*UpdateZoneResponse, error) {
	out := new(UpdateZoneResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateZone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteZone(ctx context.Context, in *DeleteZoneRequest, opts ...grpc.CallOption) (*DeleteZoneResponse, error) {
	out := new(DeleteZoneResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteZone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListZones(ctx context.Context, in *ListZonesRequest, opts ...grpc.CallOption) (StackService_ListZonesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[6], StackService_ListZones_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListZonesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListZonesClient interface {
	Recv() (*ListZonesResponse, error)
	grpc.ClientStream
}

type stackServiceListZonesClient struct {
	grpc.ClientStream
}

func (x *stackServiceListZonesClient) Recv() (*ListZonesResponse, error) {
	m := new(ListZonesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateZoneAttribute(ctx context.Context, in *CreateZoneAttributeRequest, opts ...grpc.CallOption) (*CreateZoneAttributeResponse, error) {
	out := new(CreateZoneAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_CreateZoneAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateZoneAttribute(ctx context.Context, in *UpdateZoneAttributeRequest, opts ...grpc.CallOption) (*UpdateZoneAttributeResponse, error) {
	out := new(UpdateZoneAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateZoneAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteZoneAttribute(ctx context.Context, in *DeleteZoneAttributeRequest, opts ...grpc.CallOption) (*DeleteZoneAttributeResponse, error) {
	out := new(DeleteZoneAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteZoneAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListZoneAttributes(ctx context.Context, in *ListZoneAttributesRequest, opts ...grpc.CallOption) (StackService_ListZoneAttributesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[7], StackService_ListZoneAttributes_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListZoneAttributesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListZoneAttributesClient interface {
	Recv() (*ListZoneAttributesResponse, error)
	grpc.ClientStream
}

type stackServiceListZoneAttributesClient struct {
	grpc.ClientStream
}

func (x *stackServiceListZoneAttributesClient) Recv() (*ListZoneAttributesResponse, error) {
	m := new(ListZoneAttributesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*CreateNetworkResponse, error) {
	out := new(CreateNetworkResponse)
	err := c.cc.Invoke(ctx, StackService_CreateNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*UpdateNetworkResponse, error) {
	out := new(UpdateNetworkResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteNetwork(ctx context.Context, in *DeleteNetworkRequest, opts ...grpc.CallOption) (*DeleteNetworkResponse, error) {
	out := new(DeleteNetworkResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListNetworks(ctx context.Context, in *ListNetworksRequest, opts ...grpc.CallOption) (StackService_ListNetworksClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[8], StackService_ListNetworks_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListNetworksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListNetworksClient interface {
	Recv() (*ListNetworksResponse, error)
	grpc.ClientStream
}

type stackServiceListNetworksClient struct {
	grpc.ClientStream
}

func (x *stackServiceListNetworksClient) Recv() (*ListNetworksResponse, error) {
	m := new(ListNetworksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*CreateClusterResponse, error) {
	out := new(CreateClusterResponse)
	err := c.cc.Invoke(ctx, StackService_CreateCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*UpdateClusterResponse, error) {
	out := new(UpdateClusterResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*DeleteClusterResponse, error) {
	out := new(DeleteClusterResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteCluster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (StackService_ListClustersClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[9], StackService_ListClusters_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListClustersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListClustersClient interface {
	Recv() (*ListClustersResponse, error)
	grpc.ClientStream
}

type stackServiceListClustersClient struct {
	grpc.ClientStream
}

func (x *stackServiceListClustersClient) Recv() (*ListClustersResponse, error) {
	m := new(ListClustersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateClusterAttribute(ctx context.Context, in *CreateClusterAttributeRequest, opts ...grpc.CallOption) (*CreateClusterAttributeResponse, error) {
	out := new(CreateClusterAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_CreateClusterAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateClusterAttribute(ctx context.Context, in *UpdateClusterAttributeRequest, opts ...grpc.CallOption) (*UpdateClusterAttributeResponse, error) {
	out := new(UpdateClusterAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateClusterAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteClusterAttribute(ctx context.Context, in *DeleteClusterAttributeRequest, opts ...grpc.CallOption) (*DeleteClusterAttributeResponse, error) {
	out := new(DeleteClusterAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteClusterAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListClusterAttributes(ctx context.Context, in *ListClusterAttributesRequest, opts ...grpc.CallOption) (StackService_ListClusterAttributesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[10], StackService_ListClusterAttributes_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListClusterAttributesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListClusterAttributesClient interface {
	Recv() (*ListClusterAttributesResponse, error)
	grpc.ClientStream
}

type stackServiceListClusterAttributesClient struct {
	grpc.ClientStream
}

func (x *stackServiceListClusterAttributesClient) Recv() (*ListClusterAttributesResponse, error) {
	m := new(ListClusterAttributesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateHost(ctx context.Context, in *CreateHostRequest, opts ...grpc.CallOption) (*CreateHostResponse, error) {
	out := new(CreateHostResponse)
	err := c.cc.Invoke(ctx, StackService_CreateHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateHost(ctx context.Context, in *UpdateHostRequest, opts ...grpc.CallOption) (*UpdateHostResponse, error) {
	out := new(UpdateHostResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...grpc.CallOption) (*DeleteHostResponse, error) {
	out := new(DeleteHostResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListHosts(ctx context.Context, in *ListHostsRequest, opts ...grpc.CallOption) (StackService_ListHostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[11], StackService_ListHosts_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListHostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListHostsClient interface {
	Recv() (*ListHostsResponse, error)
	grpc.ClientStream
}

type stackServiceListHostsClient struct {
	grpc.ClientStream
}

func (x *stackServiceListHostsClient) Recv() (*ListHostsResponse, error) {
	m := new(ListHostsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateHostAttribute(ctx context.Context, in *CreateHostAttributeRequest, opts ...grpc.CallOption) (*CreateHostAttributeResponse, error) {
	out := new(CreateHostAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_CreateHostAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateHostAttribute(ctx context.Context, in *UpdateHostAttributeRequest, opts ...grpc.CallOption) (*UpdateHostAttributeResponse, error) {
	out := new(UpdateHostAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateHostAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteHostAttribute(ctx context.Context, in *DeleteHostAttributeRequest, opts ...grpc.CallOption) (*DeleteHostAttributeResponse, error) {
	out := new(DeleteHostAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteHostAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListHostAttributes(ctx context.Context, in *ListHostAttributesRequest, opts ...grpc.CallOption) (StackService_ListHostAttributesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[12], StackService_ListHostAttributes_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListHostAttributesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListHostAttributesClient interface {
	Recv() (*ListHostAttributesResponse, error)
	grpc.ClientStream
}

type stackServiceListHostAttributesClient struct {
	grpc.ClientStream
}

func (x *stackServiceListHostAttributesClient) Recv() (*ListHostAttributesResponse, error) {
	m := new(ListHostAttributesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateHostInterface(ctx context.Context, in *CreateHostInterfaceRequest, opts ...grpc.CallOption) (*CreateHostInterfaceResponse, error) {
	out := new(CreateHostInterfaceResponse)
	err := c.cc.Invoke(ctx, StackService_CreateHostInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateHostInterface(ctx context.Context, in *UpdateHostInterfaceRequest, opts ...grpc.CallOption) (*UpdateHostInterfaceResponse, error) {
	out := new(UpdateHostInterfaceResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateHostInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteHostInterface(ctx context.Context, in *DeleteHostInterfaceRequest, opts ...grpc.CallOption) (*DeleteHostInterfaceResponse, error) {
	out := new(DeleteHostInterfaceResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteHostInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListHostInterfaces(ctx context.Context, in *ListHostInterfacesRequest, opts ...grpc.CallOption) (StackService_ListHostInterfacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[13], StackService_ListHostInterfaces_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListHostInterfacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListHostInterfacesClient interface {
	Recv() (*ListHostInterfacesResponse, error)
	grpc.ClientStream
}

type stackServiceListHostInterfacesClient struct {
	grpc.ClientStream
}

func (x *stackServiceListHostInterfacesClient) Recv() (*ListHostInterfacesResponse, error) {
	m := new(ListHostInterfacesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateSwitch(ctx context.Context, in *CreateSwitchRequest, opts ...grpc.CallOption) (*CreateSwitchResponse, error) {
	out := new(CreateSwitchResponse)
	err := c.cc.Invoke(ctx, StackService_CreateSwitch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateSwitch(ctx context.Context, in *UpdateSwitchRequest, opts ...grpc.CallOption) (*UpdateSwitchResponse, error) {
	out := new(UpdateSwitchResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateSwitch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteSwitch(ctx context.Context, in *DeleteSwitchRequest, opts ...grpc.CallOption) (*DeleteSwitchResponse, error) {
	out := new(DeleteSwitchResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteSwitch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (StackService_ListSwitchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[14], StackService_ListSwitches_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListSwitchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListSwitchesClient interface {
	Recv() (*ListSwitchesResponse, error)
	grpc.ClientStream
}

type stackServiceListSwitchesClient struct {
	grpc.ClientStream
}

func (x *stackServiceListSwitchesClient) Recv() (*ListSwitchesResponse, error) {
	m := new(ListSwitchesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateSwitchAttribute(ctx context.Context, in *CreateSwitchAttributeRequest, opts ...grpc.CallOption) (*CreateSwitchAttributeResponse, error) {
	out := new(CreateSwitchAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_CreateSwitchAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateSwitchAttribute(ctx context.Context, in *UpdateSwitchAttributeRequest, opts ...grpc.CallOption) (*UpdateSwitchAttributeResponse, error) {
	out := new(UpdateSwitchAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateSwitchAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteSwitchAttribute(ctx context.Context, in *DeleteSwitchAttributeRequest, opts ...grpc.CallOption) (*DeleteSwitchAttributeResponse, error) {
	out := new(DeleteSwitchAttributeResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteSwitchAttribute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListSwitchAttributes(ctx context.Context, in *ListSwitchAttributesRequest, opts ...grpc.CallOption) (StackService_ListSwitchAttributesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[15], StackService_ListSwitchAttributes_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListSwitchAttributesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListSwitchAttributesClient interface {
	Recv() (*ListSwitchAttributesResponse, error)
	grpc.ClientStream
}

type stackServiceListSwitchAttributesClient struct {
	grpc.ClientStream
}

func (x *stackServiceListSwitchAttributesClient) Recv() (*ListSwitchAttributesResponse, error) {
	m := new(ListSwitchAttributesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stackServiceClient) CreateSwitchInterface(ctx context.Context, in *CreateSwitchInterfaceRequest, opts ...grpc.CallOption) (*CreateSwitchInterfaceResponse, error) {
	out := new(CreateSwitchInterfaceResponse)
	err := c.cc.Invoke(ctx, StackService_CreateSwitchInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) UpdateSwitchInterface(ctx context.Context, in *UpdateSwitchInterfaceRequest, opts ...grpc.CallOption) (*UpdateSwitchInterfaceResponse, error) {
	out := new(UpdateSwitchInterfaceResponse)
	err := c.cc.Invoke(ctx, StackService_UpdateSwitchInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteSwitchInterface(ctx context.Context, in *DeleteSwitchInterfaceRequest, opts ...grpc.CallOption) (*DeleteSwitchInterfaceResponse, error) {
	out := new(DeleteSwitchInterfaceResponse)
	err := c.cc.Invoke(ctx, StackService_DeleteSwitchInterface_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ListSwitchInterfaces(ctx context.Context, in *ListSwitchInterfacesRequest, opts ...grpc.CallOption) (StackService_ListSwitchInterfacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[16], StackService_ListSwitchInterfaces_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stackServiceListSwitchInterfacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StackService_ListSwitchInterfacesClient interface {
	Recv() (*ListSwitchInterfacesResponse, error)
	grpc.ClientStream
}

type stackServiceListSwitchInterfacesClient struct {
	grpc.ClientStream
}

func (x *stackServiceListSwitchInterfacesClient) Recv() (*ListSwitchInterfacesResponse, error) {
	m := new(ListSwitchInterfacesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StackServiceServer is the server API for StackService service.
// All implementations must embed UnimplementedStackServiceServer
// for forward compatibility
type StackServiceServer interface {
	CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error)
	UpdateModel(context.Context, *UpdateModelRequest) (*UpdateModelResponse, error)
	DeleteModel(context.Context, *DeleteModelRequest) (*DeleteModelResponse, error)
	ListModels(*ListModelsRequest, StackService_ListModelsServer) error
	CreateModelAttribute(context.Context, *CreateModelAttributeRequest) (*CreateModelAttributeResponse, error)
	UpdateModelAttribute(context.Context, *UpdateModelAttributeRequest) (*UpdateModelAttributeResponse, error)
	DeleteModelAttribute(context.Context, *DeleteModelAttributeRequest) (*DeleteModelAttributeResponse, error)
	ListModelAttributes(*ListModelAttributesRequest, StackService_ListModelAttributesServer) error
	CreateAppliance(context.Context, *CreateApplianceRequest) (*CreateApplianceResponse, error)
	UpdateAppliance(context.Context, *UpdateApplianceRequest) (*UpdateApplianceResponse, error)
	DeleteAppliance(context.Context, *DeleteApplianceRequest) (*DeleteApplianceResponse, error)
	ListAppliances(*ListAppliancesRequest, StackService_ListAppliancesServer) error
	CreateApplianceAttribute(context.Context, *CreateApplianceAttributeRequest) (*CreateApplianceAttributeResponse, error)
	UpdateApplianceAttribute(context.Context, *UpdateApplianceAttributeRequest) (*UpdateApplianceAttributeResponse, error)
	DeleteApplianceAttribute(context.Context, *DeleteApplianceAttributeRequest) (*DeleteApplianceAttributeResponse, error)
	ListApplianceAttributes(*ListApplianceAttributesRequest, StackService_ListApplianceAttributesServer) error
	CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*CreateEnvironmentResponse, error)
	UpdateEnvironment(context.Context, *UpdateEnvironmentRequest) (*UpdateEnvironmentResponse, error)
	DeleteEnvironment(context.Context, *DeleteEnvironmentRequest) (*DeleteEnvironmentResponse, error)
	ListEnvironments(*ListEnvironmentsRequest, StackService_ListEnvironmentsServer) error
	CreateEnvironmentAttribute(context.Context, *CreateEnvironmentAttributeRequest) (*CreateEnvironmentAttributeResponse, error)
	UpdateEnvironmentAttribute(context.Context, *UpdateEnvironmentAttributeRequest) (*UpdateEnvironmentAttributeResponse, error)
	DeleteEnvironmentAttribute(context.Context, *DeleteEnvironmentAttributeRequest) (*DeleteEnvironmentAttributeResponse, error)
	ListEnvironmentAttributes(*ListEnvironmentAttributesRequest, StackService_ListEnvironmentAttributesServer) error
	CreateZone(context.Context, *CreateZoneRequest) (*CreateZoneResponse, error)
	UpdateZone(context.Context, *UpdateZoneRequest) (*UpdateZoneResponse, error)
	DeleteZone(context.Context, *DeleteZoneRequest) (*DeleteZoneResponse, error)
	ListZones(*ListZonesRequest, StackService_ListZonesServer) error
	CreateZoneAttribute(context.Context, *CreateZoneAttributeRequest) (*CreateZoneAttributeResponse, error)
	UpdateZoneAttribute(context.Context, *UpdateZoneAttributeRequest) (*UpdateZoneAttributeResponse, error)
	DeleteZoneAttribute(context.Context, *DeleteZoneAttributeRequest) (*DeleteZoneAttributeResponse, error)
	ListZoneAttributes(*ListZoneAttributesRequest, StackService_ListZoneAttributesServer) error
	CreateNetwork(context.Context, *CreateNetworkRequest) (*CreateNetworkResponse, error)
	UpdateNetwork(context.Context, *UpdateNetworkRequest) (*UpdateNetworkResponse, error)
	DeleteNetwork(context.Context, *DeleteNetworkRequest) (*DeleteNetworkResponse, error)
	ListNetworks(*ListNetworksRequest, StackService_ListNetworksServer) error
	CreateCluster(context.Context, *CreateClusterRequest) (*CreateClusterResponse, error)
	UpdateCluster(context.Context, *UpdateClusterRequest) (*UpdateClusterResponse, error)
	DeleteCluster(context.Context, *DeleteClusterRequest) (*DeleteClusterResponse, error)
	ListClusters(*ListClustersRequest, StackService_ListClustersServer) error
	CreateClusterAttribute(context.Context, *CreateClusterAttributeRequest) (*CreateClusterAttributeResponse, error)
	UpdateClusterAttribute(context.Context, *UpdateClusterAttributeRequest) (*UpdateClusterAttributeResponse, error)
	DeleteClusterAttribute(context.Context, *DeleteClusterAttributeRequest) (*DeleteClusterAttributeResponse, error)
	ListClusterAttributes(*ListClusterAttributesRequest, StackService_ListClusterAttributesServer) error
	CreateHost(context.Context, *CreateHostRequest) (*CreateHostResponse, error)
	UpdateHost(context.Context, *UpdateHostRequest) (*UpdateHostResponse, error)
	DeleteHost(context.Context, *DeleteHostRequest) (*DeleteHostResponse, error)
	ListHosts(*ListHostsRequest, StackService_ListHostsServer) error
	CreateHostAttribute(context.Context, *CreateHostAttributeRequest) (*CreateHostAttributeResponse, error)
	UpdateHostAttribute(context.Context, *UpdateHostAttributeRequest) (*UpdateHostAttributeResponse, error)
	DeleteHostAttribute(context.Context, *DeleteHostAttributeRequest) (*DeleteHostAttributeResponse, error)
	ListHostAttributes(*ListHostAttributesRequest, StackService_ListHostAttributesServer) error
	CreateHostInterface(context.Context, *CreateHostInterfaceRequest) (*CreateHostInterfaceResponse, error)
	UpdateHostInterface(context.Context, *UpdateHostInterfaceRequest) (*UpdateHostInterfaceResponse, error)
	DeleteHostInterface(context.Context, *DeleteHostInterfaceRequest) (*DeleteHostInterfaceResponse, error)
	ListHostInterfaces(*ListHostInterfacesRequest, StackService_ListHostInterfacesServer) error
	CreateSwitch(context.Context, *CreateSwitchRequest) (*CreateSwitchResponse, error)
	UpdateSwitch(context.Context, *UpdateSwitchRequest) (*UpdateSwitchResponse, error)
	DeleteSwitch(context.Context, *DeleteSwitchRequest) (*DeleteSwitchResponse, error)
	ListSwitches(*ListSwitchesRequest, StackService_ListSwitchesServer) error
	CreateSwitchAttribute(context.Context, *CreateSwitchAttributeRequest) (*CreateSwitchAttributeResponse, error)
	UpdateSwitchAttribute(context.Context, *UpdateSwitchAttributeRequest) (*UpdateSwitchAttributeResponse, error)
	DeleteSwitchAttribute(context.Context, *DeleteSwitchAttributeRequest) (*DeleteSwitchAttributeResponse, error)
	ListSwitchAttributes(*ListSwitchAttributesRequest, StackService_ListSwitchAttributesServer) error
	CreateSwitchInterface(context.Context, *CreateSwitchInterfaceRequest) (*CreateSwitchInterfaceResponse, error)
	UpdateSwitchInterface(context.Context, *UpdateSwitchInterfaceRequest) (*UpdateSwitchInterfaceResponse, error)
	DeleteSwitchInterface(context.Context, *DeleteSwitchInterfaceRequest) (*DeleteSwitchInterfaceResponse, error)
	ListSwitchInterfaces(*ListSwitchInterfacesRequest, StackService_ListSwitchInterfacesServer) error
	mustEmbedUnimplementedStackServiceServer()
}

// UnimplementedStackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStackServiceServer struct {
}

func (UnimplementedStackServiceServer) CreateModel(context.Context, *CreateModelRequest) (*CreateModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedStackServiceServer) UpdateModel(context.Context, *UpdateModelRequest) (*UpdateModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModel not implemented")
}
func (UnimplementedStackServiceServer) DeleteModel(context.Context, *DeleteModelRequest) (*DeleteModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModel not implemented")
}
func (UnimplementedStackServiceServer) ListModels(*ListModelsRequest, StackService_ListModelsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListModels not implemented")
}
func (UnimplementedStackServiceServer) CreateModelAttribute(context.Context, *CreateModelAttributeRequest) (*CreateModelAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModelAttribute not implemented")
}
func (UnimplementedStackServiceServer) UpdateModelAttribute(context.Context, *UpdateModelAttributeRequest) (*UpdateModelAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModelAttribute not implemented")
}
func (UnimplementedStackServiceServer) DeleteModelAttribute(context.Context, *DeleteModelAttributeRequest) (*DeleteModelAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelAttribute not implemented")
}
func (UnimplementedStackServiceServer) ListModelAttributes(*ListModelAttributesRequest, StackService_ListModelAttributesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListModelAttributes not implemented")
}
func (UnimplementedStackServiceServer) CreateAppliance(context.Context, *CreateApplianceRequest) (*CreateApplianceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppliance not implemented")
}
func (UnimplementedStackServiceServer) UpdateAppliance(context.Context, *UpdateApplianceRequest) (*UpdateApplianceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppliance not implemented")
}
func (UnimplementedStackServiceServer) DeleteAppliance(context.Context, *DeleteApplianceRequest) (*DeleteApplianceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppliance not implemented")
}
func (UnimplementedStackServiceServer) ListAppliances(*ListAppliancesRequest, StackService_ListAppliancesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAppliances not implemented")
}
func (UnimplementedStackServiceServer) CreateApplianceAttribute(context.Context, *CreateApplianceAttributeRequest) (*CreateApplianceAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplianceAttribute not implemented")
}
func (UnimplementedStackServiceServer) UpdateApplianceAttribute(context.Context, *UpdateApplianceAttributeRequest) (*UpdateApplianceAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplianceAttribute not implemented")
}
func (UnimplementedStackServiceServer) DeleteApplianceAttribute(context.Context, *DeleteApplianceAttributeRequest) (*DeleteApplianceAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplianceAttribute not implemented")
}
func (UnimplementedStackServiceServer) ListApplianceAttributes(*ListApplianceAttributesRequest, StackService_ListApplianceAttributesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListApplianceAttributes not implemented")
}
func (UnimplementedStackServiceServer) CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*CreateEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (UnimplementedStackServiceServer) UpdateEnvironment(context.Context, *UpdateEnvironmentRequest) (*UpdateEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironment not implemented")
}
func (UnimplementedStackServiceServer) DeleteEnvironment(context.Context, *DeleteEnvironmentRequest) (*DeleteEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvironment not implemented")
}
func (UnimplementedStackServiceServer) ListEnvironments(*ListEnvironmentsRequest, StackService_ListEnvironmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEnvironments not implemented")
}
func (UnimplementedStackServiceServer) CreateEnvironmentAttribute(context.Context, *CreateEnvironmentAttributeRequest) (*CreateEnvironmentAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironmentAttribute not implemented")
}
func (UnimplementedStackServiceServer) UpdateEnvironmentAttribute(context.Context, *UpdateEnvironmentAttributeRequest) (*UpdateEnvironmentAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironmentAttribute not implemented")
}
func (UnimplementedStackServiceServer) DeleteEnvironmentAttribute(context.Context, *DeleteEnvironmentAttributeRequest) (*DeleteEnvironmentAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvironmentAttribute not implemented")
}
func (UnimplementedStackServiceServer) ListEnvironmentAttributes(*ListEnvironmentAttributesRequest, StackService_ListEnvironmentAttributesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEnvironmentAttributes not implemented")
}
func (UnimplementedStackServiceServer) CreateZone(context.Context, *CreateZoneRequest) (*CreateZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZone not implemented")
}
func (UnimplementedStackServiceServer) UpdateZone(context.Context, *UpdateZoneRequest) (*UpdateZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateZone not implemented")
}
func (UnimplementedStackServiceServer) DeleteZone(context.Context, *DeleteZoneRequest) (*DeleteZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteZone not implemented")
}
func (UnimplementedStackServiceServer) ListZones(*ListZonesRequest, StackService_ListZonesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListZones not implemented")
}
func (UnimplementedStackServiceServer) CreateZoneAttribute(context.Context, *CreateZoneAttributeRequest) (*CreateZoneAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZoneAttribute not implemented")
}
func (UnimplementedStackServiceServer) UpdateZoneAttribute(context.Context, *UpdateZoneAttributeRequest) (*UpdateZoneAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateZoneAttribute not implemented")
}
func (UnimplementedStackServiceServer) DeleteZoneAttribute(context.Context, *DeleteZoneAttributeRequest) (*DeleteZoneAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteZoneAttribute not implemented")
}
func (UnimplementedStackServiceServer) ListZoneAttributes(*ListZoneAttributesRequest, StackService_ListZoneAttributesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListZoneAttributes not implemented")
}
func (UnimplementedStackServiceServer) CreateNetwork(context.Context, *CreateNetworkRequest) (*CreateNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedStackServiceServer) UpdateNetwork(context.Context, *UpdateNetworkRequest) (*UpdateNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetwork not implemented")
}
func (UnimplementedStackServiceServer) DeleteNetwork(context.Context, *DeleteNetworkRequest) (*DeleteNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (UnimplementedStackServiceServer) ListNetworks(*ListNetworksRequest, StackService_ListNetworksServer) error {
	return status.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedStackServiceServer) CreateCluster(context.Context, *CreateClusterRequest) (*CreateClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedStackServiceServer) UpdateCluster(context.Context, *UpdateClusterRequest) (*UpdateClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (UnimplementedStackServiceServer) DeleteCluster(context.Context, *DeleteClusterRequest) (*DeleteClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedStackServiceServer) ListClusters(*ListClustersRequest, StackService_ListClustersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedStackServiceServer) CreateClusterAttribute(context.Context, *CreateClusterAttributeRequest) (*CreateClusterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClusterAttribute not implemented")
}
func (UnimplementedStackServiceServer) UpdateClusterAttribute(context.Context, *UpdateClusterAttributeRequest) (*UpdateClusterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterAttribute not implemented")
}
func (UnimplementedStackServiceServer) DeleteClusterAttribute(context.Context, *DeleteClusterAttributeRequest) (*DeleteClusterAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterAttribute not implemented")
}
func (UnimplementedStackServiceServer) ListClusterAttributes(*ListClusterAttributesRequest, StackService_ListClusterAttributesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListClusterAttributes not implemented")
}
func (UnimplementedStackServiceServer) CreateHost(context.Context, *CreateHostRequest) (*CreateHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHost not implemented")
}
func (UnimplementedStackServiceServer) UpdateHost(context.Context, *UpdateHostRequest) (*UpdateHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHost not implemented")
}
func (UnimplementedStackServiceServer) DeleteHost(context.Context, *DeleteHostRequest) (*DeleteHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHost not implemented")
}
func (UnimplementedStackServiceServer) ListHosts(*ListHostsRequest, StackService_ListHostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListHosts not implemented")
}
func (UnimplementedStackServiceServer) CreateHostAttribute(context.Context, *CreateHostAttributeRequest) (*CreateHostAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostAttribute not implemented")
}
func (UnimplementedStackServiceServer) UpdateHostAttribute(context.Context, *UpdateHostAttributeRequest) (*UpdateHostAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostAttribute not implemented")
}
func (UnimplementedStackServiceServer) DeleteHostAttribute(context.Context, *DeleteHostAttributeRequest) (*DeleteHostAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostAttribute not implemented")
}
func (UnimplementedStackServiceServer) ListHostAttributes(*ListHostAttributesRequest, StackService_ListHostAttributesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListHostAttributes not implemented")
}
func (UnimplementedStackServiceServer) CreateHostInterface(context.Context, *CreateHostInterfaceRequest) (*CreateHostInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostInterface not implemented")
}
func (UnimplementedStackServiceServer) UpdateHostInterface(context.Context, *UpdateHostInterfaceRequest) (*UpdateHostInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostInterface not implemented")
}
func (UnimplementedStackServiceServer) DeleteHostInterface(context.Context, *DeleteHostInterfaceRequest) (*DeleteHostInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostInterface not implemented")
}
func (UnimplementedStackServiceServer) ListHostInterfaces(*ListHostInterfacesRequest, StackService_ListHostInterfacesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListHostInterfaces not implemented")
}
func (UnimplementedStackServiceServer) CreateSwitch(context.Context, *CreateSwitchRequest) (*CreateSwitchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSwitch not implemented")
}
func (UnimplementedStackServiceServer) UpdateSwitch(context.Context, *UpdateSwitchRequest) (*UpdateSwitchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSwitch not implemented")
}
func (UnimplementedStackServiceServer) DeleteSwitch(context.Context, *DeleteSwitchRequest) (*DeleteSwitchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSwitch not implemented")
}
func (UnimplementedStackServiceServer) ListSwitches(*ListSwitchesRequest, StackService_ListSwitchesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSwitches not implemented")
}
func (UnimplementedStackServiceServer) CreateSwitchAttribute(context.Context, *CreateSwitchAttributeRequest) (*CreateSwitchAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSwitchAttribute not implemented")
}
func (UnimplementedStackServiceServer) UpdateSwitchAttribute(context.Context, *UpdateSwitchAttributeRequest) (*UpdateSwitchAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSwitchAttribute not implemented")
}
func (UnimplementedStackServiceServer) DeleteSwitchAttribute(context.Context, *DeleteSwitchAttributeRequest) (*DeleteSwitchAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSwitchAttribute not implemented")
}
func (UnimplementedStackServiceServer) ListSwitchAttributes(*ListSwitchAttributesRequest, StackService_ListSwitchAttributesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSwitchAttributes not implemented")
}
func (UnimplementedStackServiceServer) CreateSwitchInterface(context.Context, *CreateSwitchInterfaceRequest) (*CreateSwitchInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSwitchInterface not implemented")
}
func (UnimplementedStackServiceServer) UpdateSwitchInterface(context.Context, *UpdateSwitchInterfaceRequest) (*UpdateSwitchInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSwitchInterface not implemented")
}
func (UnimplementedStackServiceServer) DeleteSwitchInterface(context.Context, *DeleteSwitchInterfaceRequest) (*DeleteSwitchInterfaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSwitchInterface not implemented")
}
func (UnimplementedStackServiceServer) ListSwitchInterfaces(*ListSwitchInterfacesRequest, StackService_ListSwitchInterfacesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSwitchInterfaces not implemented")
}
func (UnimplementedStackServiceServer) mustEmbedUnimplementedStackServiceServer() {}

// UnsafeStackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StackServiceServer will
// result in compilation errors.
type UnsafeStackServiceServer interface {
	mustEmbedUnimplementedStackServiceServer()
}

func RegisterStackServiceServer(s grpc.ServiceRegistrar, srv StackServiceServer) {
	s.RegisterService(&StackService_ServiceDesc, srv)
}

func _StackService_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateModel(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateModel(ctx, req.(*UpdateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteModel(ctx, req.(*DeleteModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListModels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListModelsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListModels(m, &stackServiceListModelsServer{stream})
}

type StackService_ListModelsServer interface {
	Send(*ListModelsResponse) error
	grpc.ServerStream
}

type stackServiceListModelsServer struct {
	grpc.ServerStream
}

func (x *stackServiceListModelsServer) Send(m *ListModelsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateModelAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateModelAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateModelAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateModelAttribute(ctx, req.(*CreateModelAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateModelAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateModelAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateModelAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateModelAttribute(ctx, req.(*UpdateModelAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteModelAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteModelAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteModelAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteModelAttribute(ctx, req.(*DeleteModelAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListModelAttributes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListModelAttributesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListModelAttributes(m, &stackServiceListModelAttributesServer{stream})
}

type StackService_ListModelAttributesServer interface {
	Send(*ListModelAttributesResponse) error
	grpc.ServerStream
}

type stackServiceListModelAttributesServer struct {
	grpc.ServerStream
}

func (x *stackServiceListModelAttributesServer) Send(m *ListModelAttributesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateAppliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplianceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateAppliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateAppliance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateAppliance(ctx, req.(*CreateApplianceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateAppliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplianceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateAppliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateAppliance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateAppliance(ctx, req.(*UpdateApplianceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteAppliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplianceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteAppliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteAppliance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteAppliance(ctx, req.(*DeleteApplianceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListAppliances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListAppliancesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListAppliances(m, &stackServiceListAppliancesServer{stream})
}

type StackService_ListAppliancesServer interface {
	Send(*ListAppliancesResponse) error
	grpc.ServerStream
}

type stackServiceListAppliancesServer struct {
	grpc.ServerStream
}

func (x *stackServiceListAppliancesServer) Send(m *ListAppliancesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateApplianceAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplianceAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateApplianceAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateApplianceAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateApplianceAttribute(ctx, req.(*CreateApplianceAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateApplianceAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplianceAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateApplianceAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateApplianceAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateApplianceAttribute(ctx, req.(*UpdateApplianceAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteApplianceAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplianceAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteApplianceAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteApplianceAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteApplianceAttribute(ctx, req.(*DeleteApplianceAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListApplianceAttributes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListApplianceAttributesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListApplianceAttributes(m, &stackServiceListApplianceAttributesServer{stream})
}

type StackService_ListApplianceAttributesServer interface {
	Send(*ListApplianceAttributesResponse) error
	grpc.ServerStream
}

type stackServiceListApplianceAttributesServer struct {
	grpc.ServerStream
}

func (x *stackServiceListApplianceAttributesServer) Send(m *ListApplianceAttributesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateEnvironment(ctx, req.(*CreateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateEnvironment(ctx, req.(*UpdateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteEnvironment(ctx, req.(*DeleteEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListEnvironments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListEnvironmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListEnvironments(m, &stackServiceListEnvironmentsServer{stream})
}

type StackService_ListEnvironmentsServer interface {
	Send(*ListEnvironmentsResponse) error
	grpc.ServerStream
}

type stackServiceListEnvironmentsServer struct {
	grpc.ServerStream
}

func (x *stackServiceListEnvironmentsServer) Send(m *ListEnvironmentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateEnvironmentAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateEnvironmentAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateEnvironmentAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateEnvironmentAttribute(ctx, req.(*CreateEnvironmentAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateEnvironmentAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvironmentAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateEnvironmentAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateEnvironmentAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateEnvironmentAttribute(ctx, req.(*UpdateEnvironmentAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteEnvironmentAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvironmentAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteEnvironmentAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteEnvironmentAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteEnvironmentAttribute(ctx, req.(*DeleteEnvironmentAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListEnvironmentAttributes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListEnvironmentAttributesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListEnvironmentAttributes(m, &stackServiceListEnvironmentAttributesServer{stream})
}

type StackService_ListEnvironmentAttributesServer interface {
	Send(*ListEnvironmentAttributesResponse) error
	grpc.ServerStream
}

type stackServiceListEnvironmentAttributesServer struct {
	grpc.ServerStream
}

func (x *stackServiceListEnvironmentAttributesServer) Send(m *ListEnvironmentAttributesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateZone(ctx, req.(*CreateZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateZone(ctx, req.(*UpdateZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteZone(ctx, req.(*DeleteZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListZones_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListZonesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListZones(m, &stackServiceListZonesServer{stream})
}

type StackService_ListZonesServer interface {
	Send(*ListZonesResponse) error
	grpc.ServerStream
}

type stackServiceListZonesServer struct {
	grpc.ServerStream
}

func (x *stackServiceListZonesServer) Send(m *ListZonesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateZoneAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZoneAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateZoneAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateZoneAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateZoneAttribute(ctx, req.(*CreateZoneAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateZoneAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateZoneAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateZoneAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateZoneAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateZoneAttribute(ctx, req.(*UpdateZoneAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteZoneAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteZoneAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteZoneAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteZoneAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteZoneAttribute(ctx, req.(*DeleteZoneAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListZoneAttributes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListZoneAttributesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListZoneAttributes(m, &stackServiceListZoneAttributesServer{stream})
}

type StackService_ListZoneAttributesServer interface {
	Send(*ListZoneAttributesResponse) error
	grpc.ServerStream
}

type stackServiceListZoneAttributesServer struct {
	grpc.ServerStream
}

func (x *stackServiceListZoneAttributesServer) Send(m *ListZoneAttributesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateNetwork(ctx, req.(*UpdateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteNetwork(ctx, req.(*DeleteNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListNetworks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListNetworksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListNetworks(m, &stackServiceListNetworksServer{stream})
}

type StackService_ListNetworksServer interface {
	Send(*ListNetworksResponse) error
	grpc.ServerStream
}

type stackServiceListNetworksServer struct {
	grpc.ServerStream
}

func (x *stackServiceListNetworksServer) Send(m *ListNetworksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateCluster(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateCluster(ctx, req.(*UpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteCluster(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListClusters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListClustersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListClusters(m, &stackServiceListClustersServer{stream})
}

type StackService_ListClustersServer interface {
	Send(*ListClustersResponse) error
	grpc.ServerStream
}

type stackServiceListClustersServer struct {
	grpc.ServerStream
}

func (x *stackServiceListClustersServer) Send(m *ListClustersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateClusterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateClusterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateClusterAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateClusterAttribute(ctx, req.(*CreateClusterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateClusterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateClusterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateClusterAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateClusterAttribute(ctx, req.(*UpdateClusterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteClusterAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteClusterAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteClusterAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteClusterAttribute(ctx, req.(*DeleteClusterAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListClusterAttributes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListClusterAttributesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListClusterAttributes(m, &stackServiceListClusterAttributesServer{stream})
}

type StackService_ListClusterAttributesServer interface {
	Send(*ListClusterAttributesResponse) error
	grpc.ServerStream
}

type stackServiceListClusterAttributesServer struct {
	grpc.ServerStream
}

func (x *stackServiceListClusterAttributesServer) Send(m *ListClusterAttributesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateHost(ctx, req.(*CreateHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateHost(ctx, req.(*UpdateHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteHost(ctx, req.(*DeleteHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListHosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListHostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListHosts(m, &stackServiceListHostsServer{stream})
}

type StackService_ListHostsServer interface {
	Send(*ListHostsResponse) error
	grpc.ServerStream
}

type stackServiceListHostsServer struct {
	grpc.ServerStream
}

func (x *stackServiceListHostsServer) Send(m *ListHostsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateHostAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateHostAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateHostAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateHostAttribute(ctx, req.(*CreateHostAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateHostAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateHostAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateHostAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateHostAttribute(ctx, req.(*UpdateHostAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteHostAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteHostAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteHostAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteHostAttribute(ctx, req.(*DeleteHostAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListHostAttributes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListHostAttributesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListHostAttributes(m, &stackServiceListHostAttributesServer{stream})
}

type StackService_ListHostAttributesServer interface {
	Send(*ListHostAttributesResponse) error
	grpc.ServerStream
}

type stackServiceListHostAttributesServer struct {
	grpc.ServerStream
}

func (x *stackServiceListHostAttributesServer) Send(m *ListHostAttributesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateHostInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateHostInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateHostInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateHostInterface(ctx, req.(*CreateHostInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateHostInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateHostInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateHostInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateHostInterface(ctx, req.(*UpdateHostInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteHostInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteHostInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteHostInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteHostInterface(ctx, req.(*DeleteHostInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListHostInterfaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListHostInterfacesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListHostInterfaces(m, &stackServiceListHostInterfacesServer{stream})
}

type StackService_ListHostInterfacesServer interface {
	Send(*ListHostInterfacesResponse) error
	grpc.ServerStream
}

type stackServiceListHostInterfacesServer struct {
	grpc.ServerStream
}

func (x *stackServiceListHostInterfacesServer) Send(m *ListHostInterfacesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateSwitch(ctx, req.(*CreateSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateSwitch(ctx, req.(*UpdateSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteSwitch(ctx, req.(*DeleteSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListSwitches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSwitchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListSwitches(m, &stackServiceListSwitchesServer{stream})
}

type StackService_ListSwitchesServer interface {
	Send(*ListSwitchesResponse) error
	grpc.ServerStream
}

type stackServiceListSwitchesServer struct {
	grpc.ServerStream
}

func (x *stackServiceListSwitchesServer) Send(m *ListSwitchesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateSwitchAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwitchAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateSwitchAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateSwitchAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateSwitchAttribute(ctx, req.(*CreateSwitchAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateSwitchAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwitchAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateSwitchAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateSwitchAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateSwitchAttribute(ctx, req.(*UpdateSwitchAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteSwitchAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSwitchAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteSwitchAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteSwitchAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteSwitchAttribute(ctx, req.(*DeleteSwitchAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListSwitchAttributes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSwitchAttributesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListSwitchAttributes(m, &stackServiceListSwitchAttributesServer{stream})
}

type StackService_ListSwitchAttributesServer interface {
	Send(*ListSwitchAttributesResponse) error
	grpc.ServerStream
}

type stackServiceListSwitchAttributesServer struct {
	grpc.ServerStream
}

func (x *stackServiceListSwitchAttributesServer) Send(m *ListSwitchAttributesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _StackService_CreateSwitchInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwitchInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateSwitchInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateSwitchInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateSwitchInterface(ctx, req.(*CreateSwitchInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_UpdateSwitchInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSwitchInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateSwitchInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateSwitchInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateSwitchInterface(ctx, req.(*UpdateSwitchInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteSwitchInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSwitchInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteSwitchInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteSwitchInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteSwitchInterface(ctx, req.(*DeleteSwitchInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ListSwitchInterfaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSwitchInterfacesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ListSwitchInterfaces(m, &stackServiceListSwitchInterfacesServer{stream})
}

type StackService_ListSwitchInterfacesServer interface {
	Send(*ListSwitchInterfacesResponse) error
	grpc.ServerStream
}

type stackServiceListSwitchInterfacesServer struct {
	grpc.ServerStream
}

func (x *stackServiceListSwitchInterfacesServer) Send(m *ListSwitchInterfacesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StackService_ServiceDesc is the grpc.ServiceDesc for StackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stack.v1.StackService",
	HandlerType: (*StackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateModel",
			Handler:    _StackService_CreateModel_Handler,
		},
		{
			MethodName: "UpdateModel",
			Handler:    _StackService_UpdateModel_Handler,
		},
		{
			MethodName: "DeleteModel",
			Handler:    _StackService_DeleteModel_Handler,
		},
		{
			MethodName: "CreateModelAttribute",
			Handler:    _StackService_CreateModelAttribute_Handler,
		},
		{
			MethodName: "UpdateModelAttribute",
			Handler:    _StackService_UpdateModelAttribute_Handler,
		},
		{
			MethodName: "DeleteModelAttribute",
			Handler:    _StackService_DeleteModelAttribute_Handler,
		},
		{
			MethodName: "CreateAppliance",
			Handler:    _StackService_CreateAppliance_Handler,
		},
		{
			MethodName: "UpdateAppliance",
			Handler:    _StackService_UpdateAppliance_Handler,
		},
		{
			MethodName: "DeleteAppliance",
			Handler:    _StackService_DeleteAppliance_Handler,
		},
		{
			MethodName: "CreateApplianceAttribute",
			Handler:    _StackService_CreateApplianceAttribute_Handler,
		},
		{
			MethodName: "UpdateApplianceAttribute",
			Handler:    _StackService_UpdateApplianceAttribute_Handler,
		},
		{
			MethodName: "DeleteApplianceAttribute",
			Handler:    _StackService_DeleteApplianceAttribute_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _StackService_CreateEnvironment_Handler,
		},
		{
			MethodName: "UpdateEnvironment",
			Handler:    _StackService_UpdateEnvironment_Handler,
		},
		{
			MethodName: "DeleteEnvironment",
			Handler:    _StackService_DeleteEnvironment_Handler,
		},
		{
			MethodName: "CreateEnvironmentAttribute",
			Handler:    _StackService_CreateEnvironmentAttribute_Handler,
		},
		{
			MethodName: "UpdateEnvironmentAttribute",
			Handler:    _StackService_UpdateEnvironmentAttribute_Handler,
		},
		{
			MethodName: "DeleteEnvironmentAttribute",
			Handler:    _StackService_DeleteEnvironmentAttribute_Handler,
		},
		{
			MethodName: "CreateZone",
			Handler:    _StackService_CreateZone_Handler,
		},
		{
			MethodName: "UpdateZone",
			Handler:    _StackService_UpdateZone_Handler,
		},
		{
			MethodName: "DeleteZone",
			Handler:    _StackService_DeleteZone_Handler,
		},
		{
			MethodName: "CreateZoneAttribute",
			Handler:    _StackService_CreateZoneAttribute_Handler,
		},
		{
			MethodName: "UpdateZoneAttribute",
			Handler:    _StackService_UpdateZoneAttribute_Handler,
		},
		{
			MethodName: "DeleteZoneAttribute",
			Handler:    _StackService_DeleteZoneAttribute_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _StackService_CreateNetwork_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _StackService_UpdateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _StackService_DeleteNetwork_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _StackService_CreateCluster_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _StackService_UpdateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _StackService_DeleteCluster_Handler,
		},
		{
			MethodName: "CreateClusterAttribute",
			Handler:    _StackService_CreateClusterAttribute_Handler,
		},
		{
			MethodName: "UpdateClusterAttribute",
			Handler:    _StackService_UpdateClusterAttribute_Handler,
		},
		{
			MethodName: "DeleteClusterAttribute",
			Handler:    _StackService_DeleteClusterAttribute_Handler,
		},
		{
			MethodName: "CreateHost",
			Handler:    _StackService_CreateHost_Handler,
		},
		{
			MethodName: "UpdateHost",
			Handler:    _StackService_UpdateHost_Handler,
		},
		{
			MethodName: "DeleteHost",
			Handler:    _StackService_DeleteHost_Handler,
		},
		{
			MethodName: "CreateHostAttribute",
			Handler:    _StackService_CreateHostAttribute_Handler,
		},
		{
			MethodName: "UpdateHostAttribute",
			Handler:    _StackService_UpdateHostAttribute_Handler,
		},
		{
			MethodName: "DeleteHostAttribute",
			Handler:    _StackService_DeleteHostAttribute_Handler,
		},
		{
			MethodName: "CreateHostInterface",
			Handler:    _StackService_CreateHostInterface_Handler,
		},
		{
			MethodName: "UpdateHostInterface",
			Handler:    _StackService_UpdateHostInterface_Handler,
		},
		{
			MethodName: "DeleteHostInterface",
			Handler:    _StackService_DeleteHostInterface_Handler,
		},
		{
			MethodName: "CreateSwitch",
			Handler:    _StackService_CreateSwitch_Handler,
		},
		{
			MethodName: "UpdateSwitch",
			Handler:    _StackService_UpdateSwitch_Handler,
		},
		{
			MethodName: "DeleteSwitch",
			Handler:    _StackService_DeleteSwitch_Handler,
		},
		{
			MethodName: "CreateSwitchAttribute",
			Handler:    _StackService_CreateSwitchAttribute_Handler,
		},
		{
			MethodName: "UpdateSwitchAttribute",
			Handler:    _StackService_UpdateSwitchAttribute_Handler,
		},
		{
			MethodName: "DeleteSwitchAttribute",
			Handler:    _StackService_DeleteSwitchAttribute_Handler,
		},
		{
			MethodName: "CreateSwitchInterface",
			Handler:    _StackService_CreateSwitchInterface_Handler,
		},
		{
			MethodName: "UpdateSwitchInterface",
			Handler:    _StackService_UpdateSwitchInterface_Handler,
		},
		{
			MethodName: "DeleteSwitchInterface",
			Handler:    _StackService_DeleteSwitchInterface_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListModels",
			Handler:       _StackService_ListModels_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListModelAttributes",
			Handler:       _StackService_ListModelAttributes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAppliances",
			Handler:       _StackService_ListAppliances_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListApplianceAttributes",
			Handler:       _StackService_ListApplianceAttributes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListEnvironments",
			Handler:       _StackService_ListEnvironments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListEnvironmentAttributes",
			Handler:       _StackService_ListEnvironmentAttributes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListZones",
			Handler:       _StackService_ListZones_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListZoneAttributes",
			Handler:       _StackService_ListZoneAttributes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListNetworks",
			Handler:       _StackService_ListNetworks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListClusters",
			Handler:       _StackService_ListClusters_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListClusterAttributes",
			Handler:       _StackService_ListClusterAttributes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListHosts",
			Handler:       _StackService_ListHosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListHostAttributes",
			Handler:       _StackService_ListHostAttributes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListHostInterfaces",
			Handler:       _StackService_ListHostInterfaces_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSwitches",
			Handler:       _StackService_ListSwitches_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSwitchAttributes",
			Handler:       _StackService_ListSwitchAttributes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListSwitchInterfaces",
			Handler:       _StackService_ListSwitchInterfaces_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/stack/v1/stack.proto",
}
