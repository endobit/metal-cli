// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/stack/v1/main.proto

package stackv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StackService_CreateGlobalAttr_FullMethodName       = "/proto.stack.v1.StackService/CreateGlobalAttr"
	StackService_ReadGlobalAttrs_FullMethodName        = "/proto.stack.v1.StackService/ReadGlobalAttrs"
	StackService_UpdateGlobalAttr_FullMethodName       = "/proto.stack.v1.StackService/UpdateGlobalAttr"
	StackService_DeleteGlobalAttrs_FullMethodName      = "/proto.stack.v1.StackService/DeleteGlobalAttrs"
	StackService_CreateMake_FullMethodName             = "/proto.stack.v1.StackService/CreateMake"
	StackService_ReadMakes_FullMethodName              = "/proto.stack.v1.StackService/ReadMakes"
	StackService_UpdateMake_FullMethodName             = "/proto.stack.v1.StackService/UpdateMake"
	StackService_DeleteMakes_FullMethodName            = "/proto.stack.v1.StackService/DeleteMakes"
	StackService_CreateModel_FullMethodName            = "/proto.stack.v1.StackService/CreateModel"
	StackService_ReadModels_FullMethodName             = "/proto.stack.v1.StackService/ReadModels"
	StackService_UpdateModel_FullMethodName            = "/proto.stack.v1.StackService/UpdateModel"
	StackService_DeleteModels_FullMethodName           = "/proto.stack.v1.StackService/DeleteModels"
	StackService_CreateModelAttr_FullMethodName        = "/proto.stack.v1.StackService/CreateModelAttr"
	StackService_ReadModelAttrs_FullMethodName         = "/proto.stack.v1.StackService/ReadModelAttrs"
	StackService_UpdateModelAttr_FullMethodName        = "/proto.stack.v1.StackService/UpdateModelAttr"
	StackService_DeleteModelAttrs_FullMethodName       = "/proto.stack.v1.StackService/DeleteModelAttrs"
	StackService_CreateZone_FullMethodName             = "/proto.stack.v1.StackService/CreateZone"
	StackService_ReadZones_FullMethodName              = "/proto.stack.v1.StackService/ReadZones"
	StackService_UpdateZone_FullMethodName             = "/proto.stack.v1.StackService/UpdateZone"
	StackService_DeleteZones_FullMethodName            = "/proto.stack.v1.StackService/DeleteZones"
	StackService_CreateZoneAttr_FullMethodName         = "/proto.stack.v1.StackService/CreateZoneAttr"
	StackService_ReadZoneAttrs_FullMethodName          = "/proto.stack.v1.StackService/ReadZoneAttrs"
	StackService_UpdateZoneAttr_FullMethodName         = "/proto.stack.v1.StackService/UpdateZoneAttr"
	StackService_DeleteZoneAttrs_FullMethodName        = "/proto.stack.v1.StackService/DeleteZoneAttrs"
	StackService_CreateAppliance_FullMethodName        = "/proto.stack.v1.StackService/CreateAppliance"
	StackService_ReadAppliances_FullMethodName         = "/proto.stack.v1.StackService/ReadAppliances"
	StackService_UpdateAppliance_FullMethodName        = "/proto.stack.v1.StackService/UpdateAppliance"
	StackService_DeleteAppliances_FullMethodName       = "/proto.stack.v1.StackService/DeleteAppliances"
	StackService_CreateApplianceAttr_FullMethodName    = "/proto.stack.v1.StackService/CreateApplianceAttr"
	StackService_ReadApplianceAttrs_FullMethodName     = "/proto.stack.v1.StackService/ReadApplianceAttrs"
	StackService_UpdateApplianceAttr_FullMethodName    = "/proto.stack.v1.StackService/UpdateApplianceAttr"
	StackService_DeleteApplianceAttrs_FullMethodName   = "/proto.stack.v1.StackService/DeleteApplianceAttrs"
	StackService_CreateEnvironment_FullMethodName      = "/proto.stack.v1.StackService/CreateEnvironment"
	StackService_ReadEnvironments_FullMethodName       = "/proto.stack.v1.StackService/ReadEnvironments"
	StackService_UpdateEnvironment_FullMethodName      = "/proto.stack.v1.StackService/UpdateEnvironment"
	StackService_DeleteEnvironments_FullMethodName     = "/proto.stack.v1.StackService/DeleteEnvironments"
	StackService_CreateEnvironmentAttr_FullMethodName  = "/proto.stack.v1.StackService/CreateEnvironmentAttr"
	StackService_ReadEnvironmentAttrs_FullMethodName   = "/proto.stack.v1.StackService/ReadEnvironmentAttrs"
	StackService_UpdateEnvironmentAttr_FullMethodName  = "/proto.stack.v1.StackService/UpdateEnvironmentAttr"
	StackService_DeleteEnvironmentAttrs_FullMethodName = "/proto.stack.v1.StackService/DeleteEnvironmentAttrs"
	StackService_CreateNetwork_FullMethodName          = "/proto.stack.v1.StackService/CreateNetwork"
	StackService_ReadNetworks_FullMethodName           = "/proto.stack.v1.StackService/ReadNetworks"
	StackService_UpdateNetwork_FullMethodName          = "/proto.stack.v1.StackService/UpdateNetwork"
	StackService_DeleteNetworks_FullMethodName         = "/proto.stack.v1.StackService/DeleteNetworks"
	StackService_CreateRack_FullMethodName             = "/proto.stack.v1.StackService/CreateRack"
	StackService_ReadRacks_FullMethodName              = "/proto.stack.v1.StackService/ReadRacks"
	StackService_UpdateRack_FullMethodName             = "/proto.stack.v1.StackService/UpdateRack"
	StackService_DeleteRacks_FullMethodName            = "/proto.stack.v1.StackService/DeleteRacks"
	StackService_CreateRackAttr_FullMethodName         = "/proto.stack.v1.StackService/CreateRackAttr"
	StackService_ReadRackAttrs_FullMethodName          = "/proto.stack.v1.StackService/ReadRackAttrs"
	StackService_UpdateRackAttr_FullMethodName         = "/proto.stack.v1.StackService/UpdateRackAttr"
	StackService_DeleteRackAttrs_FullMethodName        = "/proto.stack.v1.StackService/DeleteRackAttrs"
	StackService_CreateCluster_FullMethodName          = "/proto.stack.v1.StackService/CreateCluster"
	StackService_ReadClusters_FullMethodName           = "/proto.stack.v1.StackService/ReadClusters"
	StackService_UpdateCluster_FullMethodName          = "/proto.stack.v1.StackService/UpdateCluster"
	StackService_DeleteClusters_FullMethodName         = "/proto.stack.v1.StackService/DeleteClusters"
	StackService_CreateClusterAttr_FullMethodName      = "/proto.stack.v1.StackService/CreateClusterAttr"
	StackService_ReadClusterAttrs_FullMethodName       = "/proto.stack.v1.StackService/ReadClusterAttrs"
	StackService_UpdateClusterAttr_FullMethodName      = "/proto.stack.v1.StackService/UpdateClusterAttr"
	StackService_DeleteClusterAttrs_FullMethodName     = "/proto.stack.v1.StackService/DeleteClusterAttrs"
	StackService_CreateHost_FullMethodName             = "/proto.stack.v1.StackService/CreateHost"
	StackService_ReadHosts_FullMethodName              = "/proto.stack.v1.StackService/ReadHosts"
	StackService_UpdateHost_FullMethodName             = "/proto.stack.v1.StackService/UpdateHost"
	StackService_DeleteHosts_FullMethodName            = "/proto.stack.v1.StackService/DeleteHosts"
	StackService_CreateHostAttr_FullMethodName         = "/proto.stack.v1.StackService/CreateHostAttr"
	StackService_ReadHostAttrs_FullMethodName          = "/proto.stack.v1.StackService/ReadHostAttrs"
	StackService_UpdateHostAttr_FullMethodName         = "/proto.stack.v1.StackService/UpdateHostAttr"
	StackService_DeleteHostAttrs_FullMethodName        = "/proto.stack.v1.StackService/DeleteHostAttrs"
	StackService_CreateHostInterface_FullMethodName    = "/proto.stack.v1.StackService/CreateHostInterface"
	StackService_ReadHostInterfaces_FullMethodName     = "/proto.stack.v1.StackService/ReadHostInterfaces"
	StackService_UpdateHostInterface_FullMethodName    = "/proto.stack.v1.StackService/UpdateHostInterface"
	StackService_DeleteHostInterfaces_FullMethodName   = "/proto.stack.v1.StackService/DeleteHostInterfaces"
)

// StackServiceClient is the client API for StackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StackServiceClient interface {
	CreateGlobalAttr(ctx context.Context, in *CreateGlobalAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadGlobalAttrs(ctx context.Context, in *ReadGlobalAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadGlobalAttrsResponse], error)
	UpdateGlobalAttr(ctx context.Context, in *UpdateGlobalAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteGlobalAttrs(ctx context.Context, in *DeleteGlobalAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateMake(ctx context.Context, in *CreateMakeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadMakes(ctx context.Context, in *ReadMakesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadMakesResponse], error)
	UpdateMake(ctx context.Context, in *UpdateMakeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteMakes(ctx context.Context, in *DeleteMakesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadModels(ctx context.Context, in *ReadModelsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadModelsResponse], error)
	UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteModels(ctx context.Context, in *DeleteModelsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateModelAttr(ctx context.Context, in *CreateModelAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadModelAttrs(ctx context.Context, in *ReadModelAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadModelAttrsResponse], error)
	UpdateModelAttr(ctx context.Context, in *UpdateModelAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteModelAttrs(ctx context.Context, in *DeleteModelAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateZone(ctx context.Context, in *CreateZoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadZones(ctx context.Context, in *ReadZonesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadZonesResponse], error)
	UpdateZone(ctx context.Context, in *UpdateZoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteZones(ctx context.Context, in *DeleteZonesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateZoneAttr(ctx context.Context, in *CreateZoneAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadZoneAttrs(ctx context.Context, in *ReadZoneAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadZoneAttrsResponse], error)
	UpdateZoneAttr(ctx context.Context, in *UpdateZoneAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteZoneAttrs(ctx context.Context, in *DeleteZoneAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAppliance(ctx context.Context, in *CreateApplianceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadAppliances(ctx context.Context, in *ReadAppliancesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadAppliancesResponse], error)
	UpdateAppliance(ctx context.Context, in *UpdateApplianceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAppliances(ctx context.Context, in *DeleteAppliancesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateApplianceAttr(ctx context.Context, in *CreateApplianceAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadApplianceAttrs(ctx context.Context, in *ReadApplianceAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadApplianceAttrsResponse], error)
	UpdateApplianceAttr(ctx context.Context, in *UpdateApplianceAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteApplianceAttrs(ctx context.Context, in *DeleteApplianceAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadEnvironments(ctx context.Context, in *ReadEnvironmentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadEnvironmentsResponse], error)
	UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteEnvironments(ctx context.Context, in *DeleteEnvironmentsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateEnvironmentAttr(ctx context.Context, in *CreateEnvironmentAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadEnvironmentAttrs(ctx context.Context, in *ReadEnvironmentAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadEnvironmentAttrsResponse], error)
	UpdateEnvironmentAttr(ctx context.Context, in *UpdateEnvironmentAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteEnvironmentAttrs(ctx context.Context, in *DeleteEnvironmentAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadNetworks(ctx context.Context, in *ReadNetworksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadNetworksResponse], error)
	UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNetworks(ctx context.Context, in *DeleteNetworksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateRack(ctx context.Context, in *CreateRackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadRacks(ctx context.Context, in *ReadRacksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadRacksResponse], error)
	UpdateRack(ctx context.Context, in *UpdateRackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRacks(ctx context.Context, in *DeleteRacksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateRackAttr(ctx context.Context, in *CreateRackAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadRackAttrs(ctx context.Context, in *ReadRackAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadRackAttrsResponse], error)
	UpdateRackAttr(ctx context.Context, in *UpdateRackAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteRackAttrs(ctx context.Context, in *DeleteRackAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadClusters(ctx context.Context, in *ReadClustersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadClustersResponse], error)
	UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteClusters(ctx context.Context, in *DeleteClustersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateClusterAttr(ctx context.Context, in *CreateClusterAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadClusterAttrs(ctx context.Context, in *ReadClusterAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadClusterAttrsResponse], error)
	UpdateClusterAttr(ctx context.Context, in *UpdateClusterAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteClusterAttrs(ctx context.Context, in *DeleteClusterAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateHost(ctx context.Context, in *CreateHostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadHosts(ctx context.Context, in *ReadHostsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadHostsResponse], error)
	UpdateHost(ctx context.Context, in *UpdateHostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteHosts(ctx context.Context, in *DeleteHostsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateHostAttr(ctx context.Context, in *CreateHostAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadHostAttrs(ctx context.Context, in *ReadHostAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadHostAttrsResponse], error)
	UpdateHostAttr(ctx context.Context, in *UpdateHostAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteHostAttrs(ctx context.Context, in *DeleteHostAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateHostInterface(ctx context.Context, in *CreateHostInterfaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadHostInterfaces(ctx context.Context, in *ReadHostInterfacesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadHostInterfacesResponse], error)
	UpdateHostInterface(ctx context.Context, in *UpdateHostInterfaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteHostInterfaces(ctx context.Context, in *DeleteHostInterfacesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type stackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStackServiceClient(cc grpc.ClientConnInterface) StackServiceClient {
	return &stackServiceClient{cc}
}

func (c *stackServiceClient) CreateGlobalAttr(ctx context.Context, in *CreateGlobalAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateGlobalAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadGlobalAttrs(ctx context.Context, in *ReadGlobalAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadGlobalAttrsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[0], StackService_ReadGlobalAttrs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadGlobalAttrsRequest, ReadGlobalAttrsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadGlobalAttrsClient = grpc.ServerStreamingClient[ReadGlobalAttrsResponse]

func (c *stackServiceClient) UpdateGlobalAttr(ctx context.Context, in *UpdateGlobalAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateGlobalAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteGlobalAttrs(ctx context.Context, in *DeleteGlobalAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteGlobalAttrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateMake(ctx context.Context, in *CreateMakeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateMake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadMakes(ctx context.Context, in *ReadMakesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadMakesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[1], StackService_ReadMakes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadMakesRequest, ReadMakesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadMakesClient = grpc.ServerStreamingClient[ReadMakesResponse]

func (c *stackServiceClient) UpdateMake(ctx context.Context, in *UpdateMakeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateMake_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteMakes(ctx context.Context, in *DeleteMakesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteMakes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateModel(ctx context.Context, in *CreateModelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadModels(ctx context.Context, in *ReadModelsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadModelsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[2], StackService_ReadModels_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadModelsRequest, ReadModelsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadModelsClient = grpc.ServerStreamingClient[ReadModelsResponse]

func (c *stackServiceClient) UpdateModel(ctx context.Context, in *UpdateModelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteModels(ctx context.Context, in *DeleteModelsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateModelAttr(ctx context.Context, in *CreateModelAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateModelAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadModelAttrs(ctx context.Context, in *ReadModelAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadModelAttrsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[3], StackService_ReadModelAttrs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadModelAttrsRequest, ReadModelAttrsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadModelAttrsClient = grpc.ServerStreamingClient[ReadModelAttrsResponse]

func (c *stackServiceClient) UpdateModelAttr(ctx context.Context, in *UpdateModelAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateModelAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteModelAttrs(ctx context.Context, in *DeleteModelAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteModelAttrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateZone(ctx context.Context, in *CreateZoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadZones(ctx context.Context, in *ReadZonesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadZonesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[4], StackService_ReadZones_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadZonesRequest, ReadZonesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadZonesClient = grpc.ServerStreamingClient[ReadZonesResponse]

func (c *stackServiceClient) UpdateZone(ctx context.Context, in *UpdateZoneRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateZone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteZones(ctx context.Context, in *DeleteZonesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteZones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateZoneAttr(ctx context.Context, in *CreateZoneAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateZoneAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadZoneAttrs(ctx context.Context, in *ReadZoneAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadZoneAttrsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[5], StackService_ReadZoneAttrs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadZoneAttrsRequest, ReadZoneAttrsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadZoneAttrsClient = grpc.ServerStreamingClient[ReadZoneAttrsResponse]

func (c *stackServiceClient) UpdateZoneAttr(ctx context.Context, in *UpdateZoneAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateZoneAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteZoneAttrs(ctx context.Context, in *DeleteZoneAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteZoneAttrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateAppliance(ctx context.Context, in *CreateApplianceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateAppliance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadAppliances(ctx context.Context, in *ReadAppliancesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadAppliancesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[6], StackService_ReadAppliances_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadAppliancesRequest, ReadAppliancesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadAppliancesClient = grpc.ServerStreamingClient[ReadAppliancesResponse]

func (c *stackServiceClient) UpdateAppliance(ctx context.Context, in *UpdateApplianceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateAppliance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteAppliances(ctx context.Context, in *DeleteAppliancesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteAppliances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateApplianceAttr(ctx context.Context, in *CreateApplianceAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateApplianceAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadApplianceAttrs(ctx context.Context, in *ReadApplianceAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadApplianceAttrsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[7], StackService_ReadApplianceAttrs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadApplianceAttrsRequest, ReadApplianceAttrsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadApplianceAttrsClient = grpc.ServerStreamingClient[ReadApplianceAttrsResponse]

func (c *stackServiceClient) UpdateApplianceAttr(ctx context.Context, in *UpdateApplianceAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateApplianceAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteApplianceAttrs(ctx context.Context, in *DeleteApplianceAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteApplianceAttrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadEnvironments(ctx context.Context, in *ReadEnvironmentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadEnvironmentsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[8], StackService_ReadEnvironments_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadEnvironmentsRequest, ReadEnvironmentsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadEnvironmentsClient = grpc.ServerStreamingClient[ReadEnvironmentsResponse]

func (c *stackServiceClient) UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateEnvironment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteEnvironments(ctx context.Context, in *DeleteEnvironmentsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteEnvironments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateEnvironmentAttr(ctx context.Context, in *CreateEnvironmentAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateEnvironmentAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadEnvironmentAttrs(ctx context.Context, in *ReadEnvironmentAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadEnvironmentAttrsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[9], StackService_ReadEnvironmentAttrs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadEnvironmentAttrsRequest, ReadEnvironmentAttrsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadEnvironmentAttrsClient = grpc.ServerStreamingClient[ReadEnvironmentAttrsResponse]

func (c *stackServiceClient) UpdateEnvironmentAttr(ctx context.Context, in *UpdateEnvironmentAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateEnvironmentAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteEnvironmentAttrs(ctx context.Context, in *DeleteEnvironmentAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteEnvironmentAttrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateNetwork(ctx context.Context, in *CreateNetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadNetworks(ctx context.Context, in *ReadNetworksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadNetworksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[10], StackService_ReadNetworks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadNetworksRequest, ReadNetworksResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadNetworksClient = grpc.ServerStreamingClient[ReadNetworksResponse]

func (c *stackServiceClient) UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteNetworks(ctx context.Context, in *DeleteNetworksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteNetworks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateRack(ctx context.Context, in *CreateRackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateRack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadRacks(ctx context.Context, in *ReadRacksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadRacksResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[11], StackService_ReadRacks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadRacksRequest, ReadRacksResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadRacksClient = grpc.ServerStreamingClient[ReadRacksResponse]

func (c *stackServiceClient) UpdateRack(ctx context.Context, in *UpdateRackRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateRack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteRacks(ctx context.Context, in *DeleteRacksRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteRacks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateRackAttr(ctx context.Context, in *CreateRackAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateRackAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadRackAttrs(ctx context.Context, in *ReadRackAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadRackAttrsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[12], StackService_ReadRackAttrs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadRackAttrsRequest, ReadRackAttrsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadRackAttrsClient = grpc.ServerStreamingClient[ReadRackAttrsResponse]

func (c *stackServiceClient) UpdateRackAttr(ctx context.Context, in *UpdateRackAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateRackAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteRackAttrs(ctx context.Context, in *DeleteRackAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteRackAttrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadClusters(ctx context.Context, in *ReadClustersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadClustersResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[13], StackService_ReadClusters_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadClustersRequest, ReadClustersResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadClustersClient = grpc.ServerStreamingClient[ReadClustersResponse]

func (c *stackServiceClient) UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteClusters(ctx context.Context, in *DeleteClustersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateClusterAttr(ctx context.Context, in *CreateClusterAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateClusterAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadClusterAttrs(ctx context.Context, in *ReadClusterAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadClusterAttrsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[14], StackService_ReadClusterAttrs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadClusterAttrsRequest, ReadClusterAttrsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadClusterAttrsClient = grpc.ServerStreamingClient[ReadClusterAttrsResponse]

func (c *stackServiceClient) UpdateClusterAttr(ctx context.Context, in *UpdateClusterAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateClusterAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteClusterAttrs(ctx context.Context, in *DeleteClusterAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteClusterAttrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateHost(ctx context.Context, in *CreateHostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadHosts(ctx context.Context, in *ReadHostsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadHostsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[15], StackService_ReadHosts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadHostsRequest, ReadHostsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadHostsClient = grpc.ServerStreamingClient[ReadHostsResponse]

func (c *stackServiceClient) UpdateHost(ctx context.Context, in *UpdateHostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteHosts(ctx context.Context, in *DeleteHostsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteHosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateHostAttr(ctx context.Context, in *CreateHostAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateHostAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadHostAttrs(ctx context.Context, in *ReadHostAttrsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadHostAttrsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[16], StackService_ReadHostAttrs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadHostAttrsRequest, ReadHostAttrsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadHostAttrsClient = grpc.ServerStreamingClient[ReadHostAttrsResponse]

func (c *stackServiceClient) UpdateHostAttr(ctx context.Context, in *UpdateHostAttrRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateHostAttr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteHostAttrs(ctx context.Context, in *DeleteHostAttrsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteHostAttrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) CreateHostInterface(ctx context.Context, in *CreateHostInterfaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_CreateHostInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) ReadHostInterfaces(ctx context.Context, in *ReadHostInterfacesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ReadHostInterfacesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StackService_ServiceDesc.Streams[17], StackService_ReadHostInterfaces_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadHostInterfacesRequest, ReadHostInterfacesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadHostInterfacesClient = grpc.ServerStreamingClient[ReadHostInterfacesResponse]

func (c *stackServiceClient) UpdateHostInterface(ctx context.Context, in *UpdateHostInterfaceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_UpdateHostInterface_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) DeleteHostInterfaces(ctx context.Context, in *DeleteHostInterfacesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StackService_DeleteHostInterfaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StackServiceServer is the server API for StackService service.
// All implementations must embed UnimplementedStackServiceServer
// for forward compatibility.
type StackServiceServer interface {
	CreateGlobalAttr(context.Context, *CreateGlobalAttrRequest) (*emptypb.Empty, error)
	ReadGlobalAttrs(*ReadGlobalAttrsRequest, grpc.ServerStreamingServer[ReadGlobalAttrsResponse]) error
	UpdateGlobalAttr(context.Context, *UpdateGlobalAttrRequest) (*emptypb.Empty, error)
	DeleteGlobalAttrs(context.Context, *DeleteGlobalAttrsRequest) (*emptypb.Empty, error)
	CreateMake(context.Context, *CreateMakeRequest) (*emptypb.Empty, error)
	ReadMakes(*ReadMakesRequest, grpc.ServerStreamingServer[ReadMakesResponse]) error
	UpdateMake(context.Context, *UpdateMakeRequest) (*emptypb.Empty, error)
	DeleteMakes(context.Context, *DeleteMakesRequest) (*emptypb.Empty, error)
	CreateModel(context.Context, *CreateModelRequest) (*emptypb.Empty, error)
	ReadModels(*ReadModelsRequest, grpc.ServerStreamingServer[ReadModelsResponse]) error
	UpdateModel(context.Context, *UpdateModelRequest) (*emptypb.Empty, error)
	DeleteModels(context.Context, *DeleteModelsRequest) (*emptypb.Empty, error)
	CreateModelAttr(context.Context, *CreateModelAttrRequest) (*emptypb.Empty, error)
	ReadModelAttrs(*ReadModelAttrsRequest, grpc.ServerStreamingServer[ReadModelAttrsResponse]) error
	UpdateModelAttr(context.Context, *UpdateModelAttrRequest) (*emptypb.Empty, error)
	DeleteModelAttrs(context.Context, *DeleteModelAttrsRequest) (*emptypb.Empty, error)
	CreateZone(context.Context, *CreateZoneRequest) (*emptypb.Empty, error)
	ReadZones(*ReadZonesRequest, grpc.ServerStreamingServer[ReadZonesResponse]) error
	UpdateZone(context.Context, *UpdateZoneRequest) (*emptypb.Empty, error)
	DeleteZones(context.Context, *DeleteZonesRequest) (*emptypb.Empty, error)
	CreateZoneAttr(context.Context, *CreateZoneAttrRequest) (*emptypb.Empty, error)
	ReadZoneAttrs(*ReadZoneAttrsRequest, grpc.ServerStreamingServer[ReadZoneAttrsResponse]) error
	UpdateZoneAttr(context.Context, *UpdateZoneAttrRequest) (*emptypb.Empty, error)
	DeleteZoneAttrs(context.Context, *DeleteZoneAttrsRequest) (*emptypb.Empty, error)
	CreateAppliance(context.Context, *CreateApplianceRequest) (*emptypb.Empty, error)
	ReadAppliances(*ReadAppliancesRequest, grpc.ServerStreamingServer[ReadAppliancesResponse]) error
	UpdateAppliance(context.Context, *UpdateApplianceRequest) (*emptypb.Empty, error)
	DeleteAppliances(context.Context, *DeleteAppliancesRequest) (*emptypb.Empty, error)
	CreateApplianceAttr(context.Context, *CreateApplianceAttrRequest) (*emptypb.Empty, error)
	ReadApplianceAttrs(*ReadApplianceAttrsRequest, grpc.ServerStreamingServer[ReadApplianceAttrsResponse]) error
	UpdateApplianceAttr(context.Context, *UpdateApplianceAttrRequest) (*emptypb.Empty, error)
	DeleteApplianceAttrs(context.Context, *DeleteApplianceAttrsRequest) (*emptypb.Empty, error)
	CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*emptypb.Empty, error)
	ReadEnvironments(*ReadEnvironmentsRequest, grpc.ServerStreamingServer[ReadEnvironmentsResponse]) error
	UpdateEnvironment(context.Context, *UpdateEnvironmentRequest) (*emptypb.Empty, error)
	DeleteEnvironments(context.Context, *DeleteEnvironmentsRequest) (*emptypb.Empty, error)
	CreateEnvironmentAttr(context.Context, *CreateEnvironmentAttrRequest) (*emptypb.Empty, error)
	ReadEnvironmentAttrs(*ReadEnvironmentAttrsRequest, grpc.ServerStreamingServer[ReadEnvironmentAttrsResponse]) error
	UpdateEnvironmentAttr(context.Context, *UpdateEnvironmentAttrRequest) (*emptypb.Empty, error)
	DeleteEnvironmentAttrs(context.Context, *DeleteEnvironmentAttrsRequest) (*emptypb.Empty, error)
	CreateNetwork(context.Context, *CreateNetworkRequest) (*emptypb.Empty, error)
	ReadNetworks(*ReadNetworksRequest, grpc.ServerStreamingServer[ReadNetworksResponse]) error
	UpdateNetwork(context.Context, *UpdateNetworkRequest) (*emptypb.Empty, error)
	DeleteNetworks(context.Context, *DeleteNetworksRequest) (*emptypb.Empty, error)
	CreateRack(context.Context, *CreateRackRequest) (*emptypb.Empty, error)
	ReadRacks(*ReadRacksRequest, grpc.ServerStreamingServer[ReadRacksResponse]) error
	UpdateRack(context.Context, *UpdateRackRequest) (*emptypb.Empty, error)
	DeleteRacks(context.Context, *DeleteRacksRequest) (*emptypb.Empty, error)
	CreateRackAttr(context.Context, *CreateRackAttrRequest) (*emptypb.Empty, error)
	ReadRackAttrs(*ReadRackAttrsRequest, grpc.ServerStreamingServer[ReadRackAttrsResponse]) error
	UpdateRackAttr(context.Context, *UpdateRackAttrRequest) (*emptypb.Empty, error)
	DeleteRackAttrs(context.Context, *DeleteRackAttrsRequest) (*emptypb.Empty, error)
	CreateCluster(context.Context, *CreateClusterRequest) (*emptypb.Empty, error)
	ReadClusters(*ReadClustersRequest, grpc.ServerStreamingServer[ReadClustersResponse]) error
	UpdateCluster(context.Context, *UpdateClusterRequest) (*emptypb.Empty, error)
	DeleteClusters(context.Context, *DeleteClustersRequest) (*emptypb.Empty, error)
	CreateClusterAttr(context.Context, *CreateClusterAttrRequest) (*emptypb.Empty, error)
	ReadClusterAttrs(*ReadClusterAttrsRequest, grpc.ServerStreamingServer[ReadClusterAttrsResponse]) error
	UpdateClusterAttr(context.Context, *UpdateClusterAttrRequest) (*emptypb.Empty, error)
	DeleteClusterAttrs(context.Context, *DeleteClusterAttrsRequest) (*emptypb.Empty, error)
	CreateHost(context.Context, *CreateHostRequest) (*emptypb.Empty, error)
	ReadHosts(*ReadHostsRequest, grpc.ServerStreamingServer[ReadHostsResponse]) error
	UpdateHost(context.Context, *UpdateHostRequest) (*emptypb.Empty, error)
	DeleteHosts(context.Context, *DeleteHostsRequest) (*emptypb.Empty, error)
	CreateHostAttr(context.Context, *CreateHostAttrRequest) (*emptypb.Empty, error)
	ReadHostAttrs(*ReadHostAttrsRequest, grpc.ServerStreamingServer[ReadHostAttrsResponse]) error
	UpdateHostAttr(context.Context, *UpdateHostAttrRequest) (*emptypb.Empty, error)
	DeleteHostAttrs(context.Context, *DeleteHostAttrsRequest) (*emptypb.Empty, error)
	CreateHostInterface(context.Context, *CreateHostInterfaceRequest) (*emptypb.Empty, error)
	ReadHostInterfaces(*ReadHostInterfacesRequest, grpc.ServerStreamingServer[ReadHostInterfacesResponse]) error
	UpdateHostInterface(context.Context, *UpdateHostInterfaceRequest) (*emptypb.Empty, error)
	DeleteHostInterfaces(context.Context, *DeleteHostInterfacesRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedStackServiceServer()
}

// UnimplementedStackServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStackServiceServer struct{}

func (UnimplementedStackServiceServer) CreateGlobalAttr(context.Context, *CreateGlobalAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGlobalAttr not implemented")
}
func (UnimplementedStackServiceServer) ReadGlobalAttrs(*ReadGlobalAttrsRequest, grpc.ServerStreamingServer[ReadGlobalAttrsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadGlobalAttrs not implemented")
}
func (UnimplementedStackServiceServer) UpdateGlobalAttr(context.Context, *UpdateGlobalAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGlobalAttr not implemented")
}
func (UnimplementedStackServiceServer) DeleteGlobalAttrs(context.Context, *DeleteGlobalAttrsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGlobalAttrs not implemented")
}
func (UnimplementedStackServiceServer) CreateMake(context.Context, *CreateMakeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMake not implemented")
}
func (UnimplementedStackServiceServer) ReadMakes(*ReadMakesRequest, grpc.ServerStreamingServer[ReadMakesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadMakes not implemented")
}
func (UnimplementedStackServiceServer) UpdateMake(context.Context, *UpdateMakeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMake not implemented")
}
func (UnimplementedStackServiceServer) DeleteMakes(context.Context, *DeleteMakesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMakes not implemented")
}
func (UnimplementedStackServiceServer) CreateModel(context.Context, *CreateModelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModel not implemented")
}
func (UnimplementedStackServiceServer) ReadModels(*ReadModelsRequest, grpc.ServerStreamingServer[ReadModelsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadModels not implemented")
}
func (UnimplementedStackServiceServer) UpdateModel(context.Context, *UpdateModelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModel not implemented")
}
func (UnimplementedStackServiceServer) DeleteModels(context.Context, *DeleteModelsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModels not implemented")
}
func (UnimplementedStackServiceServer) CreateModelAttr(context.Context, *CreateModelAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModelAttr not implemented")
}
func (UnimplementedStackServiceServer) ReadModelAttrs(*ReadModelAttrsRequest, grpc.ServerStreamingServer[ReadModelAttrsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadModelAttrs not implemented")
}
func (UnimplementedStackServiceServer) UpdateModelAttr(context.Context, *UpdateModelAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateModelAttr not implemented")
}
func (UnimplementedStackServiceServer) DeleteModelAttrs(context.Context, *DeleteModelAttrsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteModelAttrs not implemented")
}
func (UnimplementedStackServiceServer) CreateZone(context.Context, *CreateZoneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZone not implemented")
}
func (UnimplementedStackServiceServer) ReadZones(*ReadZonesRequest, grpc.ServerStreamingServer[ReadZonesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadZones not implemented")
}
func (UnimplementedStackServiceServer) UpdateZone(context.Context, *UpdateZoneRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateZone not implemented")
}
func (UnimplementedStackServiceServer) DeleteZones(context.Context, *DeleteZonesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteZones not implemented")
}
func (UnimplementedStackServiceServer) CreateZoneAttr(context.Context, *CreateZoneAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateZoneAttr not implemented")
}
func (UnimplementedStackServiceServer) ReadZoneAttrs(*ReadZoneAttrsRequest, grpc.ServerStreamingServer[ReadZoneAttrsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadZoneAttrs not implemented")
}
func (UnimplementedStackServiceServer) UpdateZoneAttr(context.Context, *UpdateZoneAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateZoneAttr not implemented")
}
func (UnimplementedStackServiceServer) DeleteZoneAttrs(context.Context, *DeleteZoneAttrsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteZoneAttrs not implemented")
}
func (UnimplementedStackServiceServer) CreateAppliance(context.Context, *CreateApplianceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppliance not implemented")
}
func (UnimplementedStackServiceServer) ReadAppliances(*ReadAppliancesRequest, grpc.ServerStreamingServer[ReadAppliancesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadAppliances not implemented")
}
func (UnimplementedStackServiceServer) UpdateAppliance(context.Context, *UpdateApplianceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppliance not implemented")
}
func (UnimplementedStackServiceServer) DeleteAppliances(context.Context, *DeleteAppliancesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppliances not implemented")
}
func (UnimplementedStackServiceServer) CreateApplianceAttr(context.Context, *CreateApplianceAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplianceAttr not implemented")
}
func (UnimplementedStackServiceServer) ReadApplianceAttrs(*ReadApplianceAttrsRequest, grpc.ServerStreamingServer[ReadApplianceAttrsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadApplianceAttrs not implemented")
}
func (UnimplementedStackServiceServer) UpdateApplianceAttr(context.Context, *UpdateApplianceAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplianceAttr not implemented")
}
func (UnimplementedStackServiceServer) DeleteApplianceAttrs(context.Context, *DeleteApplianceAttrsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplianceAttrs not implemented")
}
func (UnimplementedStackServiceServer) CreateEnvironment(context.Context, *CreateEnvironmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironment not implemented")
}
func (UnimplementedStackServiceServer) ReadEnvironments(*ReadEnvironmentsRequest, grpc.ServerStreamingServer[ReadEnvironmentsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadEnvironments not implemented")
}
func (UnimplementedStackServiceServer) UpdateEnvironment(context.Context, *UpdateEnvironmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironment not implemented")
}
func (UnimplementedStackServiceServer) DeleteEnvironments(context.Context, *DeleteEnvironmentsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvironments not implemented")
}
func (UnimplementedStackServiceServer) CreateEnvironmentAttr(context.Context, *CreateEnvironmentAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvironmentAttr not implemented")
}
func (UnimplementedStackServiceServer) ReadEnvironmentAttrs(*ReadEnvironmentAttrsRequest, grpc.ServerStreamingServer[ReadEnvironmentAttrsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadEnvironmentAttrs not implemented")
}
func (UnimplementedStackServiceServer) UpdateEnvironmentAttr(context.Context, *UpdateEnvironmentAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvironmentAttr not implemented")
}
func (UnimplementedStackServiceServer) DeleteEnvironmentAttrs(context.Context, *DeleteEnvironmentAttrsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvironmentAttrs not implemented")
}
func (UnimplementedStackServiceServer) CreateNetwork(context.Context, *CreateNetworkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedStackServiceServer) ReadNetworks(*ReadNetworksRequest, grpc.ServerStreamingServer[ReadNetworksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadNetworks not implemented")
}
func (UnimplementedStackServiceServer) UpdateNetwork(context.Context, *UpdateNetworkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetwork not implemented")
}
func (UnimplementedStackServiceServer) DeleteNetworks(context.Context, *DeleteNetworksRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworks not implemented")
}
func (UnimplementedStackServiceServer) CreateRack(context.Context, *CreateRackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRack not implemented")
}
func (UnimplementedStackServiceServer) ReadRacks(*ReadRacksRequest, grpc.ServerStreamingServer[ReadRacksResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadRacks not implemented")
}
func (UnimplementedStackServiceServer) UpdateRack(context.Context, *UpdateRackRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRack not implemented")
}
func (UnimplementedStackServiceServer) DeleteRacks(context.Context, *DeleteRacksRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRacks not implemented")
}
func (UnimplementedStackServiceServer) CreateRackAttr(context.Context, *CreateRackAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRackAttr not implemented")
}
func (UnimplementedStackServiceServer) ReadRackAttrs(*ReadRackAttrsRequest, grpc.ServerStreamingServer[ReadRackAttrsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadRackAttrs not implemented")
}
func (UnimplementedStackServiceServer) UpdateRackAttr(context.Context, *UpdateRackAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRackAttr not implemented")
}
func (UnimplementedStackServiceServer) DeleteRackAttrs(context.Context, *DeleteRackAttrsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRackAttrs not implemented")
}
func (UnimplementedStackServiceServer) CreateCluster(context.Context, *CreateClusterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedStackServiceServer) ReadClusters(*ReadClustersRequest, grpc.ServerStreamingServer[ReadClustersResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadClusters not implemented")
}
func (UnimplementedStackServiceServer) UpdateCluster(context.Context, *UpdateClusterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (UnimplementedStackServiceServer) DeleteClusters(context.Context, *DeleteClustersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusters not implemented")
}
func (UnimplementedStackServiceServer) CreateClusterAttr(context.Context, *CreateClusterAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClusterAttr not implemented")
}
func (UnimplementedStackServiceServer) ReadClusterAttrs(*ReadClusterAttrsRequest, grpc.ServerStreamingServer[ReadClusterAttrsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadClusterAttrs not implemented")
}
func (UnimplementedStackServiceServer) UpdateClusterAttr(context.Context, *UpdateClusterAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterAttr not implemented")
}
func (UnimplementedStackServiceServer) DeleteClusterAttrs(context.Context, *DeleteClusterAttrsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterAttrs not implemented")
}
func (UnimplementedStackServiceServer) CreateHost(context.Context, *CreateHostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHost not implemented")
}
func (UnimplementedStackServiceServer) ReadHosts(*ReadHostsRequest, grpc.ServerStreamingServer[ReadHostsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadHosts not implemented")
}
func (UnimplementedStackServiceServer) UpdateHost(context.Context, *UpdateHostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHost not implemented")
}
func (UnimplementedStackServiceServer) DeleteHosts(context.Context, *DeleteHostsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHosts not implemented")
}
func (UnimplementedStackServiceServer) CreateHostAttr(context.Context, *CreateHostAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostAttr not implemented")
}
func (UnimplementedStackServiceServer) ReadHostAttrs(*ReadHostAttrsRequest, grpc.ServerStreamingServer[ReadHostAttrsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadHostAttrs not implemented")
}
func (UnimplementedStackServiceServer) UpdateHostAttr(context.Context, *UpdateHostAttrRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostAttr not implemented")
}
func (UnimplementedStackServiceServer) DeleteHostAttrs(context.Context, *DeleteHostAttrsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostAttrs not implemented")
}
func (UnimplementedStackServiceServer) CreateHostInterface(context.Context, *CreateHostInterfaceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostInterface not implemented")
}
func (UnimplementedStackServiceServer) ReadHostInterfaces(*ReadHostInterfacesRequest, grpc.ServerStreamingServer[ReadHostInterfacesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ReadHostInterfaces not implemented")
}
func (UnimplementedStackServiceServer) UpdateHostInterface(context.Context, *UpdateHostInterfaceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostInterface not implemented")
}
func (UnimplementedStackServiceServer) DeleteHostInterfaces(context.Context, *DeleteHostInterfacesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostInterfaces not implemented")
}
func (UnimplementedStackServiceServer) mustEmbedUnimplementedStackServiceServer() {}
func (UnimplementedStackServiceServer) testEmbeddedByValue()                      {}

// UnsafeStackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StackServiceServer will
// result in compilation errors.
type UnsafeStackServiceServer interface {
	mustEmbedUnimplementedStackServiceServer()
}

func RegisterStackServiceServer(s grpc.ServiceRegistrar, srv StackServiceServer) {
	// If the following call pancis, it indicates UnimplementedStackServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StackService_ServiceDesc, srv)
}

func _StackService_CreateGlobalAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGlobalAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateGlobalAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateGlobalAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateGlobalAttr(ctx, req.(*CreateGlobalAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadGlobalAttrs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadGlobalAttrsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadGlobalAttrs(m, &grpc.GenericServerStream[ReadGlobalAttrsRequest, ReadGlobalAttrsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadGlobalAttrsServer = grpc.ServerStreamingServer[ReadGlobalAttrsResponse]

func _StackService_UpdateGlobalAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGlobalAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateGlobalAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateGlobalAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateGlobalAttr(ctx, req.(*UpdateGlobalAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteGlobalAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGlobalAttrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteGlobalAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteGlobalAttrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteGlobalAttrs(ctx, req.(*DeleteGlobalAttrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateMake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateMake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateMake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateMake(ctx, req.(*CreateMakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadMakes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadMakesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadMakes(m, &grpc.GenericServerStream[ReadMakesRequest, ReadMakesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadMakesServer = grpc.ServerStreamingServer[ReadMakesResponse]

func _StackService_UpdateMake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateMake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateMake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateMake(ctx, req.(*UpdateMakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteMakes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMakesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteMakes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteMakes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteMakes(ctx, req.(*DeleteMakesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateModel(ctx, req.(*CreateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadModels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadModelsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadModels(m, &grpc.GenericServerStream[ReadModelsRequest, ReadModelsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadModelsServer = grpc.ServerStreamingServer[ReadModelsResponse]

func _StackService_UpdateModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateModel(ctx, req.(*UpdateModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteModels(ctx, req.(*DeleteModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateModelAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModelAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateModelAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateModelAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateModelAttr(ctx, req.(*CreateModelAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadModelAttrs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadModelAttrsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadModelAttrs(m, &grpc.GenericServerStream[ReadModelAttrsRequest, ReadModelAttrsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadModelAttrsServer = grpc.ServerStreamingServer[ReadModelAttrsResponse]

func _StackService_UpdateModelAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateModelAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateModelAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateModelAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateModelAttr(ctx, req.(*UpdateModelAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteModelAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteModelAttrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteModelAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteModelAttrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteModelAttrs(ctx, req.(*DeleteModelAttrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateZone(ctx, req.(*CreateZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadZones_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadZonesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadZones(m, &grpc.GenericServerStream[ReadZonesRequest, ReadZonesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadZonesServer = grpc.ServerStreamingServer[ReadZonesResponse]

func _StackService_UpdateZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateZoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateZone(ctx, req.(*UpdateZoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteZonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteZones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteZones(ctx, req.(*DeleteZonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateZoneAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateZoneAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateZoneAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateZoneAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateZoneAttr(ctx, req.(*CreateZoneAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadZoneAttrs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadZoneAttrsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadZoneAttrs(m, &grpc.GenericServerStream[ReadZoneAttrsRequest, ReadZoneAttrsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadZoneAttrsServer = grpc.ServerStreamingServer[ReadZoneAttrsResponse]

func _StackService_UpdateZoneAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateZoneAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateZoneAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateZoneAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateZoneAttr(ctx, req.(*UpdateZoneAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteZoneAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteZoneAttrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteZoneAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteZoneAttrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteZoneAttrs(ctx, req.(*DeleteZoneAttrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateAppliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplianceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateAppliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateAppliance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateAppliance(ctx, req.(*CreateApplianceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadAppliances_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadAppliancesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadAppliances(m, &grpc.GenericServerStream[ReadAppliancesRequest, ReadAppliancesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadAppliancesServer = grpc.ServerStreamingServer[ReadAppliancesResponse]

func _StackService_UpdateAppliance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplianceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateAppliance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateAppliance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateAppliance(ctx, req.(*UpdateApplianceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteAppliances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppliancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteAppliances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteAppliances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteAppliances(ctx, req.(*DeleteAppliancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateApplianceAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplianceAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateApplianceAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateApplianceAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateApplianceAttr(ctx, req.(*CreateApplianceAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadApplianceAttrs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadApplianceAttrsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadApplianceAttrs(m, &grpc.GenericServerStream[ReadApplianceAttrsRequest, ReadApplianceAttrsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadApplianceAttrsServer = grpc.ServerStreamingServer[ReadApplianceAttrsResponse]

func _StackService_UpdateApplianceAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplianceAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateApplianceAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateApplianceAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateApplianceAttr(ctx, req.(*UpdateApplianceAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteApplianceAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplianceAttrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteApplianceAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteApplianceAttrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteApplianceAttrs(ctx, req.(*DeleteApplianceAttrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateEnvironment(ctx, req.(*CreateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadEnvironments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadEnvironmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadEnvironments(m, &grpc.GenericServerStream[ReadEnvironmentsRequest, ReadEnvironmentsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadEnvironmentsServer = grpc.ServerStreamingServer[ReadEnvironmentsResponse]

func _StackService_UpdateEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateEnvironment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateEnvironment(ctx, req.(*UpdateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteEnvironments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvironmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteEnvironments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteEnvironments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteEnvironments(ctx, req.(*DeleteEnvironmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateEnvironmentAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateEnvironmentAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateEnvironmentAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateEnvironmentAttr(ctx, req.(*CreateEnvironmentAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadEnvironmentAttrs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadEnvironmentAttrsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadEnvironmentAttrs(m, &grpc.GenericServerStream[ReadEnvironmentAttrsRequest, ReadEnvironmentAttrsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadEnvironmentAttrsServer = grpc.ServerStreamingServer[ReadEnvironmentAttrsResponse]

func _StackService_UpdateEnvironmentAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvironmentAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateEnvironmentAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateEnvironmentAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateEnvironmentAttr(ctx, req.(*UpdateEnvironmentAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteEnvironmentAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvironmentAttrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteEnvironmentAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteEnvironmentAttrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteEnvironmentAttrs(ctx, req.(*DeleteEnvironmentAttrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateNetwork(ctx, req.(*CreateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadNetworks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadNetworksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadNetworks(m, &grpc.GenericServerStream[ReadNetworksRequest, ReadNetworksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadNetworksServer = grpc.ServerStreamingServer[ReadNetworksResponse]

func _StackService_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateNetwork(ctx, req.(*UpdateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteNetworks(ctx, req.(*DeleteNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateRack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateRack(ctx, req.(*CreateRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadRacks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRacksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadRacks(m, &grpc.GenericServerStream[ReadRacksRequest, ReadRacksResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadRacksServer = grpc.ServerStreamingServer[ReadRacksResponse]

func _StackService_UpdateRack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateRack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateRack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateRack(ctx, req.(*UpdateRackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteRacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteRacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteRacks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteRacks(ctx, req.(*DeleteRacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateRackAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRackAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateRackAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateRackAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateRackAttr(ctx, req.(*CreateRackAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadRackAttrs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRackAttrsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadRackAttrs(m, &grpc.GenericServerStream[ReadRackAttrsRequest, ReadRackAttrsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadRackAttrsServer = grpc.ServerStreamingServer[ReadRackAttrsResponse]

func _StackService_UpdateRackAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRackAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateRackAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateRackAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateRackAttr(ctx, req.(*UpdateRackAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteRackAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRackAttrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteRackAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteRackAttrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteRackAttrs(ctx, req.(*DeleteRackAttrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateCluster(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadClusters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadClustersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadClusters(m, &grpc.GenericServerStream[ReadClustersRequest, ReadClustersResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadClustersServer = grpc.ServerStreamingServer[ReadClustersResponse]

func _StackService_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateCluster(ctx, req.(*UpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteClusters(ctx, req.(*DeleteClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateClusterAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateClusterAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateClusterAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateClusterAttr(ctx, req.(*CreateClusterAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadClusterAttrs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadClusterAttrsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadClusterAttrs(m, &grpc.GenericServerStream[ReadClusterAttrsRequest, ReadClusterAttrsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadClusterAttrsServer = grpc.ServerStreamingServer[ReadClusterAttrsResponse]

func _StackService_UpdateClusterAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateClusterAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateClusterAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateClusterAttr(ctx, req.(*UpdateClusterAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteClusterAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterAttrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteClusterAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteClusterAttrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteClusterAttrs(ctx, req.(*DeleteClusterAttrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateHost(ctx, req.(*CreateHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadHosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadHostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadHosts(m, &grpc.GenericServerStream[ReadHostsRequest, ReadHostsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadHostsServer = grpc.ServerStreamingServer[ReadHostsResponse]

func _StackService_UpdateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateHost(ctx, req.(*UpdateHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteHosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteHosts(ctx, req.(*DeleteHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateHostAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateHostAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateHostAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateHostAttr(ctx, req.(*CreateHostAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadHostAttrs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadHostAttrsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadHostAttrs(m, &grpc.GenericServerStream[ReadHostAttrsRequest, ReadHostAttrsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadHostAttrsServer = grpc.ServerStreamingServer[ReadHostAttrsResponse]

func _StackService_UpdateHostAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateHostAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateHostAttr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateHostAttr(ctx, req.(*UpdateHostAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteHostAttrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostAttrsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteHostAttrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteHostAttrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteHostAttrs(ctx, req.(*DeleteHostAttrsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_CreateHostInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).CreateHostInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_CreateHostInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).CreateHostInterface(ctx, req.(*CreateHostInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_ReadHostInterfaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadHostInterfacesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StackServiceServer).ReadHostInterfaces(m, &grpc.GenericServerStream[ReadHostInterfacesRequest, ReadHostInterfacesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StackService_ReadHostInterfacesServer = grpc.ServerStreamingServer[ReadHostInterfacesResponse]

func _StackService_UpdateHostInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).UpdateHostInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_UpdateHostInterface_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).UpdateHostInterface(ctx, req.(*UpdateHostInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_DeleteHostInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).DeleteHostInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_DeleteHostInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).DeleteHostInterfaces(ctx, req.(*DeleteHostInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StackService_ServiceDesc is the grpc.ServiceDesc for StackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.stack.v1.StackService",
	HandlerType: (*StackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGlobalAttr",
			Handler:    _StackService_CreateGlobalAttr_Handler,
		},
		{
			MethodName: "UpdateGlobalAttr",
			Handler:    _StackService_UpdateGlobalAttr_Handler,
		},
		{
			MethodName: "DeleteGlobalAttrs",
			Handler:    _StackService_DeleteGlobalAttrs_Handler,
		},
		{
			MethodName: "CreateMake",
			Handler:    _StackService_CreateMake_Handler,
		},
		{
			MethodName: "UpdateMake",
			Handler:    _StackService_UpdateMake_Handler,
		},
		{
			MethodName: "DeleteMakes",
			Handler:    _StackService_DeleteMakes_Handler,
		},
		{
			MethodName: "CreateModel",
			Handler:    _StackService_CreateModel_Handler,
		},
		{
			MethodName: "UpdateModel",
			Handler:    _StackService_UpdateModel_Handler,
		},
		{
			MethodName: "DeleteModels",
			Handler:    _StackService_DeleteModels_Handler,
		},
		{
			MethodName: "CreateModelAttr",
			Handler:    _StackService_CreateModelAttr_Handler,
		},
		{
			MethodName: "UpdateModelAttr",
			Handler:    _StackService_UpdateModelAttr_Handler,
		},
		{
			MethodName: "DeleteModelAttrs",
			Handler:    _StackService_DeleteModelAttrs_Handler,
		},
		{
			MethodName: "CreateZone",
			Handler:    _StackService_CreateZone_Handler,
		},
		{
			MethodName: "UpdateZone",
			Handler:    _StackService_UpdateZone_Handler,
		},
		{
			MethodName: "DeleteZones",
			Handler:    _StackService_DeleteZones_Handler,
		},
		{
			MethodName: "CreateZoneAttr",
			Handler:    _StackService_CreateZoneAttr_Handler,
		},
		{
			MethodName: "UpdateZoneAttr",
			Handler:    _StackService_UpdateZoneAttr_Handler,
		},
		{
			MethodName: "DeleteZoneAttrs",
			Handler:    _StackService_DeleteZoneAttrs_Handler,
		},
		{
			MethodName: "CreateAppliance",
			Handler:    _StackService_CreateAppliance_Handler,
		},
		{
			MethodName: "UpdateAppliance",
			Handler:    _StackService_UpdateAppliance_Handler,
		},
		{
			MethodName: "DeleteAppliances",
			Handler:    _StackService_DeleteAppliances_Handler,
		},
		{
			MethodName: "CreateApplianceAttr",
			Handler:    _StackService_CreateApplianceAttr_Handler,
		},
		{
			MethodName: "UpdateApplianceAttr",
			Handler:    _StackService_UpdateApplianceAttr_Handler,
		},
		{
			MethodName: "DeleteApplianceAttrs",
			Handler:    _StackService_DeleteApplianceAttrs_Handler,
		},
		{
			MethodName: "CreateEnvironment",
			Handler:    _StackService_CreateEnvironment_Handler,
		},
		{
			MethodName: "UpdateEnvironment",
			Handler:    _StackService_UpdateEnvironment_Handler,
		},
		{
			MethodName: "DeleteEnvironments",
			Handler:    _StackService_DeleteEnvironments_Handler,
		},
		{
			MethodName: "CreateEnvironmentAttr",
			Handler:    _StackService_CreateEnvironmentAttr_Handler,
		},
		{
			MethodName: "UpdateEnvironmentAttr",
			Handler:    _StackService_UpdateEnvironmentAttr_Handler,
		},
		{
			MethodName: "DeleteEnvironmentAttrs",
			Handler:    _StackService_DeleteEnvironmentAttrs_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _StackService_CreateNetwork_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _StackService_UpdateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetworks",
			Handler:    _StackService_DeleteNetworks_Handler,
		},
		{
			MethodName: "CreateRack",
			Handler:    _StackService_CreateRack_Handler,
		},
		{
			MethodName: "UpdateRack",
			Handler:    _StackService_UpdateRack_Handler,
		},
		{
			MethodName: "DeleteRacks",
			Handler:    _StackService_DeleteRacks_Handler,
		},
		{
			MethodName: "CreateRackAttr",
			Handler:    _StackService_CreateRackAttr_Handler,
		},
		{
			MethodName: "UpdateRackAttr",
			Handler:    _StackService_UpdateRackAttr_Handler,
		},
		{
			MethodName: "DeleteRackAttrs",
			Handler:    _StackService_DeleteRackAttrs_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _StackService_CreateCluster_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _StackService_UpdateCluster_Handler,
		},
		{
			MethodName: "DeleteClusters",
			Handler:    _StackService_DeleteClusters_Handler,
		},
		{
			MethodName: "CreateClusterAttr",
			Handler:    _StackService_CreateClusterAttr_Handler,
		},
		{
			MethodName: "UpdateClusterAttr",
			Handler:    _StackService_UpdateClusterAttr_Handler,
		},
		{
			MethodName: "DeleteClusterAttrs",
			Handler:    _StackService_DeleteClusterAttrs_Handler,
		},
		{
			MethodName: "CreateHost",
			Handler:    _StackService_CreateHost_Handler,
		},
		{
			MethodName: "UpdateHost",
			Handler:    _StackService_UpdateHost_Handler,
		},
		{
			MethodName: "DeleteHosts",
			Handler:    _StackService_DeleteHosts_Handler,
		},
		{
			MethodName: "CreateHostAttr",
			Handler:    _StackService_CreateHostAttr_Handler,
		},
		{
			MethodName: "UpdateHostAttr",
			Handler:    _StackService_UpdateHostAttr_Handler,
		},
		{
			MethodName: "DeleteHostAttrs",
			Handler:    _StackService_DeleteHostAttrs_Handler,
		},
		{
			MethodName: "CreateHostInterface",
			Handler:    _StackService_CreateHostInterface_Handler,
		},
		{
			MethodName: "UpdateHostInterface",
			Handler:    _StackService_UpdateHostInterface_Handler,
		},
		{
			MethodName: "DeleteHostInterfaces",
			Handler:    _StackService_DeleteHostInterfaces_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadGlobalAttrs",
			Handler:       _StackService_ReadGlobalAttrs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadMakes",
			Handler:       _StackService_ReadMakes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadModels",
			Handler:       _StackService_ReadModels_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadModelAttrs",
			Handler:       _StackService_ReadModelAttrs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadZones",
			Handler:       _StackService_ReadZones_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadZoneAttrs",
			Handler:       _StackService_ReadZoneAttrs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadAppliances",
			Handler:       _StackService_ReadAppliances_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadApplianceAttrs",
			Handler:       _StackService_ReadApplianceAttrs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadEnvironments",
			Handler:       _StackService_ReadEnvironments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadEnvironmentAttrs",
			Handler:       _StackService_ReadEnvironmentAttrs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadNetworks",
			Handler:       _StackService_ReadNetworks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadRacks",
			Handler:       _StackService_ReadRacks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadRackAttrs",
			Handler:       _StackService_ReadRackAttrs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadClusters",
			Handler:       _StackService_ReadClusters_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadClusterAttrs",
			Handler:       _StackService_ReadClusterAttrs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadHosts",
			Handler:       _StackService_ReadHosts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadHostAttrs",
			Handler:       _StackService_ReadHostAttrs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReadHostInterfaces",
			Handler:       _StackService_ReadHostInterfaces_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/stack/v1/main.proto",
}
