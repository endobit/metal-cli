// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: proto/stack/v1/enums.proto

package stackv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HostType int32

const (
	HostType_HOST_TYPE_UNSPECIFIED HostType = 0
	HostType_HOST_TYPE_PHYSICAL    HostType = 1
	HostType_HOST_TYPE_BLADE       HostType = 2
	HostType_HOST_TYPE_VIRTUAL     HostType = 3
	HostType_HOST_TYPE_CONTAINER   HostType = 4
)

// Enum value maps for HostType.
var (
	HostType_name = map[int32]string{
		0: "HOST_TYPE_UNSPECIFIED",
		1: "HOST_TYPE_PHYSICAL",
		2: "HOST_TYPE_BLADE",
		3: "HOST_TYPE_VIRTUAL",
		4: "HOST_TYPE_CONTAINER",
	}
	HostType_value = map[string]int32{
		"HOST_TYPE_UNSPECIFIED": 0,
		"HOST_TYPE_PHYSICAL":    1,
		"HOST_TYPE_BLADE":       2,
		"HOST_TYPE_VIRTUAL":     3,
		"HOST_TYPE_CONTAINER":   4,
	}
)

func (x HostType) Enum() *HostType {
	p := new(HostType)
	*p = x
	return p
}

func (x HostType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stack_v1_enums_proto_enumTypes[0].Descriptor()
}

func (HostType) Type() protoreflect.EnumType {
	return &file_proto_stack_v1_enums_proto_enumTypes[0]
}

func (x HostType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type InterfaceType int32

const (
	InterfaceType_INTERFACE_TYPE_UNSPECIFIED InterfaceType = 0
	InterfaceType_INTERFACE_TYPE_RAW         InterfaceType = 1
	InterfaceType_INTERFACE_TYPE_BOND        InterfaceType = 2
	InterfaceType_INTERFACE_TYPE_VLAN        InterfaceType = 3
	InterfaceType_INTERFACE_TYPE_BRIDGE      InterfaceType = 4
)

// Enum value maps for InterfaceType.
var (
	InterfaceType_name = map[int32]string{
		0: "INTERFACE_TYPE_UNSPECIFIED",
		1: "INTERFACE_TYPE_RAW",
		2: "INTERFACE_TYPE_BOND",
		3: "INTERFACE_TYPE_VLAN",
		4: "INTERFACE_TYPE_BRIDGE",
	}
	InterfaceType_value = map[string]int32{
		"INTERFACE_TYPE_UNSPECIFIED": 0,
		"INTERFACE_TYPE_RAW":         1,
		"INTERFACE_TYPE_BOND":        2,
		"INTERFACE_TYPE_VLAN":        3,
		"INTERFACE_TYPE_BRIDGE":      4,
	}
)

func (x InterfaceType) Enum() *InterfaceType {
	p := new(InterfaceType)
	*p = x
	return p
}

func (x InterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stack_v1_enums_proto_enumTypes[1].Descriptor()
}

func (InterfaceType) Type() protoreflect.EnumType {
	return &file_proto_stack_v1_enums_proto_enumTypes[1]
}

func (x InterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type BondMode int32

const (
	BondMode_BOND_MODE_UNSPECIFIED   BondMode = 0
	BondMode_BOND_MODE_BALANCE_RR    BondMode = 1
	BondMode_BOND_MODE_ACTIVE_BACKUP BondMode = 2
	BondMode_BOND_MODE_BALANCE_XOR   BondMode = 3
	BondMode_BOND_MODE_BROADCAST     BondMode = 4
	BondMode_BOND_MODE_802_3AD       BondMode = 5
	BondMode_BOND_MODE_BALANCE_TLB   BondMode = 6
	BondMode_BOND_MODE_BALANCE_ALB   BondMode = 7
)

// Enum value maps for BondMode.
var (
	BondMode_name = map[int32]string{
		0: "BOND_MODE_UNSPECIFIED",
		1: "BOND_MODE_BALANCE_RR",
		2: "BOND_MODE_ACTIVE_BACKUP",
		3: "BOND_MODE_BALANCE_XOR",
		4: "BOND_MODE_BROADCAST",
		5: "BOND_MODE_802_3AD",
		6: "BOND_MODE_BALANCE_TLB",
		7: "BOND_MODE_BALANCE_ALB",
	}
	BondMode_value = map[string]int32{
		"BOND_MODE_UNSPECIFIED":   0,
		"BOND_MODE_BALANCE_RR":    1,
		"BOND_MODE_ACTIVE_BACKUP": 2,
		"BOND_MODE_BALANCE_XOR":   3,
		"BOND_MODE_BROADCAST":     4,
		"BOND_MODE_802_3AD":       5,
		"BOND_MODE_BALANCE_TLB":   6,
		"BOND_MODE_BALANCE_ALB":   7,
	}
)

func (x BondMode) Enum() *BondMode {
	p := new(BondMode)
	*p = x
	return p
}

func (x BondMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BondMode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stack_v1_enums_proto_enumTypes[2].Descriptor()
}

func (BondMode) Type() protoreflect.EnumType {
	return &file_proto_stack_v1_enums_proto_enumTypes[2]
}

func (x BondMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type SoftwareType int32

const (
	SoftwareType_SOFTWARE_TYPE_UNSPECIFIED SoftwareType = 0
	SoftwareType_SOFTWARE_TYPE_REPOSITORY  SoftwareType = 1
	SoftwareType_SOFTWARE_TYPE_MIRROR      SoftwareType = 2
	SoftwareType_SOFTWARE_TYPE_SECURITY    SoftwareType = 3
	SoftwareType_SOFTWARE_TYPE_IMAGE       SoftwareType = 4
)

// Enum value maps for SoftwareType.
var (
	SoftwareType_name = map[int32]string{
		0: "SOFTWARE_TYPE_UNSPECIFIED",
		1: "SOFTWARE_TYPE_REPOSITORY",
		2: "SOFTWARE_TYPE_MIRROR",
		3: "SOFTWARE_TYPE_SECURITY",
		4: "SOFTWARE_TYPE_IMAGE",
	}
	SoftwareType_value = map[string]int32{
		"SOFTWARE_TYPE_UNSPECIFIED": 0,
		"SOFTWARE_TYPE_REPOSITORY":  1,
		"SOFTWARE_TYPE_MIRROR":      2,
		"SOFTWARE_TYPE_SECURITY":    3,
		"SOFTWARE_TYPE_IMAGE":       4,
	}
)

func (x SoftwareType) Enum() *SoftwareType {
	p := new(SoftwareType)
	*p = x
	return p
}

func (x SoftwareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoftwareType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stack_v1_enums_proto_enumTypes[3].Descriptor()
}

func (SoftwareType) Type() protoreflect.EnumType {
	return &file_proto_stack_v1_enums_proto_enumTypes[3]
}

func (x SoftwareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type Architecture int32

const (
	Architecture_ARCHITECTURE_UNSPECIFIED Architecture = 0
	Architecture_ARCHITECTURE_X86_64      Architecture = 1
	Architecture_ARCHITECTURE_ARM64       Architecture = 2
	Architecture_ARCHITECTURE_ARM         Architecture = 3
)

// Enum value maps for Architecture.
var (
	Architecture_name = map[int32]string{
		0: "ARCHITECTURE_UNSPECIFIED",
		1: "ARCHITECTURE_X86_64",
		2: "ARCHITECTURE_ARM64",
		3: "ARCHITECTURE_ARM",
	}
	Architecture_value = map[string]int32{
		"ARCHITECTURE_UNSPECIFIED": 0,
		"ARCHITECTURE_X86_64":      1,
		"ARCHITECTURE_ARM64":       2,
		"ARCHITECTURE_ARM":         3,
	}
)

func (x Architecture) Enum() *Architecture {
	p := new(Architecture)
	*p = x
	return p
}

func (x Architecture) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Architecture) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stack_v1_enums_proto_enumTypes[4].Descriptor()
}

func (Architecture) Type() protoreflect.EnumType {
	return &file_proto_stack_v1_enums_proto_enumTypes[4]
}

func (x Architecture) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type OSName int32

const (
	OSName_OS_NAME_UNSPECIFIED OSName = 0
	OSName_OS_NAME_LINUX       OSName = 1
	OSName_OS_NAME_WINDOWS     OSName = 2
	OSName_OS_NAME_MACOS       OSName = 3
)

// Enum value maps for OSName.
var (
	OSName_name = map[int32]string{
		0: "OS_NAME_UNSPECIFIED",
		1: "OS_NAME_LINUX",
		2: "OS_NAME_WINDOWS",
		3: "OS_NAME_MACOS",
	}
	OSName_value = map[string]int32{
		"OS_NAME_UNSPECIFIED": 0,
		"OS_NAME_LINUX":       1,
		"OS_NAME_WINDOWS":     2,
		"OS_NAME_MACOS":       3,
	}
)

func (x OSName) Enum() *OSName {
	p := new(OSName)
	*p = x
	return p
}

func (x OSName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OSName) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stack_v1_enums_proto_enumTypes[5].Descriptor()
}

func (OSName) Type() protoreflect.EnumType {
	return &file_proto_stack_v1_enums_proto_enumTypes[5]
}

func (x OSName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

type OSFlavor int32

const (
	OSFlavor_OS_FLAVOR_UNSPECIFIED OSFlavor = 0
	OSFlavor_OS_FLAVOR_DEBIAN      OSFlavor = 1
	OSFlavor_OS_FLAVOR_UBUNTU      OSFlavor = 2
	OSFlavor_OS_FLAVOR_CENTOS      OSFlavor = 3
	OSFlavor_OS_FLAVOR_RHEL        OSFlavor = 4
	OSFlavor_OS_FLAVOR_FEDORA      OSFlavor = 5
	OSFlavor_OS_FLAVOR_SUSE        OSFlavor = 6
	OSFlavor_OS_FLAVOR_ROCKY       OSFlavor = 7
	OSFlavor_OS_FLAVOR_ALPINE      OSFlavor = 8
	OSFlavor_OS_FLAVOR_RASPBIAN    OSFlavor = 9
)

// Enum value maps for OSFlavor.
var (
	OSFlavor_name = map[int32]string{
		0: "OS_FLAVOR_UNSPECIFIED",
		1: "OS_FLAVOR_DEBIAN",
		2: "OS_FLAVOR_UBUNTU",
		3: "OS_FLAVOR_CENTOS",
		4: "OS_FLAVOR_RHEL",
		5: "OS_FLAVOR_FEDORA",
		6: "OS_FLAVOR_SUSE",
		7: "OS_FLAVOR_ROCKY",
		8: "OS_FLAVOR_ALPINE",
		9: "OS_FLAVOR_RASPBIAN",
	}
	OSFlavor_value = map[string]int32{
		"OS_FLAVOR_UNSPECIFIED": 0,
		"OS_FLAVOR_DEBIAN":      1,
		"OS_FLAVOR_UBUNTU":      2,
		"OS_FLAVOR_CENTOS":      3,
		"OS_FLAVOR_RHEL":        4,
		"OS_FLAVOR_FEDORA":      5,
		"OS_FLAVOR_SUSE":        6,
		"OS_FLAVOR_ROCKY":       7,
		"OS_FLAVOR_ALPINE":      8,
		"OS_FLAVOR_RASPBIAN":    9,
	}
)

func (x OSFlavor) Enum() *OSFlavor {
	p := new(OSFlavor)
	*p = x
	return p
}

func (x OSFlavor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OSFlavor) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stack_v1_enums_proto_enumTypes[6].Descriptor()
}

func (OSFlavor) Type() protoreflect.EnumType {
	return &file_proto_stack_v1_enums_proto_enumTypes[6]
}

func (x OSFlavor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

var File_proto_stack_v1_enums_proto protoreflect.FileDescriptor

var file_proto_stack_v1_enums_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a,
	0x82, 0x01, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x48, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x4f, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x41,
	0x44, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x56, 0x49, 0x52, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x48,
	0x4f, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x45, 0x52, 0x10, 0x04, 0x2a, 0x94, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x4c, 0x41, 0x4e, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x04, 0x2a, 0xdd, 0x01, 0x0a, 0x08,
	0x42, 0x6f, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f, 0x4e, 0x44,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f,
	0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x58, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x38, 0x30, 0x32, 0x5f,
	0x33, 0x41, 0x44, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x4c, 0x42, 0x10, 0x06,
	0x12, 0x19, 0x0a, 0x15, 0x42, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x42, 0x10, 0x07, 0x2a, 0x9a, 0x01, 0x0a, 0x0c,
	0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x46,
	0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x03, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x04, 0x2a, 0x73, 0x0a, 0x0c, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x52, 0x43, 0x48,
	0x49, 0x54, 0x45, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x52, 0x43, 0x48, 0x49, 0x54,
	0x45, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x58, 0x38, 0x36, 0x5f, 0x36, 0x34, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x52, 0x43, 0x48, 0x49, 0x54, 0x45, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x41, 0x52, 0x4d, 0x36, 0x34, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x52, 0x43, 0x48, 0x49,
	0x54, 0x45, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x41, 0x52, 0x4d, 0x10, 0x03, 0x2a, 0x5c, 0x0a,
	0x06, 0x4f, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x53, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x55,
	0x58, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x53, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x57,
	0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x53, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x41, 0x43, 0x4f, 0x53, 0x10, 0x03, 0x2a, 0xe8, 0x01, 0x0a, 0x08,
	0x4f, 0x53, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x53, 0x5f, 0x46,
	0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52,
	0x5f, 0x44, 0x45, 0x42, 0x49, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x53, 0x5f,
	0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x55, 0x42, 0x55, 0x4e, 0x54, 0x55, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x4f, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x43, 0x45, 0x4e,
	0x54, 0x4f, 0x53, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x56,
	0x4f, 0x52, 0x5f, 0x52, 0x48, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x53, 0x5f,
	0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x46, 0x45, 0x44, 0x4f, 0x52, 0x41, 0x10, 0x05, 0x12,
	0x12, 0x0a, 0x0e, 0x4f, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x53, 0x55, 0x53,
	0x45, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52,
	0x5f, 0x52, 0x4f, 0x43, 0x4b, 0x59, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x53, 0x5f, 0x46,
	0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x41, 0x4c, 0x50, 0x49, 0x4e, 0x45, 0x10, 0x08, 0x12, 0x16,
	0x0a, 0x12, 0x4f, 0x53, 0x5f, 0x46, 0x4c, 0x41, 0x56, 0x4f, 0x52, 0x5f, 0x52, 0x41, 0x53, 0x50,
	0x42, 0x49, 0x41, 0x4e, 0x10, 0x09, 0x42, 0x3a, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x64, 0x6f, 0x62, 0x69, 0x74, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2f,
	0x76, 0x31, 0x3b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x76, 0x31, 0x92, 0x03, 0x05, 0xd2, 0x3e, 0x02,
	0x10, 0x03, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
}

var file_proto_stack_v1_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_proto_stack_v1_enums_proto_goTypes = []any{
	(HostType)(0),      // 0: proto.stack.v1.HostType
	(InterfaceType)(0), // 1: proto.stack.v1.InterfaceType
	(BondMode)(0),      // 2: proto.stack.v1.BondMode
	(SoftwareType)(0),  // 3: proto.stack.v1.SoftwareType
	(Architecture)(0),  // 4: proto.stack.v1.Architecture
	(OSName)(0),        // 5: proto.stack.v1.OSName
	(OSFlavor)(0),      // 6: proto.stack.v1.OSFlavor
}
var file_proto_stack_v1_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_stack_v1_enums_proto_init() }
func file_proto_stack_v1_enums_proto_init() {
	if File_proto_stack_v1_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_stack_v1_enums_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_stack_v1_enums_proto_goTypes,
		DependencyIndexes: file_proto_stack_v1_enums_proto_depIdxs,
		EnumInfos:         file_proto_stack_v1_enums_proto_enumTypes,
	}.Build()
	File_proto_stack_v1_enums_proto = out.File
	file_proto_stack_v1_enums_proto_rawDesc = nil
	file_proto_stack_v1_enums_proto_goTypes = nil
	file_proto_stack_v1_enums_proto_depIdxs = nil
}
