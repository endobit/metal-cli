// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: global_attr.sql

package db

import (
	"context"
)

const createGlobalAttribute = `-- name: CreateGlobalAttribute :exec

INSERT INTO attributes (
	entity,
	name
)
VALUES (
	(SELECT id FROM entities WHERE name = 'global'),
	?1
)
`

type CreateGlobalAttributeParams struct {
	Name string
}

// CREATE
//
//	INSERT INTO attributes (
//		entity,
//		name
//	)
//	VALUES (
//		(SELECT id FROM entities WHERE name = 'global'),
//		?1
//	)
func (q *Queries) CreateGlobalAttribute(ctx context.Context, arg CreateGlobalAttributeParams) error {
	_, err := q.db.ExecContext(ctx, createGlobalAttribute, arg.Name)
	return err
}

const readGlobalAttribute = `-- name: ReadGlobalAttribute :one
SELECT
	a.id,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
WHERE
	a.entity = (SELECT id FROM entities WHERE name = 'global')
	AND a.name = ?1
`

type ReadGlobalAttributeParams struct {
	Attr string
}

type ReadGlobalAttributeRow struct {
	ID          int64
	Name        string
	Value       *string
	IsProtected int64
}

// ReadGlobalAttribute
//
//	SELECT
//		a.id,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	WHERE
//		a.entity = (SELECT id FROM entities WHERE name = 'global')
//		AND a.name = ?1
func (q *Queries) ReadGlobalAttribute(ctx context.Context, arg ReadGlobalAttributeParams) (ReadGlobalAttributeRow, error) {
	row := q.db.QueryRowContext(ctx, readGlobalAttribute, arg.Attr)
	var i ReadGlobalAttributeRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const readGlobalAttributes = `-- name: ReadGlobalAttributes :many

SELECT
	a.id,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
WHERE
	a.entity = (SELECT id FROM entities WHERE name = 'global')
ORDER BY
	a.name
LIMIT
	COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
`

type ReadGlobalAttributesParams struct {
	Offset interface{}
	Limit  interface{}
}

type ReadGlobalAttributesRow struct {
	ID          int64
	Name        string
	Value       *string
	IsProtected int64
}

// READ
//
//	SELECT
//		a.id,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	WHERE
//		a.entity = (SELECT id FROM entities WHERE name = 'global')
//	ORDER BY
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
func (q *Queries) ReadGlobalAttributes(ctx context.Context, arg ReadGlobalAttributesParams) ([]ReadGlobalAttributesRow, error) {
	rows, err := q.db.QueryContext(ctx, readGlobalAttributes, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadGlobalAttributesRow
	for rows.Next() {
		var i ReadGlobalAttributesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readGlobalAttributesByGlob = `-- name: ReadGlobalAttributesByGlob :many
SELECT
	a.id,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
WHERE
	a.entity = (SELECT id FROM entities WHERE name = 'global')
	AND a.name GLOB ?1
ORDER BY
	a.name
LIMIT
	COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
`

type ReadGlobalAttributesByGlobParams struct {
	Glob   string
	Offset interface{}
	Limit  interface{}
}

type ReadGlobalAttributesByGlobRow struct {
	ID          int64
	Name        string
	Value       *string
	IsProtected int64
}

// ReadGlobalAttributesByGlob
//
//	SELECT
//		a.id,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	WHERE
//		a.entity = (SELECT id FROM entities WHERE name = 'global')
//		AND a.name GLOB ?1
//	ORDER BY
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
func (q *Queries) ReadGlobalAttributesByGlob(ctx context.Context, arg ReadGlobalAttributesByGlobParams) ([]ReadGlobalAttributesByGlobRow, error) {
	rows, err := q.db.QueryContext(ctx, readGlobalAttributesByGlob, arg.Glob, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadGlobalAttributesByGlobRow
	for rows.Next() {
		var i ReadGlobalAttributesByGlobRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGlobalAttributeName = `-- name: UpdateGlobalAttributeName :exec

UPDATE
	attributes
SET
	name = ?1
WHERE
	entity = (SELECT id FROM entities WHERE name = 'global')
	AND attributes.name = ?2
`

type UpdateGlobalAttributeNameParams struct {
	Name string
	Attr string
}

// UPDATE
//
//	UPDATE
//		attributes
//	SET
//		name = ?1
//	WHERE
//		entity = (SELECT id FROM entities WHERE name = 'global')
//		AND attributes.name = ?2
func (q *Queries) UpdateGlobalAttributeName(ctx context.Context, arg UpdateGlobalAttributeNameParams) error {
	_, err := q.db.ExecContext(ctx, updateGlobalAttributeName, arg.Name, arg.Attr)
	return err
}

const updateGlobalAttributeProtection = `-- name: UpdateGlobalAttributeProtection :exec
UPDATE
	attributes
SET
	is_protected = ?1
WHERE
	entity = (SELECT id FROM entities WHERE name = 'global')
	AND attributes.name = ?2
`

type UpdateGlobalAttributeProtectionParams struct {
	IsProtected int64
	Attr        string
}

// UpdateGlobalAttributeProtection
//
//	UPDATE
//		attributes
//	SET
//		is_protected = ?1
//	WHERE
//		entity = (SELECT id FROM entities WHERE name = 'global')
//		AND attributes.name = ?2
func (q *Queries) UpdateGlobalAttributeProtection(ctx context.Context, arg UpdateGlobalAttributeProtectionParams) error {
	_, err := q.db.ExecContext(ctx, updateGlobalAttributeProtection, arg.IsProtected, arg.Attr)
	return err
}

const updateGlobalAttributeValue = `-- name: UpdateGlobalAttributeValue :exec
UPDATE
	attributes
SET
	value = ?1
WHERE
	entity = (SELECT id FROM entities WHERE name = 'global')
	AND attributes.name = ?2
`

type UpdateGlobalAttributeValueParams struct {
	Value *string
	Attr  string
}

// UpdateGlobalAttributeValue
//
//	UPDATE
//		attributes
//	SET
//		value = ?1
//	WHERE
//		entity = (SELECT id FROM entities WHERE name = 'global')
//		AND attributes.name = ?2
func (q *Queries) UpdateGlobalAttributeValue(ctx context.Context, arg UpdateGlobalAttributeValueParams) error {
	_, err := q.db.ExecContext(ctx, updateGlobalAttributeValue, arg.Value, arg.Attr)
	return err
}
