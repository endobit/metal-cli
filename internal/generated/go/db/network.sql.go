// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: network.sql

package db

import (
	"context"
)

const createNetwork = `-- name: CreateNetwork :exec

INSERT INTO networks (
	zone,
	name
)
VALUES (
	(SELECT id FROM zones z WHERE z.name = ?1),
	?2
)
`

type CreateNetworkParams struct {
	Zone string
	Name string
}

// CREATE
//
//	INSERT INTO networks (
//		zone,
//		name
//	)
//	VALUES (
//		(SELECT id FROM zones z WHERE z.name = ?1),
//		?2
//	)
func (q *Queries) CreateNetwork(ctx context.Context, arg CreateNetworkParams) error {
	_, err := q.db.ExecContext(ctx, createNetwork, arg.Zone, arg.Name)
	return err
}

const deleteNetwork = `-- name: DeleteNetwork :exec

DELETE FROM
	networks
WHERE
	id = ?1
`

type DeleteNetworkParams struct {
	ID int64
}

// DELETE
//
//	DELETE FROM
//		networks
//	WHERE
//		id = ?1
func (q *Queries) DeleteNetwork(ctx context.Context, arg DeleteNetworkParams) error {
	_, err := q.db.ExecContext(ctx, deleteNetwork, arg.ID)
	return err
}

const readNetwork = `-- name: ReadNetwork :one
SELECT
	n.id,
	n.name,
	n.address,
	n.gateway,
	n.is_pxe,
	n.mtu,
	z.name AS zone
FROM
	networks n
JOIN
	zones z ON n.zone = z.id
WHERE
	n.name = ?1
	AND n.zone = (SELECT id FROM zones z WHERE z.name = ?2)
`

type ReadNetworkParams struct {
	Name string
	Zone string
}

type ReadNetworkRow struct {
	ID      int64
	Name    string
	Address *string
	Gateway *string
	IsPXE   int64
	MTU     int64
	Zone    string
}

// ReadNetwork
//
//	SELECT
//		n.id,
//		n.name,
//		n.address,
//		n.gateway,
//		n.is_pxe,
//		n.mtu,
//		z.name AS zone
//	FROM
//		networks n
//	JOIN
//		zones z ON n.zone = z.id
//	WHERE
//		n.name = ?1
//		AND n.zone = (SELECT id FROM zones z WHERE z.name = ?2)
func (q *Queries) ReadNetwork(ctx context.Context, arg ReadNetworkParams) (ReadNetworkRow, error) {
	row := q.db.QueryRowContext(ctx, readNetwork, arg.Name, arg.Zone)
	var i ReadNetworkRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Gateway,
		&i.IsPXE,
		&i.MTU,
		&i.Zone,
	)
	return i, err
}

const readNetworks = `-- name: ReadNetworks :many

SELECT
	n.id,
	n.name,
	n.address,
	n.gateway,
	n.is_pxe,
	n.mtu,
	z.name AS zone
FROM
	networks n
JOIN
	zones z ON n.zone = z.id
ORDER BY
	z.name,
	n.name
LIMIT
	COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
`

type ReadNetworksParams struct {
	Offset interface{}
	Limit  interface{}
}

type ReadNetworksRow struct {
	ID      int64
	Name    string
	Address *string
	Gateway *string
	IsPXE   int64
	MTU     int64
	Zone    string
}

// READ
//
//	SELECT
//		n.id,
//		n.name,
//		n.address,
//		n.gateway,
//		n.is_pxe,
//		n.mtu,
//		z.name AS zone
//	FROM
//		networks n
//	JOIN
//		zones z ON n.zone = z.id
//	ORDER BY
//		z.name,
//		n.name
//	LIMIT
//		COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
func (q *Queries) ReadNetworks(ctx context.Context, arg ReadNetworksParams) ([]ReadNetworksRow, error) {
	rows, err := q.db.QueryContext(ctx, readNetworks, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadNetworksRow
	for rows.Next() {
		var i ReadNetworksRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Gateway,
			&i.IsPXE,
			&i.MTU,
			&i.Zone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readNetworksByGlob = `-- name: ReadNetworksByGlob :many
SELECT
	n.id,
	n.name,
	n.address,
	n.gateway,
	n.is_pxe,
	n.mtu,
	z.name AS zone
FROM
	networks n
JOIN
	zones z ON n.zone = z.id
WHERE
	z.name = ?1
	AND n.name GLOB ?2
ORDER BY
	n.name
LIMIT
	COALESCE(NULLIF(?4, 0), 100) OFFSET COALESCE(?3, 0)
`

type ReadNetworksByGlobParams struct {
	Zone   string
	Glob   string
	Offset interface{}
	Limit  interface{}
}

type ReadNetworksByGlobRow struct {
	ID      int64
	Name    string
	Address *string
	Gateway *string
	IsPXE   int64
	MTU     int64
	Zone    string
}

// ReadNetworksByGlob
//
//	SELECT
//		n.id,
//		n.name,
//		n.address,
//		n.gateway,
//		n.is_pxe,
//		n.mtu,
//		z.name AS zone
//	FROM
//		networks n
//	JOIN
//		zones z ON n.zone = z.id
//	WHERE
//		z.name = ?1
//		AND n.name GLOB ?2
//	ORDER BY
//		n.name
//	LIMIT
//		COALESCE(NULLIF(?4, 0), 100) OFFSET COALESCE(?3, 0)
func (q *Queries) ReadNetworksByGlob(ctx context.Context, arg ReadNetworksByGlobParams) ([]ReadNetworksByGlobRow, error) {
	rows, err := q.db.QueryContext(ctx, readNetworksByGlob,
		arg.Zone,
		arg.Glob,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadNetworksByGlobRow
	for rows.Next() {
		var i ReadNetworksByGlobRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Gateway,
			&i.IsPXE,
			&i.MTU,
			&i.Zone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readNetworksByZone = `-- name: ReadNetworksByZone :many
SELECT
	n.id,
	n.name,
	n.address,
	n.gateway,
	n.is_pxe,
	n.mtu,
	z.name AS zone
FROM
	networks n
JOIN
	zones z ON n.zone = z.id
WHERE
	z.name = ?1
ORDER BY
	n.name
LIMIT
	COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
`

type ReadNetworksByZoneParams struct {
	Zone   string
	Offset interface{}
	Limit  interface{}
}

type ReadNetworksByZoneRow struct {
	ID      int64
	Name    string
	Address *string
	Gateway *string
	IsPXE   int64
	MTU     int64
	Zone    string
}

// ReadNetworksByZone
//
//	SELECT
//		n.id,
//		n.name,
//		n.address,
//		n.gateway,
//		n.is_pxe,
//		n.mtu,
//		z.name AS zone
//	FROM
//		networks n
//	JOIN
//		zones z ON n.zone = z.id
//	WHERE
//		z.name = ?1
//	ORDER BY
//		n.name
//	LIMIT
//		COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
func (q *Queries) ReadNetworksByZone(ctx context.Context, arg ReadNetworksByZoneParams) ([]ReadNetworksByZoneRow, error) {
	rows, err := q.db.QueryContext(ctx, readNetworksByZone, arg.Zone, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadNetworksByZoneRow
	for rows.Next() {
		var i ReadNetworksByZoneRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Gateway,
			&i.IsPXE,
			&i.MTU,
			&i.Zone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNetworkAddress = `-- name: UpdateNetworkAddress :exec
UPDATE
	networks
SET
	address = ?1
WHERE
	networks.name = ?2
	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
`

type UpdateNetworkAddressParams struct {
	Address *string
	Network string
	Zone    string
}

// UpdateNetworkAddress
//
//	UPDATE
//		networks
//	SET
//		address = ?1
//	WHERE
//		networks.name = ?2
//		AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
func (q *Queries) UpdateNetworkAddress(ctx context.Context, arg UpdateNetworkAddressParams) error {
	_, err := q.db.ExecContext(ctx, updateNetworkAddress, arg.Address, arg.Network, arg.Zone)
	return err
}

const updateNetworkGateway = `-- name: UpdateNetworkGateway :exec
UPDATE
	networks
SET
	gateway = ?1
WHERE
	networks.name = ?2
	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
`

type UpdateNetworkGatewayParams struct {
	Gateway *string
	Network string
	Zone    string
}

// UpdateNetworkGateway
//
//	UPDATE
//		networks
//	SET
//		gateway = ?1
//	WHERE
//		networks.name = ?2
//		AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
func (q *Queries) UpdateNetworkGateway(ctx context.Context, arg UpdateNetworkGatewayParams) error {
	_, err := q.db.ExecContext(ctx, updateNetworkGateway, arg.Gateway, arg.Network, arg.Zone)
	return err
}

const updateNetworkMTU = `-- name: UpdateNetworkMTU :exec
UPDATE
	networks
SET
	mtu = ?1
WHERE
	networks.name = ?2
	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
`

type UpdateNetworkMTUParams struct {
	MTU     int64
	Network string
	Zone    string
}

// UpdateNetworkMTU
//
//	UPDATE
//		networks
//	SET
//		mtu = ?1
//	WHERE
//		networks.name = ?2
//		AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
func (q *Queries) UpdateNetworkMTU(ctx context.Context, arg UpdateNetworkMTUParams) error {
	_, err := q.db.ExecContext(ctx, updateNetworkMTU, arg.MTU, arg.Network, arg.Zone)
	return err
}

const updateNetworkName = `-- name: UpdateNetworkName :exec

UPDATE
	networks
SET
	name = ?1
WHERE
	networks.name = ?2
	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
`

type UpdateNetworkNameParams struct {
	Name    string
	Network string
	Zone    string
}

// UPDATE
//
//	UPDATE
//		networks
//	SET
//		name = ?1
//	WHERE
//		networks.name = ?2
//		AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
func (q *Queries) UpdateNetworkName(ctx context.Context, arg UpdateNetworkNameParams) error {
	_, err := q.db.ExecContext(ctx, updateNetworkName, arg.Name, arg.Network, arg.Zone)
	return err
}

const updateNetworkPXE = `-- name: UpdateNetworkPXE :exec
UPDATE
	networks
SET
	is_pxe = ?1
WHERE
	networks.name = ?2
	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
`

type UpdateNetworkPXEParams struct {
	IsPXE   int64
	Network string
	Zone    string
}

// UpdateNetworkPXE
//
//	UPDATE
//		networks
//	SET
//		is_pxe = ?1
//	WHERE
//		networks.name = ?2
//		AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
func (q *Queries) UpdateNetworkPXE(ctx context.Context, arg UpdateNetworkPXEParams) error {
	_, err := q.db.ExecContext(ctx, updateNetworkPXE, arg.IsPXE, arg.Network, arg.Zone)
	return err
}
