// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: zone.sql

package db

import (
	"context"
)

const createZone = `-- name: CreateZone :exec

INSERT INTO zones (
	name
)
VALUES (
	?1
)
`

type CreateZoneParams struct {
	Name string
}

// CREATE
//
//	INSERT INTO zones (
//		name
//	)
//	VALUES (
//		?1
//	)
func (q *Queries) CreateZone(ctx context.Context, arg CreateZoneParams) error {
	_, err := q.db.ExecContext(ctx, createZone, arg.Name)
	return err
}

const deleteZone = `-- name: DeleteZone :exec

DELETE FROM
	zones
WHERE
	id = ?1
`

type DeleteZoneParams struct {
	ID int64
}

// DELETE
//
//	DELETE FROM
//		zones
//	WHERE
//		id = ?1
func (q *Queries) DeleteZone(ctx context.Context, arg DeleteZoneParams) error {
	_, err := q.db.ExecContext(ctx, deleteZone, arg.ID)
	return err
}

const readZone = `-- name: ReadZone :one
SELECT
	id,
	name,
	time_zone
FROM
	zones
WHERE
	name = ?1
`

type ReadZoneParams struct {
	Zone string
}

// ReadZone
//
//	SELECT
//		id,
//		name,
//		time_zone
//	FROM
//		zones
//	WHERE
//		name = ?1
func (q *Queries) ReadZone(ctx context.Context, arg ReadZoneParams) (Zone, error) {
	row := q.db.QueryRowContext(ctx, readZone, arg.Zone)
	var i Zone
	err := row.Scan(&i.ID, &i.Name, &i.TimeZone)
	return i, err
}

const readZones = `-- name: ReadZones :many

SELECT
	id,
	name,
	time_zone
FROM
	zones
ORDER BY
	name
LIMIT
	COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
`

type ReadZonesParams struct {
	Offset interface{}
	Limit  interface{}
}

// READ
//
//	SELECT
//		id,
//		name,
//		time_zone
//	FROM
//		zones
//	ORDER BY
//		name
//	LIMIT
//		COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
func (q *Queries) ReadZones(ctx context.Context, arg ReadZonesParams) ([]Zone, error) {
	rows, err := q.db.QueryContext(ctx, readZones, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Zone
	for rows.Next() {
		var i Zone
		if err := rows.Scan(&i.ID, &i.Name, &i.TimeZone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readZonesByGlob = `-- name: ReadZonesByGlob :many
SELECT
	id,
	name,
	time_zone
FROM
	zones
WHERE
	name GLOB ?1
ORDER BY
	name
LIMIT
	COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
`

type ReadZonesByGlobParams struct {
	Glob   string
	Offset interface{}
	Limit  interface{}
}

// ReadZonesByGlob
//
//	SELECT
//		id,
//		name,
//		time_zone
//	FROM
//		zones
//	WHERE
//		name GLOB ?1
//	ORDER BY
//		name
//	LIMIT
//		COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
func (q *Queries) ReadZonesByGlob(ctx context.Context, arg ReadZonesByGlobParams) ([]Zone, error) {
	rows, err := q.db.QueryContext(ctx, readZonesByGlob, arg.Glob, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Zone
	for rows.Next() {
		var i Zone
		if err := rows.Scan(&i.ID, &i.Name, &i.TimeZone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateZoneName = `-- name: UpdateZoneName :exec

UPDATE
	zones
SET
	name = ?1
WHERE
	name = ?2
`

type UpdateZoneNameParams struct {
	Name string
	Zone string
}

// UPDATE
//
//	UPDATE
//		zones
//	SET
//		name = ?1
//	WHERE
//		name = ?2
func (q *Queries) UpdateZoneName(ctx context.Context, arg UpdateZoneNameParams) error {
	_, err := q.db.ExecContext(ctx, updateZoneName, arg.Name, arg.Zone)
	return err
}

const updateZoneTimeZone = `-- name: UpdateZoneTimeZone :exec
UPDATE
	zones
SET
	time_zone = ?1
WHERE
	name = ?2
`

type UpdateZoneTimeZoneParams struct {
	TimeZone *string
	Zone     string
}

// UpdateZoneTimeZone
//
//	UPDATE
//		zones
//	SET
//		time_zone = ?1
//	WHERE
//		name = ?2
func (q *Queries) UpdateZoneTimeZone(ctx context.Context, arg UpdateZoneTimeZoneParams) error {
	_, err := q.db.ExecContext(ctx, updateZoneTimeZone, arg.TimeZone, arg.Zone)
	return err
}
