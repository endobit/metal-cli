// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: rack_attr.sql

package db

import (
	"context"
)

const createRackAttribute = `-- name: CreateRackAttribute :exec

INSERT INTO attributes (
	entity,
	object,
	name
)
VALUES (
	(SELECT id FROM entities WHERE name = 'rack'),
	(SELECT id FROM racks r WHERE r.name = ?1 AND zone = (SELECT id FROM zones z WHERE z.name = ?2)),
	?3
)
`

type CreateRackAttributeParams struct {
	Rack string
	Zone string
	Name string
}

// CREATE
//
//	INSERT INTO attributes (
//		entity,
//		object,
//		name
//	)
//	VALUES (
//		(SELECT id FROM entities WHERE name = 'rack'),
//		(SELECT id FROM racks r WHERE r.name = ?1 AND zone = (SELECT id FROM zones z WHERE z.name = ?2)),
//		?3
//	)
func (q *Queries) CreateRackAttribute(ctx context.Context, arg CreateRackAttributeParams) error {
	_, err := q.db.ExecContext(ctx, createRackAttribute, arg.Rack, arg.Zone, arg.Name)
	return err
}

const readRackAttribute = `-- name: ReadRackAttribute :one
SELECT
	a.id,
	r.name AS rack,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
JOIN
	racks r ON a.object = r.id
JOIN
	zones z ON r.zone = z.id
WHERE
	e.name = 'rack'
	AND z.name = ?1
	AND r.name = ?2
	AND a.name = ?3
`

type ReadRackAttributeParams struct {
	Zone string
	Rack string
	Attr string
}

type ReadRackAttributeRow struct {
	ID          int64
	Rack        string
	Name        string
	Value       *string
	IsProtected int64
}

// ReadRackAttribute
//
//	SELECT
//		a.id,
//		r.name AS rack,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	JOIN
//		racks r ON a.object = r.id
//	JOIN
//		zones z ON r.zone = z.id
//	WHERE
//		e.name = 'rack'
//		AND z.name = ?1
//		AND r.name = ?2
//		AND a.name = ?3
func (q *Queries) ReadRackAttribute(ctx context.Context, arg ReadRackAttributeParams) (ReadRackAttributeRow, error) {
	row := q.db.QueryRowContext(ctx, readRackAttribute, arg.Zone, arg.Rack, arg.Attr)
	var i ReadRackAttributeRow
	err := row.Scan(
		&i.ID,
		&i.Rack,
		&i.Name,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const readRackAttributes = `-- name: ReadRackAttributes :many

SELECT
	a.id,
	r.name AS rack,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
JOIN
	racks r ON a.object = r.id
JOIN
	zones z ON r.zone = z.id
WHERE
	e.name = 'rack'
ORDER BY
        z.name,
	r.name,
	a.name
LIMIT
	COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
`

type ReadRackAttributesParams struct {
	Offset interface{}
	Limit  interface{}
}

type ReadRackAttributesRow struct {
	ID          int64
	Rack        string
	Name        string
	Value       *string
	IsProtected int64
}

// READ
//
//	SELECT
//		a.id,
//		r.name AS rack,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	JOIN
//		racks r ON a.object = r.id
//	JOIN
//		zones z ON r.zone = z.id
//	WHERE
//		e.name = 'rack'
//	ORDER BY
//	        z.name,
//		r.name,
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
func (q *Queries) ReadRackAttributes(ctx context.Context, arg ReadRackAttributesParams) ([]ReadRackAttributesRow, error) {
	rows, err := q.db.QueryContext(ctx, readRackAttributes, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadRackAttributesRow
	for rows.Next() {
		var i ReadRackAttributesRow
		if err := rows.Scan(
			&i.ID,
			&i.Rack,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readRackAttributesByGlob = `-- name: ReadRackAttributesByGlob :many
SELECT
	a.id,
	r.name AS rack,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
JOIN
	racks r ON a.object = r.id
JOIN
	zones z ON r.zone = z.id
WHERE
	e.name = 'rack'
	AND z.name = ?1
	AND r.name = ?2
	AND a.name GLOB ?3
ORDER BY
	r.name,
	a.name
LIMIT
	COALESCE(NULLIF(?5, 0), 100) OFFSET COALESCE(?4, 0)
`

type ReadRackAttributesByGlobParams struct {
	Zone   string
	Rack   string
	Glob   string
	Offset interface{}
	Limit  interface{}
}

type ReadRackAttributesByGlobRow struct {
	ID          int64
	Rack        string
	Name        string
	Value       *string
	IsProtected int64
}

// ReadRackAttributesByGlob
//
//	SELECT
//		a.id,
//		r.name AS rack,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	JOIN
//		racks r ON a.object = r.id
//	JOIN
//		zones z ON r.zone = z.id
//	WHERE
//		e.name = 'rack'
//		AND z.name = ?1
//		AND r.name = ?2
//		AND a.name GLOB ?3
//	ORDER BY
//		r.name,
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?5, 0), 100) OFFSET COALESCE(?4, 0)
func (q *Queries) ReadRackAttributesByGlob(ctx context.Context, arg ReadRackAttributesByGlobParams) ([]ReadRackAttributesByGlobRow, error) {
	rows, err := q.db.QueryContext(ctx, readRackAttributesByGlob,
		arg.Zone,
		arg.Rack,
		arg.Glob,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadRackAttributesByGlobRow
	for rows.Next() {
		var i ReadRackAttributesByGlobRow
		if err := rows.Scan(
			&i.ID,
			&i.Rack,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readRackAttributesByRack = `-- name: ReadRackAttributesByRack :many
SELECT
	a.id,
	r.name AS rack,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
JOIN
	racks r ON a.object = r.id
JOIN
	zones z ON r.zone = z.id
WHERE
	e.name = 'rack'
	AND z.name = ?1
	AND r.name = ?2
ORDER BY
	r.name,
	a.name
LIMIT
	COALESCE(NULLIF(?4, 0), 100) OFFSET COALESCE(?3, 0)
`

type ReadRackAttributesByRackParams struct {
	Zone   string
	Rack   string
	Offset interface{}
	Limit  interface{}
}

type ReadRackAttributesByRackRow struct {
	ID          int64
	Rack        string
	Name        string
	Value       *string
	IsProtected int64
}

// ReadRackAttributesByRack
//
//	SELECT
//		a.id,
//		r.name AS rack,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	JOIN
//		racks r ON a.object = r.id
//	JOIN
//		zones z ON r.zone = z.id
//	WHERE
//		e.name = 'rack'
//		AND z.name = ?1
//		AND r.name = ?2
//	ORDER BY
//		r.name,
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?4, 0), 100) OFFSET COALESCE(?3, 0)
func (q *Queries) ReadRackAttributesByRack(ctx context.Context, arg ReadRackAttributesByRackParams) ([]ReadRackAttributesByRackRow, error) {
	rows, err := q.db.QueryContext(ctx, readRackAttributesByRack,
		arg.Zone,
		arg.Rack,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadRackAttributesByRackRow
	for rows.Next() {
		var i ReadRackAttributesByRackRow
		if err := rows.Scan(
			&i.ID,
			&i.Rack,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readRackAttributesByZone = `-- name: ReadRackAttributesByZone :many
SELECT
	a.id,
	r.name AS rack,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
JOIN
	racks r ON a.object = r.id
JOIN
	zones z ON r.zone = z.id
WHERE
	e.name = 'rack'
	AND z.name = ?1
ORDER BY
	z.name,
	r.name,
	a.name
LIMIT
	COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
`

type ReadRackAttributesByZoneParams struct {
	Zone   string
	Offset interface{}
	Limit  interface{}
}

type ReadRackAttributesByZoneRow struct {
	ID          int64
	Rack        string
	Name        string
	Value       *string
	IsProtected int64
}

// ReadRackAttributesByZone
//
//	SELECT
//		a.id,
//		r.name AS rack,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	JOIN
//		racks r ON a.object = r.id
//	JOIN
//		zones z ON r.zone = z.id
//	WHERE
//		e.name = 'rack'
//		AND z.name = ?1
//	ORDER BY
//		z.name,
//		r.name,
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
func (q *Queries) ReadRackAttributesByZone(ctx context.Context, arg ReadRackAttributesByZoneParams) ([]ReadRackAttributesByZoneRow, error) {
	rows, err := q.db.QueryContext(ctx, readRackAttributesByZone, arg.Zone, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadRackAttributesByZoneRow
	for rows.Next() {
		var i ReadRackAttributesByZoneRow
		if err := rows.Scan(
			&i.ID,
			&i.Rack,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRackAttributeName = `-- name: UpdateRackAttributeName :exec

UPDATE
	attributes
SET
	name = ?1
WHERE
	entity = (SELECT id FROM entities WHERE name = 'rack')
	AND object = (
	    SELECT
		id
	    FROM
		racks r
	    WHERE
	    	r.name = ?2
	    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
	)
	AND attributes.name = ?4
`

type UpdateRackAttributeNameParams struct {
	Name string
	Rack string
	Zone string
	Attr string
}

// UPDATE
//
//	UPDATE
//		attributes
//	SET
//		name = ?1
//	WHERE
//		entity = (SELECT id FROM entities WHERE name = 'rack')
//		AND object = (
//		    SELECT
//			id
//		    FROM
//			racks r
//		    WHERE
//		    	r.name = ?2
//		    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
//		)
//		AND attributes.name = ?4
func (q *Queries) UpdateRackAttributeName(ctx context.Context, arg UpdateRackAttributeNameParams) error {
	_, err := q.db.ExecContext(ctx, updateRackAttributeName,
		arg.Name,
		arg.Rack,
		arg.Zone,
		arg.Attr,
	)
	return err
}

const updateRackAttributeProtection = `-- name: UpdateRackAttributeProtection :exec
UPDATE
	attributes
SET
	is_protected = ?1
WHERE
	entity = (SELECT id FROM entities WHERE name = 'rack')
	AND object = (
	    SELECT
		id
	    FROM
		racks r
	    WHERE
	    	r.name = ?2
	    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
	)
	AND attributes.name = ?4
`

type UpdateRackAttributeProtectionParams struct {
	IsProtected int64
	Rack        string
	Zone        string
	Attr        string
}

// UpdateRackAttributeProtection
//
//	UPDATE
//		attributes
//	SET
//		is_protected = ?1
//	WHERE
//		entity = (SELECT id FROM entities WHERE name = 'rack')
//		AND object = (
//		    SELECT
//			id
//		    FROM
//			racks r
//		    WHERE
//		    	r.name = ?2
//		    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
//		)
//		AND attributes.name = ?4
func (q *Queries) UpdateRackAttributeProtection(ctx context.Context, arg UpdateRackAttributeProtectionParams) error {
	_, err := q.db.ExecContext(ctx, updateRackAttributeProtection,
		arg.IsProtected,
		arg.Rack,
		arg.Zone,
		arg.Attr,
	)
	return err
}

const updateRackAttributeValue = `-- name: UpdateRackAttributeValue :exec
UPDATE
	attributes
SET
	value = ?1
WHERE
	entity = (SELECT id FROM entities WHERE name = 'rack')
	AND object = (
	    SELECT
		id
	    FROM
		racks r
	    WHERE
	    	r.name = ?2
	    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
	)
	AND attributes.name = ?4
`

type UpdateRackAttributeValueParams struct {
	Value *string
	Rack  string
	Zone  string
	Attr  string
}

// UpdateRackAttributeValue
//
//	UPDATE
//		attributes
//	SET
//		value = ?1
//	WHERE
//		entity = (SELECT id FROM entities WHERE name = 'rack')
//		AND object = (
//		    SELECT
//			id
//		    FROM
//			racks r
//		    WHERE
//		    	r.name = ?2
//		    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
//		)
//		AND attributes.name = ?4
func (q *Queries) UpdateRackAttributeValue(ctx context.Context, arg UpdateRackAttributeValueParams) error {
	_, err := q.db.ExecContext(ctx, updateRackAttributeValue,
		arg.Value,
		arg.Rack,
		arg.Zone,
		arg.Attr,
	)
	return err
}
