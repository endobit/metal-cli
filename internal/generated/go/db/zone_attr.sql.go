// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: zone_attr.sql

package db

import (
	"context"
)

const createZoneAttribute = `-- name: CreateZoneAttribute :exec

INSERT INTO attributes (
	entity,
	object,
	name
)
VALUES (
	(SELECT id FROM entities WHERE name = 'zone'),
	(SELECT id FROM zones z WHERE z.name = ?1),
	?2
)
`

type CreateZoneAttributeParams struct {
	Zone string
	Name string
}

// CREATE
//
//	INSERT INTO attributes (
//		entity,
//		object,
//		name
//	)
//	VALUES (
//		(SELECT id FROM entities WHERE name = 'zone'),
//		(SELECT id FROM zones z WHERE z.name = ?1),
//		?2
//	)
func (q *Queries) CreateZoneAttribute(ctx context.Context, arg CreateZoneAttributeParams) error {
	_, err := q.db.ExecContext(ctx, createZoneAttribute, arg.Zone, arg.Name)
	return err
}

const readZoneAttribute = `-- name: ReadZoneAttribute :one
SELECT
	a.id,
	z.name AS zone,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	zones z ON a.object = z.id
WHERE
	a.entity = (SELECT id FROM entities WHERE name = 'zone')
	AND z.name = ?1
	AND a.name = ?2
`

type ReadZoneAttributeParams struct {
	Zone string
	Attr string
}

type ReadZoneAttributeRow struct {
	ID          int64
	Zone        string
	Name        string
	Value       *string
	IsProtected int64
}

// ReadZoneAttribute
//
//	SELECT
//		a.id,
//		z.name AS zone,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		zones z ON a.object = z.id
//	WHERE
//		a.entity = (SELECT id FROM entities WHERE name = 'zone')
//		AND z.name = ?1
//		AND a.name = ?2
func (q *Queries) ReadZoneAttribute(ctx context.Context, arg ReadZoneAttributeParams) (ReadZoneAttributeRow, error) {
	row := q.db.QueryRowContext(ctx, readZoneAttribute, arg.Zone, arg.Attr)
	var i ReadZoneAttributeRow
	err := row.Scan(
		&i.ID,
		&i.Zone,
		&i.Name,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const readZoneAttributes = `-- name: ReadZoneAttributes :many

SELECT
	a.id,
	z.name AS zone,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	zones z ON a.object = z.id
WHERE
	a.entity = (SELECT id FROM entities WHERE name = 'zone')
ORDER BY
	z.name,
	a.name
LIMIT
	COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
`

type ReadZoneAttributesParams struct {
	Offset interface{}
	Limit  interface{}
}

type ReadZoneAttributesRow struct {
	ID          int64
	Zone        string
	Name        string
	Value       *string
	IsProtected int64
}

// READ
//
//	SELECT
//		a.id,
//		z.name AS zone,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		zones z ON a.object = z.id
//	WHERE
//		a.entity = (SELECT id FROM entities WHERE name = 'zone')
//	ORDER BY
//		z.name,
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
func (q *Queries) ReadZoneAttributes(ctx context.Context, arg ReadZoneAttributesParams) ([]ReadZoneAttributesRow, error) {
	rows, err := q.db.QueryContext(ctx, readZoneAttributes, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadZoneAttributesRow
	for rows.Next() {
		var i ReadZoneAttributesRow
		if err := rows.Scan(
			&i.ID,
			&i.Zone,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readZoneAttributesByGlob = `-- name: ReadZoneAttributesByGlob :many
SELECT
	a.id,
	z.name AS zone,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	zones z ON a.object = z.id
WHERE
	a.entity = (SELECT id FROM entities WHERE name = 'zone')
	AND z.name = ?1
	AND a.name GLOB ?2
ORDER BY
	z.name,
	a.name
LIMIT
	COALESCE(NULLIF(?4, 0), 100) OFFSET COALESCE(?3, 0)
`

type ReadZoneAttributesByGlobParams struct {
	Zone   string
	Glob   string
	Offset interface{}
	Limit  interface{}
}

type ReadZoneAttributesByGlobRow struct {
	ID          int64
	Zone        string
	Name        string
	Value       *string
	IsProtected int64
}

// ReadZoneAttributesByGlob
//
//	SELECT
//		a.id,
//		z.name AS zone,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		zones z ON a.object = z.id
//	WHERE
//		a.entity = (SELECT id FROM entities WHERE name = 'zone')
//		AND z.name = ?1
//		AND a.name GLOB ?2
//	ORDER BY
//		z.name,
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?4, 0), 100) OFFSET COALESCE(?3, 0)
func (q *Queries) ReadZoneAttributesByGlob(ctx context.Context, arg ReadZoneAttributesByGlobParams) ([]ReadZoneAttributesByGlobRow, error) {
	rows, err := q.db.QueryContext(ctx, readZoneAttributesByGlob,
		arg.Zone,
		arg.Glob,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadZoneAttributesByGlobRow
	for rows.Next() {
		var i ReadZoneAttributesByGlobRow
		if err := rows.Scan(
			&i.ID,
			&i.Zone,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readZoneAttributesByZone = `-- name: ReadZoneAttributesByZone :many
SELECT
	a.id,
	z.name AS zone,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	zones z ON a.object = z.id
WHERE
	a.entity = (SELECT id FROM entities WHERE name = 'zone')
	AND z.name = ?1
ORDER BY
	z.name,
	a.name
LIMIT
	COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
`

type ReadZoneAttributesByZoneParams struct {
	Zone   string
	Offset interface{}
	Limit  interface{}
}

type ReadZoneAttributesByZoneRow struct {
	ID          int64
	Zone        string
	Name        string
	Value       *string
	IsProtected int64
}

// ReadZoneAttributesByZone
//
//	SELECT
//		a.id,
//		z.name AS zone,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		zones z ON a.object = z.id
//	WHERE
//		a.entity = (SELECT id FROM entities WHERE name = 'zone')
//		AND z.name = ?1
//	ORDER BY
//		z.name,
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
func (q *Queries) ReadZoneAttributesByZone(ctx context.Context, arg ReadZoneAttributesByZoneParams) ([]ReadZoneAttributesByZoneRow, error) {
	rows, err := q.db.QueryContext(ctx, readZoneAttributesByZone, arg.Zone, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadZoneAttributesByZoneRow
	for rows.Next() {
		var i ReadZoneAttributesByZoneRow
		if err := rows.Scan(
			&i.ID,
			&i.Zone,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateZoneAttributeName = `-- name: UpdateZoneAttributeName :exec

UPDATE
	attributes
SET
	name = ?1
WHERE
	entity = (SELECT id FROM entities WHERE name = 'zone')
	AND object = (SELECT id FROM zones z WHERE z.name = ?2)
	AND attributes.name = ?3
`

type UpdateZoneAttributeNameParams struct {
	Name string
	Zone string
	Attr string
}

// UPDATE
//
//	UPDATE
//		attributes
//	SET
//		name = ?1
//	WHERE
//		entity = (SELECT id FROM entities WHERE name = 'zone')
//		AND object = (SELECT id FROM zones z WHERE z.name = ?2)
//		AND attributes.name = ?3
func (q *Queries) UpdateZoneAttributeName(ctx context.Context, arg UpdateZoneAttributeNameParams) error {
	_, err := q.db.ExecContext(ctx, updateZoneAttributeName, arg.Name, arg.Zone, arg.Attr)
	return err
}

const updateZoneAttributeProtection = `-- name: UpdateZoneAttributeProtection :exec
UPDATE
	attributes
SET
	is_protected = ?1
WHERE
	entity = (SELECT id FROM entities WHERE name = 'zone')
	AND object = (SELECT id FROM zones z WHERE z.name = ?2)
	AND attributes.name = ?3
`

type UpdateZoneAttributeProtectionParams struct {
	IsProtected int64
	Zone        string
	Attr        string
}

// UpdateZoneAttributeProtection
//
//	UPDATE
//		attributes
//	SET
//		is_protected = ?1
//	WHERE
//		entity = (SELECT id FROM entities WHERE name = 'zone')
//		AND object = (SELECT id FROM zones z WHERE z.name = ?2)
//		AND attributes.name = ?3
func (q *Queries) UpdateZoneAttributeProtection(ctx context.Context, arg UpdateZoneAttributeProtectionParams) error {
	_, err := q.db.ExecContext(ctx, updateZoneAttributeProtection, arg.IsProtected, arg.Zone, arg.Attr)
	return err
}

const updateZoneAttributeValue = `-- name: UpdateZoneAttributeValue :exec
UPDATE
	attributes
SET
	value = ?1
WHERE
	entity = (SELECT id FROM entities WHERE name = 'zone')
	AND object = (SELECT id FROM zones z WHERE z.name = ?2)
	AND attributes.name = ?3
`

type UpdateZoneAttributeValueParams struct {
	Value *string
	Zone  string
	Attr  string
}

// UpdateZoneAttributeValue
//
//	UPDATE
//		attributes
//	SET
//		value = ?1
//	WHERE
//		entity = (SELECT id FROM entities WHERE name = 'zone')
//		AND object = (SELECT id FROM zones z WHERE z.name = ?2)
//		AND attributes.name = ?3
func (q *Queries) UpdateZoneAttributeValue(ctx context.Context, arg UpdateZoneAttributeValueParams) error {
	_, err := q.db.ExecContext(ctx, updateZoneAttributeValue, arg.Value, arg.Zone, arg.Attr)
	return err
}
