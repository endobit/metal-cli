// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec

INSERT INTO users (
	name
)
VALUES (
	?1
)
`

type CreateUserParams struct {
	Name string
}

// CREATE
//
//	INSERT INTO users (
//		name
//	)
//	VALUES (
//		?1
//	)
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Name)
	return err
}

const deleteUser = `-- name: DeleteUser :exec

DELETE FROM
	users
WHERE
	id = ?1
`

type DeleteUserParams struct {
	ID int64
}

// DELETE
//
//	DELETE FROM
//		users
//	WHERE
//		id = ?1
func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteUser, arg.ID)
	return err
}

const readUser = `-- name: ReadUser :one
SELECT
	id,
	name,
	password_hash,
	email
FROM
	users
WHERE
	name = ?1
`

type ReadUserParams struct {
	User string
}

// ReadUser
//
//	SELECT
//		id,
//		name,
//		password_hash,
//		email
//	FROM
//		users
//	WHERE
//		name = ?1
func (q *Queries) ReadUser(ctx context.Context, arg ReadUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, readUser, arg.User)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.Email,
	)
	return i, err
}

const readUsers = `-- name: ReadUsers :many

SELECT
	id,
	name,
	email
FROM
	users
ORDER BY
	name
LIMIT
	COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
`

type ReadUsersParams struct {
	Offset interface{}
	Limit  interface{}
}

type ReadUsersRow struct {
	ID    int64
	Name  string
	Email *string
}

// READ
//
//	SELECT
//		id,
//		name,
//		email
//	FROM
//		users
//	ORDER BY
//		name
//	LIMIT
//		COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
func (q *Queries) ReadUsers(ctx context.Context, arg ReadUsersParams) ([]ReadUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, readUsers, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadUsersRow
	for rows.Next() {
		var i ReadUsersRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readUsersByGlob = `-- name: ReadUsersByGlob :many
SELECT
	id,
	name,
	password_hash,
	email
FROM
	users
WHERE
	name GLOB ?1
ORDER BY
	name
LIMIT
	COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
`

type ReadUsersByGlobParams struct {
	Glob   string
	Offset interface{}
	Limit  interface{}
}

// ReadUsersByGlob
//
//	SELECT
//		id,
//		name,
//		password_hash,
//		email
//	FROM
//		users
//	WHERE
//		name GLOB ?1
//	ORDER BY
//		name
//	LIMIT
//		COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
func (q *Queries) ReadUsersByGlob(ctx context.Context, arg ReadUsersByGlobParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, readUsersByGlob, arg.Glob, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PasswordHash,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserEmail = `-- name: UpdateUserEmail :exec

UPDATE
	users
SET
	email = ?1
WHERE
	name = ?2
`

type UpdateUserEmailParams struct {
	Email *string
	User  string
}

// UPDATE
//
//	UPDATE
//		users
//	SET
//		email = ?1
//	WHERE
//		name = ?2
func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateUserEmail, arg.Email, arg.User)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE
	users
SET
	password_hash = ?1
WHERE
	name = ?2
`

type UpdateUserPasswordParams struct {
	PasswordHash string
	User         string
}

// UpdateUserPassword
//
//	UPDATE
//		users
//	SET
//		password_hash = ?1
//	WHERE
//		name = ?2
func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.PasswordHash, arg.User)
	return err
}
