// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: appliance_attr.sql

package db

import (
	"context"
)

const createApplianceAttribute = `-- name: CreateApplianceAttribute :exec

INSERT INTO attributes (
	entity,
	object,
	name
)
VALUES (
	(SELECT id FROM entities WHERE name = 'appliance'),
	(SELECT id FROM appliances app WHERE app.name = ?1 AND zone = (SELECT id FROM zones z WHERE z.name = ?2)),
	?3
)
`

type CreateApplianceAttributeParams struct {
	Appliance string
	Zone      string
	Name      string
}

// CREATE
//
//	INSERT INTO attributes (
//		entity,
//		object,
//		name
//	)
//	VALUES (
//		(SELECT id FROM entities WHERE name = 'appliance'),
//		(SELECT id FROM appliances app WHERE app.name = ?1 AND zone = (SELECT id FROM zones z WHERE z.name = ?2)),
//		?3
//	)
func (q *Queries) CreateApplianceAttribute(ctx context.Context, arg CreateApplianceAttributeParams) error {
	_, err := q.db.ExecContext(ctx, createApplianceAttribute, arg.Appliance, arg.Zone, arg.Name)
	return err
}

const readApplianceAttribute = `-- name: ReadApplianceAttribute :one
SELECT
	a.id,
	app.name AS appliance,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
JOIN
	appliances app ON a.object = app.id
JOIN
	zones z ON app.zone = z.id
WHERE
	e.name = 'appliance'
	AND z.name = ?1
	AND app.name = ?2
	AND a.name = ?3
`

type ReadApplianceAttributeParams struct {
	Zone      string
	Appliance string
	Attr      string
}

type ReadApplianceAttributeRow struct {
	ID          int64
	Appliance   string
	Name        string
	Value       *string
	IsProtected int64
}

// ReadApplianceAttribute
//
//	SELECT
//		a.id,
//		app.name AS appliance,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	JOIN
//		appliances app ON a.object = app.id
//	JOIN
//		zones z ON app.zone = z.id
//	WHERE
//		e.name = 'appliance'
//		AND z.name = ?1
//		AND app.name = ?2
//		AND a.name = ?3
func (q *Queries) ReadApplianceAttribute(ctx context.Context, arg ReadApplianceAttributeParams) (ReadApplianceAttributeRow, error) {
	row := q.db.QueryRowContext(ctx, readApplianceAttribute, arg.Zone, arg.Appliance, arg.Attr)
	var i ReadApplianceAttributeRow
	err := row.Scan(
		&i.ID,
		&i.Appliance,
		&i.Name,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const readApplianceAttributes = `-- name: ReadApplianceAttributes :many

SELECT
	a.id,
	app.name AS appliance,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
JOIN
	appliances app ON a.object = app.id
JOIN
	zones z ON app.zone = z.id
WHERE
	e.name = 'appliance'
ORDER BY
        z.name,
	app.name,
	a.name
LIMIT
	COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
`

type ReadApplianceAttributesParams struct {
	Offset interface{}
	Limit  interface{}
}

type ReadApplianceAttributesRow struct {
	ID          int64
	Appliance   string
	Name        string
	Value       *string
	IsProtected int64
}

// READ
//
//	SELECT
//		a.id,
//		app.name AS appliance,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	JOIN
//		appliances app ON a.object = app.id
//	JOIN
//		zones z ON app.zone = z.id
//	WHERE
//		e.name = 'appliance'
//	ORDER BY
//	        z.name,
//		app.name,
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
func (q *Queries) ReadApplianceAttributes(ctx context.Context, arg ReadApplianceAttributesParams) ([]ReadApplianceAttributesRow, error) {
	rows, err := q.db.QueryContext(ctx, readApplianceAttributes, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadApplianceAttributesRow
	for rows.Next() {
		var i ReadApplianceAttributesRow
		if err := rows.Scan(
			&i.ID,
			&i.Appliance,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readApplianceAttributesByAppliance = `-- name: ReadApplianceAttributesByAppliance :many
SELECT
	a.id,
	app.name AS appliance,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
JOIN
	appliances app ON a.object = app.id
JOIN
	zones z ON app.zone = z.id
WHERE
	e.name = 'appliance'
	AND z.name = ?1
	AND app.name = ?2
ORDER BY
	app.name,
	a.name
LIMIT
	COALESCE(NULLIF(?4, 0), 100) OFFSET COALESCE(?3, 0)
`

type ReadApplianceAttributesByApplianceParams struct {
	Zone      string
	Appliance string
	Offset    interface{}
	Limit     interface{}
}

type ReadApplianceAttributesByApplianceRow struct {
	ID          int64
	Appliance   string
	Name        string
	Value       *string
	IsProtected int64
}

// ReadApplianceAttributesByAppliance
//
//	SELECT
//		a.id,
//		app.name AS appliance,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	JOIN
//		appliances app ON a.object = app.id
//	JOIN
//		zones z ON app.zone = z.id
//	WHERE
//		e.name = 'appliance'
//		AND z.name = ?1
//		AND app.name = ?2
//	ORDER BY
//		app.name,
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?4, 0), 100) OFFSET COALESCE(?3, 0)
func (q *Queries) ReadApplianceAttributesByAppliance(ctx context.Context, arg ReadApplianceAttributesByApplianceParams) ([]ReadApplianceAttributesByApplianceRow, error) {
	rows, err := q.db.QueryContext(ctx, readApplianceAttributesByAppliance,
		arg.Zone,
		arg.Appliance,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadApplianceAttributesByApplianceRow
	for rows.Next() {
		var i ReadApplianceAttributesByApplianceRow
		if err := rows.Scan(
			&i.ID,
			&i.Appliance,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readApplianceAttributesByGlob = `-- name: ReadApplianceAttributesByGlob :many
SELECT
	a.id,
	app.name AS appliance,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
JOIN
	appliances app ON a.object = app.id
JOIN
	zones z ON app.zone = z.id
WHERE
	e.name = 'appliance'
	AND z.name = ?1
	AND app.name = ?2
	AND a.name GLOB ?3
ORDER BY
	app.name,
	a.name
LIMIT
	COALESCE(NULLIF(?5, 0), 100) OFFSET COALESCE(?4, 0)
`

type ReadApplianceAttributesByGlobParams struct {
	Zone      string
	Appliance string
	Glob      string
	Offset    interface{}
	Limit     interface{}
}

type ReadApplianceAttributesByGlobRow struct {
	ID          int64
	Appliance   string
	Name        string
	Value       *string
	IsProtected int64
}

// ReadApplianceAttributesByGlob
//
//	SELECT
//		a.id,
//		app.name AS appliance,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	JOIN
//		appliances app ON a.object = app.id
//	JOIN
//		zones z ON app.zone = z.id
//	WHERE
//		e.name = 'appliance'
//		AND z.name = ?1
//		AND app.name = ?2
//		AND a.name GLOB ?3
//	ORDER BY
//		app.name,
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?5, 0), 100) OFFSET COALESCE(?4, 0)
func (q *Queries) ReadApplianceAttributesByGlob(ctx context.Context, arg ReadApplianceAttributesByGlobParams) ([]ReadApplianceAttributesByGlobRow, error) {
	rows, err := q.db.QueryContext(ctx, readApplianceAttributesByGlob,
		arg.Zone,
		arg.Appliance,
		arg.Glob,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadApplianceAttributesByGlobRow
	for rows.Next() {
		var i ReadApplianceAttributesByGlobRow
		if err := rows.Scan(
			&i.ID,
			&i.Appliance,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readApplianceAttributesByZone = `-- name: ReadApplianceAttributesByZone :many
SELECT
	a.id,
	app.name AS appliance,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
JOIN
	appliances app ON a.object = app.id
JOIN
	zones z ON app.zone = z.id
WHERE
	e.name = 'appliance'
	AND z.name = ?1
ORDER BY
	z.name,
	app.name,
	a.name
LIMIT
	COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
`

type ReadApplianceAttributesByZoneParams struct {
	Zone   string
	Offset interface{}
	Limit  interface{}
}

type ReadApplianceAttributesByZoneRow struct {
	ID          int64
	Appliance   string
	Name        string
	Value       *string
	IsProtected int64
}

// ReadApplianceAttributesByZone
//
//	SELECT
//		a.id,
//		app.name AS appliance,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	JOIN
//		appliances app ON a.object = app.id
//	JOIN
//		zones z ON app.zone = z.id
//	WHERE
//		e.name = 'appliance'
//		AND z.name = ?1
//	ORDER BY
//		z.name,
//		app.name,
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
func (q *Queries) ReadApplianceAttributesByZone(ctx context.Context, arg ReadApplianceAttributesByZoneParams) ([]ReadApplianceAttributesByZoneRow, error) {
	rows, err := q.db.QueryContext(ctx, readApplianceAttributesByZone, arg.Zone, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadApplianceAttributesByZoneRow
	for rows.Next() {
		var i ReadApplianceAttributesByZoneRow
		if err := rows.Scan(
			&i.ID,
			&i.Appliance,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApplianceAttributeName = `-- name: UpdateApplianceAttributeName :exec

UPDATE
	attributes
SET
	name = ?1
WHERE
	entity = (SELECT id FROM entities WHERE name = 'appliance')
	AND object = (
	    SELECT
		id
	    FROM
		appliances app
	    WHERE
	    	app.name = ?2
	    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
	)
	AND attributes.name = ?4
`

type UpdateApplianceAttributeNameParams struct {
	Name      string
	Appliance string
	Zone      string
	Attr      string
}

// UPDATE
//
//	UPDATE
//		attributes
//	SET
//		name = ?1
//	WHERE
//		entity = (SELECT id FROM entities WHERE name = 'appliance')
//		AND object = (
//		    SELECT
//			id
//		    FROM
//			appliances app
//		    WHERE
//		    	app.name = ?2
//		    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
//		)
//		AND attributes.name = ?4
func (q *Queries) UpdateApplianceAttributeName(ctx context.Context, arg UpdateApplianceAttributeNameParams) error {
	_, err := q.db.ExecContext(ctx, updateApplianceAttributeName,
		arg.Name,
		arg.Appliance,
		arg.Zone,
		arg.Attr,
	)
	return err
}

const updateApplianceAttributeProtection = `-- name: UpdateApplianceAttributeProtection :exec
UPDATE
	attributes
SET
	is_protected = ?1
WHERE
	entity = (SELECT id FROM entities WHERE name = 'appliance')
	AND object = (
	    SELECT
		id
	    FROM
		appliances app
	    WHERE
	    	app.name = ?2
	    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
	)
	AND attributes.name = ?4
`

type UpdateApplianceAttributeProtectionParams struct {
	IsProtected int64
	Appliance   string
	Zone        string
	Attr        string
}

// UpdateApplianceAttributeProtection
//
//	UPDATE
//		attributes
//	SET
//		is_protected = ?1
//	WHERE
//		entity = (SELECT id FROM entities WHERE name = 'appliance')
//		AND object = (
//		    SELECT
//			id
//		    FROM
//			appliances app
//		    WHERE
//		    	app.name = ?2
//		    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
//		)
//		AND attributes.name = ?4
func (q *Queries) UpdateApplianceAttributeProtection(ctx context.Context, arg UpdateApplianceAttributeProtectionParams) error {
	_, err := q.db.ExecContext(ctx, updateApplianceAttributeProtection,
		arg.IsProtected,
		arg.Appliance,
		arg.Zone,
		arg.Attr,
	)
	return err
}

const updateApplianceAttributeValue = `-- name: UpdateApplianceAttributeValue :exec
UPDATE
	attributes
SET
	value = ?1
WHERE
	entity = (SELECT id FROM entities WHERE name = 'appliance')
	AND object = (
	    SELECT
		id
	    FROM
		appliances app
	    WHERE
	    	app.name = ?2
	    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
	)
	AND attributes.name = ?4
`

type UpdateApplianceAttributeValueParams struct {
	Value     *string
	Appliance string
	Zone      string
	Attr      string
}

// UpdateApplianceAttributeValue
//
//	UPDATE
//		attributes
//	SET
//		value = ?1
//	WHERE
//		entity = (SELECT id FROM entities WHERE name = 'appliance')
//		AND object = (
//		    SELECT
//			id
//		    FROM
//			appliances app
//		    WHERE
//		    	app.name = ?2
//		    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
//		)
//		AND attributes.name = ?4
func (q *Queries) UpdateApplianceAttributeValue(ctx context.Context, arg UpdateApplianceAttributeValueParams) error {
	_, err := q.db.ExecContext(ctx, updateApplianceAttributeValue,
		arg.Value,
		arg.Appliance,
		arg.Zone,
		arg.Attr,
	)
	return err
}
