// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: attr.sql

package db

import (
	"context"
)

const createAttribute = `-- name: CreateAttribute :one



INSERT INTO attributes (
	entity,
	object,
	name
)
VALUES (
	(SELECT id FROM entities e WHERE e.name = ?1),
	?2,
	?3
)
RETURNING id
`

type CreateAttributeParams struct {
	Entity string
	Object *int64
	Name   string
}

// TODO: Remove unused queries
//
// # CREATE
//
//	INSERT INTO attributes (
//		entity,
//		object,
//		name
//	)
//	VALUES (
//		(SELECT id FROM entities e WHERE e.name = ?1),
//		?2,
//		?3
//	)
//	RETURNING id
func (q *Queries) CreateAttribute(ctx context.Context, arg CreateAttributeParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createAttribute, arg.Entity, arg.Object, arg.Name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteAttribute = `-- name: DeleteAttribute :exec

DELETE FROM
	attributes
WHERE
	id = ?1
`

type DeleteAttributeParams struct {
	ID int64
}

// DELETE
//
// Note there is no cascade delete on object deletion.
//
//	DELETE FROM
//		attributes
//	WHERE
//		id = ?1
func (q *Queries) DeleteAttribute(ctx context.Context, arg DeleteAttributeParams) error {
	_, err := q.db.ExecContext(ctx, deleteAttribute, arg.ID)
	return err
}

const readAttributes = `-- name: ReadAttributes :many


SELECT
	a.id,
	a.entity AS entity_id,
	e.name AS entity_name,	-- global, zone, cluster, etc
	a.object,		-- object id, or NULL for global attributes
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
WHERE
	a.entity = (SELECT id FROM entities e WHERE e.name = ?1)
ORDER BY
	a.name
LIMIT
	COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
`

type ReadAttributesParams struct {
	Entity string
	Offset interface{}
	Limit  interface{}
}

type ReadAttributesRow struct {
	ID          int64
	EntityID    int64
	EntityName  string
	Object      *int64
	Name        string
	Value       *string
	IsProtected int64
}

// READ
//
// Reading attributes directly from this table is not really useful.
//
//	SELECT
//		a.id,
//		a.entity AS entity_id,
//		e.name AS entity_name,	-- global, zone, cluster, etc
//		a.object,		-- object id, or NULL for global attributes
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	WHERE
//		a.entity = (SELECT id FROM entities e WHERE e.name = ?1)
//	ORDER BY
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
func (q *Queries) ReadAttributes(ctx context.Context, arg ReadAttributesParams) ([]ReadAttributesRow, error) {
	rows, err := q.db.QueryContext(ctx, readAttributes, arg.Entity, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadAttributesRow
	for rows.Next() {
		var i ReadAttributesRow
		if err := rows.Scan(
			&i.ID,
			&i.EntityID,
			&i.EntityName,
			&i.Object,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAttribute = `-- name: UpdateAttribute :exec

UPDATE
	attributes
SET
	value = ?1,
	is_protected = ?2
WHERE
	entity = (SELECT id FROM entities e WHERE e.name = ?3)
	AND object = ?4
	AND attributes.name = ?5
`

type UpdateAttributeParams struct {
	Value       *string
	IsProtected int64
	Entity      string
	Object      *int64
	Name        string
}

// UPDATE
//
//	UPDATE
//		attributes
//	SET
//		value = ?1,
//		is_protected = ?2
//	WHERE
//		entity = (SELECT id FROM entities e WHERE e.name = ?3)
//		AND object = ?4
//		AND attributes.name = ?5
func (q *Queries) UpdateAttribute(ctx context.Context, arg UpdateAttributeParams) error {
	_, err := q.db.ExecContext(ctx, updateAttribute,
		arg.Value,
		arg.IsProtected,
		arg.Entity,
		arg.Object,
		arg.Name,
	)
	return err
}

const updateAttributeName = `-- name: UpdateAttributeName :exec
UPDATE
	attributes
SET
	name = ?1
WHERE
	entity = (SELECT id FROM entities e WHERE e.name = ?2)
	AND object = ?3
	AND attributes.name = ?4
`

type UpdateAttributeNameParams struct {
	NewName string
	Entity  string
	Object  *int64
	Name    string
}

// UpdateAttributeName
//
//	UPDATE
//		attributes
//	SET
//		name = ?1
//	WHERE
//		entity = (SELECT id FROM entities e WHERE e.name = ?2)
//		AND object = ?3
//		AND attributes.name = ?4
func (q *Queries) UpdateAttributeName(ctx context.Context, arg UpdateAttributeNameParams) error {
	_, err := q.db.ExecContext(ctx, updateAttributeName,
		arg.NewName,
		arg.Entity,
		arg.Object,
		arg.Name,
	)
	return err
}

const updateAttributeProtection = `-- name: UpdateAttributeProtection :exec
UPDATE
	attributes
SET
	is_protected = ?1
WHERE
	entity = (SELECT id FROM entities e WHERE e.name = ?2)
	AND object = ?3
	AND attributes.name = ?4
`

type UpdateAttributeProtectionParams struct {
	IsProtected int64
	Entity      string
	Object      *int64
	Name        string
}

// UpdateAttributeProtection
//
//	UPDATE
//		attributes
//	SET
//		is_protected = ?1
//	WHERE
//		entity = (SELECT id FROM entities e WHERE e.name = ?2)
//		AND object = ?3
//		AND attributes.name = ?4
func (q *Queries) UpdateAttributeProtection(ctx context.Context, arg UpdateAttributeProtectionParams) error {
	_, err := q.db.ExecContext(ctx, updateAttributeProtection,
		arg.IsProtected,
		arg.Entity,
		arg.Object,
		arg.Name,
	)
	return err
}

const updateAttributeValue = `-- name: UpdateAttributeValue :exec
UPDATE
	attributes
SET
	value = ?1
WHERE
	entity = (SELECT id FROM entities e WHERE e.name = ?2)
	AND object = ?3
	AND attributes.name = ?4
`

type UpdateAttributeValueParams struct {
	Value  *string
	Entity string
	Object *int64
	Name   string
}

// UpdateAttributeValue
//
//	UPDATE
//		attributes
//	SET
//		value = ?1
//	WHERE
//		entity = (SELECT id FROM entities e WHERE e.name = ?2)
//		AND object = ?3
//		AND attributes.name = ?4
func (q *Queries) UpdateAttributeValue(ctx context.Context, arg UpdateAttributeValueParams) error {
	_, err := q.db.ExecContext(ctx, updateAttributeValue,
		arg.Value,
		arg.Entity,
		arg.Object,
		arg.Name,
	)
	return err
}
