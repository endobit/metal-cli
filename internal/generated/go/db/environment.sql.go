// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: environment.sql

package db

import (
	"context"
)

const createEnvironment = `-- name: CreateEnvironment :exec

INSERT INTO environments (
	name,
	zone
)
VALUES (
	?1,
	(SELECT id FROM zones z WHERE z.name = ?2)
)
`

type CreateEnvironmentParams struct {
	Name string
	Zone string
}

// CREATE
//
//	INSERT INTO environments (
//		name,
//		zone
//	)
//	VALUES (
//		?1,
//		(SELECT id FROM zones z WHERE z.name = ?2)
//	)
func (q *Queries) CreateEnvironment(ctx context.Context, arg CreateEnvironmentParams) error {
	_, err := q.db.ExecContext(ctx, createEnvironment, arg.Name, arg.Zone)
	return err
}

const deleteEnvironment = `-- name: DeleteEnvironment :exec

DELETE FROM
	environments
WHERE
	environments.id = ?1
`

type DeleteEnvironmentParams struct {
	ID int64
}

// DELETE
//
//	DELETE FROM
//		environments
//	WHERE
//		environments.id = ?1
func (q *Queries) DeleteEnvironment(ctx context.Context, arg DeleteEnvironmentParams) error {
	_, err := q.db.ExecContext(ctx, deleteEnvironment, arg.ID)
	return err
}

const readEnvironment = `-- name: ReadEnvironment :one
SELECT
	e.id,
	e.name,
	z.name AS zone
FROM
	environments e
JOIN
	zones z ON e.zone = z.id
WHERE
	e.name = ?1
	AND z.name = ?2
`

type ReadEnvironmentParams struct {
	Name string
	Zone string
}

type ReadEnvironmentRow struct {
	ID   int64
	Name string
	Zone string
}

// ReadEnvironment
//
//	SELECT
//		e.id,
//		e.name,
//		z.name AS zone
//	FROM
//		environments e
//	JOIN
//		zones z ON e.zone = z.id
//	WHERE
//		e.name = ?1
//		AND z.name = ?2
func (q *Queries) ReadEnvironment(ctx context.Context, arg ReadEnvironmentParams) (ReadEnvironmentRow, error) {
	row := q.db.QueryRowContext(ctx, readEnvironment, arg.Name, arg.Zone)
	var i ReadEnvironmentRow
	err := row.Scan(&i.ID, &i.Name, &i.Zone)
	return i, err
}

const readEnvironments = `-- name: ReadEnvironments :many

SELECT
	e.id,
	e.name,
	z.name AS zone
FROM
	environments e
JOIN
	zones z ON e.zone = z.id
ORDER BY
	z.name,
	e.name
LIMIT
	COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
`

type ReadEnvironmentsParams struct {
	Offset interface{}
	Limit  interface{}
}

type ReadEnvironmentsRow struct {
	ID   int64
	Name string
	Zone string
}

// READ
//
//	SELECT
//		e.id,
//		e.name,
//		z.name AS zone
//	FROM
//		environments e
//	JOIN
//		zones z ON e.zone = z.id
//	ORDER BY
//		z.name,
//		e.name
//	LIMIT
//		COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
func (q *Queries) ReadEnvironments(ctx context.Context, arg ReadEnvironmentsParams) ([]ReadEnvironmentsRow, error) {
	rows, err := q.db.QueryContext(ctx, readEnvironments, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadEnvironmentsRow
	for rows.Next() {
		var i ReadEnvironmentsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Zone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readEnvironmentsByGlob = `-- name: ReadEnvironmentsByGlob :many
SELECT
	e.id,
	e.name,
	z.name AS zone
FROM
	environments e
JOIN
	zones z ON e.zone = z.id
WHERE
	z.name = ?1
	AND e.name GLOB ?2
ORDER BY
	e.name
LIMIT
	COALESCE(NULLIF(?4, 0), 100) OFFSET COALESCE(?3, 0)
`

type ReadEnvironmentsByGlobParams struct {
	Zone   string
	Glob   string
	Offset interface{}
	Limit  interface{}
}

type ReadEnvironmentsByGlobRow struct {
	ID   int64
	Name string
	Zone string
}

// ReadEnvironmentsByGlob
//
//	SELECT
//		e.id,
//		e.name,
//		z.name AS zone
//	FROM
//		environments e
//	JOIN
//		zones z ON e.zone = z.id
//	WHERE
//		z.name = ?1
//		AND e.name GLOB ?2
//	ORDER BY
//		e.name
//	LIMIT
//		COALESCE(NULLIF(?4, 0), 100) OFFSET COALESCE(?3, 0)
func (q *Queries) ReadEnvironmentsByGlob(ctx context.Context, arg ReadEnvironmentsByGlobParams) ([]ReadEnvironmentsByGlobRow, error) {
	rows, err := q.db.QueryContext(ctx, readEnvironmentsByGlob,
		arg.Zone,
		arg.Glob,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadEnvironmentsByGlobRow
	for rows.Next() {
		var i ReadEnvironmentsByGlobRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Zone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readEnvironmentsByZone = `-- name: ReadEnvironmentsByZone :many
SELECT
	e.id,
	e.name,
	z.name AS zone
FROM
	environments e
JOIN
	zones z ON e.zone = z.id
WHERE
	z.name = ?1
ORDER BY
	e.name
LIMIT
	COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
`

type ReadEnvironmentsByZoneParams struct {
	Zone   string
	Offset interface{}
	Limit  interface{}
}

type ReadEnvironmentsByZoneRow struct {
	ID   int64
	Name string
	Zone string
}

// ReadEnvironmentsByZone
//
//	SELECT
//		e.id,
//		e.name,
//		z.name AS zone
//	FROM
//		environments e
//	JOIN
//		zones z ON e.zone = z.id
//	WHERE
//		z.name = ?1
//	ORDER BY
//		e.name
//	LIMIT
//		COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
func (q *Queries) ReadEnvironmentsByZone(ctx context.Context, arg ReadEnvironmentsByZoneParams) ([]ReadEnvironmentsByZoneRow, error) {
	rows, err := q.db.QueryContext(ctx, readEnvironmentsByZone, arg.Zone, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadEnvironmentsByZoneRow
	for rows.Next() {
		var i ReadEnvironmentsByZoneRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Zone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEnvironmentName = `-- name: UpdateEnvironmentName :exec

UPDATE
	environments
SET
	name = ?1
WHERE
	environments.name = ?2
	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
`

type UpdateEnvironmentNameParams struct {
	Name        string
	Environment string
	Zone        string
}

// UPDATE
//
//	UPDATE
//		environments
//	SET
//		name = ?1
//	WHERE
//		environments.name = ?2
//		AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
func (q *Queries) UpdateEnvironmentName(ctx context.Context, arg UpdateEnvironmentNameParams) error {
	_, err := q.db.ExecContext(ctx, updateEnvironmentName, arg.Name, arg.Environment, arg.Zone)
	return err
}
