// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cluster_attr.sql

package db

import (
	"context"
)

const createClusterAttribute = `-- name: CreateClusterAttribute :exec

INSERT INTO attributes (
	entity,
	object,
	name
)
VALUES (
	(SELECT id FROM entities WHERE name = 'cluster'),
	(SELECT id FROM clusters c WHERE c.name = ?1 AND zone = (SELECT id FROM zones z WHERE z.name = ?2)),
	?3
)
`

type CreateClusterAttributeParams struct {
	Cluster string
	Zone    string
	Name    string
}

// CREATE
//
//	INSERT INTO attributes (
//		entity,
//		object,
//		name
//	)
//	VALUES (
//		(SELECT id FROM entities WHERE name = 'cluster'),
//		(SELECT id FROM clusters c WHERE c.name = ?1 AND zone = (SELECT id FROM zones z WHERE z.name = ?2)),
//		?3
//	)
func (q *Queries) CreateClusterAttribute(ctx context.Context, arg CreateClusterAttributeParams) error {
	_, err := q.db.ExecContext(ctx, createClusterAttribute, arg.Cluster, arg.Zone, arg.Name)
	return err
}

const readClusterAttribute = `-- name: ReadClusterAttribute :one
SELECT
	a.id,
	c.name AS cluster,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
JOIN
	clusters c ON a.object = c.id
JOIN
	zones z ON c.zone = z.id
WHERE
	e.name = 'cluster'
	AND z.name = ?1
	AND c.name = ?2
	AND a.name = ?3
`

type ReadClusterAttributeParams struct {
	Zone    string
	Cluster string
	Attr    string
}

type ReadClusterAttributeRow struct {
	ID          int64
	Cluster     string
	Name        string
	Value       *string
	IsProtected int64
}

// ReadClusterAttribute
//
//	SELECT
//		a.id,
//		c.name AS cluster,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	JOIN
//		clusters c ON a.object = c.id
//	JOIN
//		zones z ON c.zone = z.id
//	WHERE
//		e.name = 'cluster'
//		AND z.name = ?1
//		AND c.name = ?2
//		AND a.name = ?3
func (q *Queries) ReadClusterAttribute(ctx context.Context, arg ReadClusterAttributeParams) (ReadClusterAttributeRow, error) {
	row := q.db.QueryRowContext(ctx, readClusterAttribute, arg.Zone, arg.Cluster, arg.Attr)
	var i ReadClusterAttributeRow
	err := row.Scan(
		&i.ID,
		&i.Cluster,
		&i.Name,
		&i.Value,
		&i.IsProtected,
	)
	return i, err
}

const readClusterAttributes = `-- name: ReadClusterAttributes :many

SELECT
	a.id,
	c.name AS cluster,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
JOIN
	clusters c ON a.object = c.id
JOIN
	zones z ON c.zone = z.id
WHERE
	e.name = 'cluster'
ORDER BY
        z.name,
	c.name,
	a.name
LIMIT
	COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
`

type ReadClusterAttributesParams struct {
	Offset interface{}
	Limit  interface{}
}

type ReadClusterAttributesRow struct {
	ID          int64
	Cluster     string
	Name        string
	Value       *string
	IsProtected int64
}

// READ
//
//	SELECT
//		a.id,
//		c.name AS cluster,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	JOIN
//		clusters c ON a.object = c.id
//	JOIN
//		zones z ON c.zone = z.id
//	WHERE
//		e.name = 'cluster'
//	ORDER BY
//	        z.name,
//		c.name,
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
func (q *Queries) ReadClusterAttributes(ctx context.Context, arg ReadClusterAttributesParams) ([]ReadClusterAttributesRow, error) {
	rows, err := q.db.QueryContext(ctx, readClusterAttributes, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadClusterAttributesRow
	for rows.Next() {
		var i ReadClusterAttributesRow
		if err := rows.Scan(
			&i.ID,
			&i.Cluster,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readClusterAttributesByCluster = `-- name: ReadClusterAttributesByCluster :many
SELECT
	a.id,
	c.name AS cluster,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
JOIN
	clusters c ON a.object = c.id
JOIN
	zones z ON c.zone = z.id
WHERE
	e.name = 'cluster'
	AND z.name = ?1
	AND c.name = ?2
ORDER BY
	c.name,
	a.name
LIMIT
	COALESCE(NULLIF(?4, 0), 100) OFFSET COALESCE(?3, 0)
`

type ReadClusterAttributesByClusterParams struct {
	Zone    string
	Cluster string
	Offset  interface{}
	Limit   interface{}
}

type ReadClusterAttributesByClusterRow struct {
	ID          int64
	Cluster     string
	Name        string
	Value       *string
	IsProtected int64
}

// ReadClusterAttributesByCluster
//
//	SELECT
//		a.id,
//		c.name AS cluster,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	JOIN
//		clusters c ON a.object = c.id
//	JOIN
//		zones z ON c.zone = z.id
//	WHERE
//		e.name = 'cluster'
//		AND z.name = ?1
//		AND c.name = ?2
//	ORDER BY
//		c.name,
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?4, 0), 100) OFFSET COALESCE(?3, 0)
func (q *Queries) ReadClusterAttributesByCluster(ctx context.Context, arg ReadClusterAttributesByClusterParams) ([]ReadClusterAttributesByClusterRow, error) {
	rows, err := q.db.QueryContext(ctx, readClusterAttributesByCluster,
		arg.Zone,
		arg.Cluster,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadClusterAttributesByClusterRow
	for rows.Next() {
		var i ReadClusterAttributesByClusterRow
		if err := rows.Scan(
			&i.ID,
			&i.Cluster,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readClusterAttributesByGlob = `-- name: ReadClusterAttributesByGlob :many
SELECT
	a.id,
	c.name AS cluster,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
JOIN
	clusters c ON a.object = c.id
JOIN
	zones z ON c.zone = z.id
WHERE
	e.name = 'cluster'
	AND z.name = ?1
	AND c.name = ?2
	AND a.name GLOB ?3
ORDER BY
	c.name,
	a.name
LIMIT
	COALESCE(NULLIF(?5, 0), 100) OFFSET COALESCE(?4, 0)
`

type ReadClusterAttributesByGlobParams struct {
	Zone    string
	Cluster string
	Glob    string
	Offset  interface{}
	Limit   interface{}
}

type ReadClusterAttributesByGlobRow struct {
	ID          int64
	Cluster     string
	Name        string
	Value       *string
	IsProtected int64
}

// ReadClusterAttributesByGlob
//
//	SELECT
//		a.id,
//		c.name AS cluster,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	JOIN
//		clusters c ON a.object = c.id
//	JOIN
//		zones z ON c.zone = z.id
//	WHERE
//		e.name = 'cluster'
//		AND z.name = ?1
//		AND c.name = ?2
//		AND a.name GLOB ?3
//	ORDER BY
//		c.name,
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?5, 0), 100) OFFSET COALESCE(?4, 0)
func (q *Queries) ReadClusterAttributesByGlob(ctx context.Context, arg ReadClusterAttributesByGlobParams) ([]ReadClusterAttributesByGlobRow, error) {
	rows, err := q.db.QueryContext(ctx, readClusterAttributesByGlob,
		arg.Zone,
		arg.Cluster,
		arg.Glob,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadClusterAttributesByGlobRow
	for rows.Next() {
		var i ReadClusterAttributesByGlobRow
		if err := rows.Scan(
			&i.ID,
			&i.Cluster,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readClusterAttributesByZone = `-- name: ReadClusterAttributesByZone :many
SELECT
	a.id,
	c.name AS cluster,
	a.name,
	a.value,
	a.is_protected
FROM
	attributes a
JOIN
	entities e ON a.entity = e.id
JOIN
	clusters c ON a.object = c.id
JOIN
	zones z ON c.zone = z.id
WHERE
	e.name = 'cluster'
	AND z.name = ?1
ORDER BY
	z.name,
	c.name,
	a.name
LIMIT
	COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
`

type ReadClusterAttributesByZoneParams struct {
	Zone   string
	Offset interface{}
	Limit  interface{}
}

type ReadClusterAttributesByZoneRow struct {
	ID          int64
	Cluster     string
	Name        string
	Value       *string
	IsProtected int64
}

// ReadClusterAttributesByZone
//
//	SELECT
//		a.id,
//		c.name AS cluster,
//		a.name,
//		a.value,
//		a.is_protected
//	FROM
//		attributes a
//	JOIN
//		entities e ON a.entity = e.id
//	JOIN
//		clusters c ON a.object = c.id
//	JOIN
//		zones z ON c.zone = z.id
//	WHERE
//		e.name = 'cluster'
//		AND z.name = ?1
//	ORDER BY
//		z.name,
//		c.name,
//		a.name
//	LIMIT
//		COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
func (q *Queries) ReadClusterAttributesByZone(ctx context.Context, arg ReadClusterAttributesByZoneParams) ([]ReadClusterAttributesByZoneRow, error) {
	rows, err := q.db.QueryContext(ctx, readClusterAttributesByZone, arg.Zone, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadClusterAttributesByZoneRow
	for rows.Next() {
		var i ReadClusterAttributesByZoneRow
		if err := rows.Scan(
			&i.ID,
			&i.Cluster,
			&i.Name,
			&i.Value,
			&i.IsProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClusterAttributeName = `-- name: UpdateClusterAttributeName :exec

UPDATE
	attributes
SET
	name = ?1
WHERE
	entity = (SELECT id FROM entities WHERE name = 'cluster')
	AND object = (
	    SELECT
		id
	    FROM
		clusters c
	    WHERE
	    	c.name = ?2
	    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
	)
	AND attributes.name = ?4
`

type UpdateClusterAttributeNameParams struct {
	Name    string
	Cluster string
	Zone    string
	Attr    string
}

// UPDATE
//
//	UPDATE
//		attributes
//	SET
//		name = ?1
//	WHERE
//		entity = (SELECT id FROM entities WHERE name = 'cluster')
//		AND object = (
//		    SELECT
//			id
//		    FROM
//			clusters c
//		    WHERE
//		    	c.name = ?2
//		    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
//		)
//		AND attributes.name = ?4
func (q *Queries) UpdateClusterAttributeName(ctx context.Context, arg UpdateClusterAttributeNameParams) error {
	_, err := q.db.ExecContext(ctx, updateClusterAttributeName,
		arg.Name,
		arg.Cluster,
		arg.Zone,
		arg.Attr,
	)
	return err
}

const updateClusterAttributeProtection = `-- name: UpdateClusterAttributeProtection :exec
UPDATE
	attributes
SET
	is_protected = ?1
WHERE
	entity = (SELECT id FROM entities WHERE name = 'cluster')
	AND object = (
	    SELECT
		id
	    FROM
		clusters c
	    WHERE
	    	c.name = ?2
	    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
	)
	AND attributes.name = ?4
`

type UpdateClusterAttributeProtectionParams struct {
	IsProtected int64
	Cluster     string
	Zone        string
	Attr        string
}

// UpdateClusterAttributeProtection
//
//	UPDATE
//		attributes
//	SET
//		is_protected = ?1
//	WHERE
//		entity = (SELECT id FROM entities WHERE name = 'cluster')
//		AND object = (
//		    SELECT
//			id
//		    FROM
//			clusters c
//		    WHERE
//		    	c.name = ?2
//		    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
//		)
//		AND attributes.name = ?4
func (q *Queries) UpdateClusterAttributeProtection(ctx context.Context, arg UpdateClusterAttributeProtectionParams) error {
	_, err := q.db.ExecContext(ctx, updateClusterAttributeProtection,
		arg.IsProtected,
		arg.Cluster,
		arg.Zone,
		arg.Attr,
	)
	return err
}

const updateClusterAttributeValue = `-- name: UpdateClusterAttributeValue :exec
UPDATE
	attributes
SET
	value = ?1
WHERE
	entity = (SELECT id FROM entities WHERE name = 'cluster')
	AND object = (
	    SELECT
		id
	    FROM
		clusters c
	    WHERE
	    	c.name = ?2
	    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
	)
	AND attributes.name = ?4
`

type UpdateClusterAttributeValueParams struct {
	Value   *string
	Cluster string
	Zone    string
	Attr    string
}

// UpdateClusterAttributeValue
//
//	UPDATE
//		attributes
//	SET
//		value = ?1
//	WHERE
//		entity = (SELECT id FROM entities WHERE name = 'cluster')
//		AND object = (
//		    SELECT
//			id
//		    FROM
//			clusters c
//		    WHERE
//		    	c.name = ?2
//		    	AND zone = (SELECT id FROM zones z WHERE z.name = ?3)
//		)
//		AND attributes.name = ?4
func (q *Queries) UpdateClusterAttributeValue(ctx context.Context, arg UpdateClusterAttributeValueParams) error {
	_, err := q.db.ExecContext(ctx, updateClusterAttributeValue,
		arg.Value,
		arg.Cluster,
		arg.Zone,
		arg.Attr,
	)
	return err
}
