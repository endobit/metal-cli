// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: role.sql

package db

import (
	"context"
)

const createRole = `-- name: CreateRole :exec

INSERT INTO roles (
	name
)
VALUES (
	?1
)
`

type CreateRoleParams struct {
	Name string
}

// CREATE
//
//	INSERT INTO roles (
//		name
//	)
//	VALUES (
//		?1
//	)
func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) error {
	_, err := q.db.ExecContext(ctx, createRole, arg.Name)
	return err
}

const deleteRole = `-- name: DeleteRole :exec

DELETE FROM
	roles
WHERE
	id = ?1
`

type DeleteRoleParams struct {
	ID int64
}

// DELETE
//
//	DELETE FROM
//		roles
//	WHERE
//		id = ?1
func (q *Queries) DeleteRole(ctx context.Context, arg DeleteRoleParams) error {
	_, err := q.db.ExecContext(ctx, deleteRole, arg.ID)
	return err
}

const readRole = `-- name: ReadRole :one
SELECT
	id,
	name,
	description
FROM
	roles
WHERE
	name = ?1
`

type ReadRoleParams struct {
	Role string
}

// ReadRole
//
//	SELECT
//		id,
//		name,
//		description
//	FROM
//		roles
//	WHERE
//		name = ?1
func (q *Queries) ReadRole(ctx context.Context, arg ReadRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, readRole, arg.Role)
	var i Role
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const readRoles = `-- name: ReadRoles :many

SELECT
	id,
	name,
	description
FROM
	roles
ORDER BY
	name
LIMIT
	COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
`

type ReadRolesParams struct {
	Offset interface{}
	Limit  interface{}
}

// READ
//
//	SELECT
//		id,
//		name,
//		description
//	FROM
//		roles
//	ORDER BY
//		name
//	LIMIT
//		COALESCE(NULLIF(?2, 0), 100) OFFSET COALESCE(?1, 0)
func (q *Queries) ReadRoles(ctx context.Context, arg ReadRolesParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, readRoles, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readRolesByGlob = `-- name: ReadRolesByGlob :many
SELECT
	id,
	name,
	description
FROM
	roles
WHERE
	name GLOB ?1
ORDER BY
	name
LIMIT
	COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
`

type ReadRolesByGlobParams struct {
	Glob   string
	Offset interface{}
	Limit  interface{}
}

// ReadRolesByGlob
//
//	SELECT
//		id,
//		name,
//		description
//	FROM
//		roles
//	WHERE
//		name GLOB ?1
//	ORDER BY
//		name
//	LIMIT
//		COALESCE(NULLIF(?3, 0), 100) OFFSET COALESCE(?2, 0)
func (q *Queries) ReadRolesByGlob(ctx context.Context, arg ReadRolesByGlobParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, readRolesByGlob, arg.Glob, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoleDescription = `-- name: UpdateRoleDescription :exec
UPDATE
	roles
SET
	description = ?1
WHERE
	name = ?2
`

type UpdateRoleDescriptionParams struct {
	Description *string
	Role        string
}

// UpdateRoleDescription
//
//	UPDATE
//		roles
//	SET
//		description = ?1
//	WHERE
//		name = ?2
func (q *Queries) UpdateRoleDescription(ctx context.Context, arg UpdateRoleDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateRoleDescription, arg.Description, arg.Role)
	return err
}

const updateRoleName = `-- name: UpdateRoleName :exec

UPDATE
	roles
SET
	name = ?1
WHERE
	name = ?2
`

type UpdateRoleNameParams struct {
	Name string
	Role string
}

// UPDATE
//
//	UPDATE
//		roles
//	SET
//		name = ?1
//	WHERE
//		name = ?2
func (q *Queries) UpdateRoleName(ctx context.Context, arg UpdateRoleNameParams) error {
	_, err := q.db.ExecContext(ctx, updateRoleName, arg.Name, arg.Role)
	return err
}
