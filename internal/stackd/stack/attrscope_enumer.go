// Code generated by "enumer -type AttrScope -linecomment -text"; DO NOT EDIT.

package stack

import (
	"fmt"
	"strings"
)

const _AttrScopeName = "globalmodelzoneclusterrackapplianceenvironmenthostswitchbmc"

var _AttrScopeIndex = [...]uint8{0, 6, 11, 15, 22, 26, 35, 46, 50, 56, 59}

const _AttrScopeLowerName = "globalmodelzoneclusterrackapplianceenvironmenthostswitchbmc"

func (i AttrScope) String() string {
	if i < 0 || i >= AttrScope(len(_AttrScopeIndex)-1) {
		return fmt.Sprintf("AttrScope(%d)", i)
	}
	return _AttrScopeName[_AttrScopeIndex[i]:_AttrScopeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AttrScopeNoOp() {
	var x [1]struct{}
	_ = x[GlobalScope-(0)]
	_ = x[ModelScope-(1)]
	_ = x[ZoneScope-(2)]
	_ = x[ClusterScope-(3)]
	_ = x[RackScope-(4)]
	_ = x[ApplianceScope-(5)]
	_ = x[EnvironmentScope-(6)]
	_ = x[HostScope-(7)]
	_ = x[SwitchScope-(8)]
	_ = x[BMCScope-(9)]
}

var _AttrScopeValues = []AttrScope{GlobalScope, ModelScope, ZoneScope, ClusterScope, RackScope, ApplianceScope, EnvironmentScope, HostScope, SwitchScope, BMCScope}

var _AttrScopeNameToValueMap = map[string]AttrScope{
	_AttrScopeName[0:6]:        GlobalScope,
	_AttrScopeLowerName[0:6]:   GlobalScope,
	_AttrScopeName[6:11]:       ModelScope,
	_AttrScopeLowerName[6:11]:  ModelScope,
	_AttrScopeName[11:15]:      ZoneScope,
	_AttrScopeLowerName[11:15]: ZoneScope,
	_AttrScopeName[15:22]:      ClusterScope,
	_AttrScopeLowerName[15:22]: ClusterScope,
	_AttrScopeName[22:26]:      RackScope,
	_AttrScopeLowerName[22:26]: RackScope,
	_AttrScopeName[26:35]:      ApplianceScope,
	_AttrScopeLowerName[26:35]: ApplianceScope,
	_AttrScopeName[35:46]:      EnvironmentScope,
	_AttrScopeLowerName[35:46]: EnvironmentScope,
	_AttrScopeName[46:50]:      HostScope,
	_AttrScopeLowerName[46:50]: HostScope,
	_AttrScopeName[50:56]:      SwitchScope,
	_AttrScopeLowerName[50:56]: SwitchScope,
	_AttrScopeName[56:59]:      BMCScope,
	_AttrScopeLowerName[56:59]: BMCScope,
}

var _AttrScopeNames = []string{
	_AttrScopeName[0:6],
	_AttrScopeName[6:11],
	_AttrScopeName[11:15],
	_AttrScopeName[15:22],
	_AttrScopeName[22:26],
	_AttrScopeName[26:35],
	_AttrScopeName[35:46],
	_AttrScopeName[46:50],
	_AttrScopeName[50:56],
	_AttrScopeName[56:59],
}

// AttrScopeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AttrScopeString(s string) (AttrScope, error) {
	if val, ok := _AttrScopeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AttrScopeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AttrScope values", s)
}

// AttrScopeValues returns all values of the enum
func AttrScopeValues() []AttrScope {
	return _AttrScopeValues
}

// AttrScopeStrings returns a slice of all String values of the enum
func AttrScopeStrings() []string {
	strs := make([]string, len(_AttrScopeNames))
	copy(strs, _AttrScopeNames)
	return strs
}

// IsAAttrScope returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AttrScope) IsAAttrScope() bool {
	for _, v := range _AttrScopeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for AttrScope
func (i AttrScope) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AttrScope
func (i *AttrScope) UnmarshalText(text []byte) error {
	var err error
	*i, err = AttrScopeString(string(text))
	return err
}
