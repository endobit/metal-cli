// Code generated by "enumer -type HostType -linecomment -text"; DO NOT EDIT.

package stack

import (
	"fmt"
	"strings"
)

const _HostTypeName = "metalvirtualcontainer"

var _HostTypeIndex = [...]uint8{0, 5, 12, 21}

const _HostTypeLowerName = "metalvirtualcontainer"

func (i HostType) String() string {
	if i < 0 || i >= HostType(len(_HostTypeIndex)-1) {
		return fmt.Sprintf("HostType(%d)", i)
	}
	return _HostTypeName[_HostTypeIndex[i]:_HostTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _HostTypeNoOp() {
	var x [1]struct{}
	_ = x[MetalHostType-(0)]
	_ = x[VirtualHostType-(1)]
	_ = x[ContainerHostType-(2)]
}

var _HostTypeValues = []HostType{MetalHostType, VirtualHostType, ContainerHostType}

var _HostTypeNameToValueMap = map[string]HostType{
	_HostTypeName[0:5]:        MetalHostType,
	_HostTypeLowerName[0:5]:   MetalHostType,
	_HostTypeName[5:12]:       VirtualHostType,
	_HostTypeLowerName[5:12]:  VirtualHostType,
	_HostTypeName[12:21]:      ContainerHostType,
	_HostTypeLowerName[12:21]: ContainerHostType,
}

var _HostTypeNames = []string{
	_HostTypeName[0:5],
	_HostTypeName[5:12],
	_HostTypeName[12:21],
}

// HostTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func HostTypeString(s string) (HostType, error) {
	if val, ok := _HostTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _HostTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to HostType values", s)
}

// HostTypeValues returns all values of the enum
func HostTypeValues() []HostType {
	return _HostTypeValues
}

// HostTypeStrings returns a slice of all String values of the enum
func HostTypeStrings() []string {
	strs := make([]string, len(_HostTypeNames))
	copy(strs, _HostTypeNames)
	return strs
}

// IsAHostType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i HostType) IsAHostType() bool {
	for _, v := range _HostTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for HostType
func (i HostType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for HostType
func (i *HostType) UnmarshalText(text []byte) error {
	var err error
	*i, err = HostTypeString(string(text))
	return err
}
